<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="JSF Source Build Setup" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <property file="../../build.properties"/>

    <import file="${jsf.build.home}/common/ant/maven.xml"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement
                  location="${jsf.build.home}/common/lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="aQute/bnd/ant/taskdef.properties">
        <classpath>
            <pathelement
                  location="${jsf.build.home}/common/lib/bnd-0.0.249.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="installerBuilder" classname="org.jvnet.poormans_installer.builder.BuilderTask">
        <classpath>
            <pathelement location="${jsf.build.home}/common/lib/installer-builder.jar"/>
            <pathelement location="${jsf.build.home}/common/lib/sfx4j-1.0.jar"/>
        </classpath>
    </taskdef>
    <path id="maven-ant-tasks.classpath" path="${jsf.build.home}/common/lib/maven-ant-tasks-2.0.10.jar" />
      <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
               uri="antlib:org.apache.maven.artifact.ant"
               classpathref="maven-ant-tasks.classpath" />

    
    <!-- Setup the time properties for use with the project -->
    <tstamp/>
    
    <!-- Properties needed throughout the project -->

    <!-- Structural -->
    <property name="api.dir" value="${jsf.build.home}/jsf-api"/>
    <property name="mvn.api.dir" value="${api.dir}/build/mvn" />
    <property name="impl.dir" value="${jsf.build.home}/jsf-ri"/>
    <property name="mvn.impl.dir" value="${jsf.build.home}/jsf-ri/build/mvn"/>
    <property name="tools.dir" value="${jsf.build.home}/jsf-tools"/>    
    <property name="demo.dir" value="${jsf.build.home}/jsf-demo"/>
    <property name="spec.snapshot.dir" 
              value="${demo.dir}/dist/spec-snapshot" />
    <property name="impl.test.results.dir" value="${impl.dir}/testresults"/>
    <property name="api.test.results.dir" value="${api.dir}/testresults"/>

    <!-- Artifacts of interest -->
    <property name="jsf-api.jar" value="${api.dir}/build/lib/jsf-api.jar"/>
    <property name="jsf-tools.jar" value="${tools.dir}/build/lib/jsf-tools.jar"/>
    <property name="jsf-impl.jar" value="${impl.dir}/build/lib/jsf-impl.jar"/>   
    <property name="jsf.test.jar" value="${jsf.build.home}/lib/jsf-extensions-test-time.jar"/>    
    <property name="installer.jar" value="${jsf.build.home}/common/lib/installer-builder.jar"/>
    <property name="javanettasks.jar" value="${jsf.build.home}/common/lib/javanettasks-1.0.5.jar"/>
    <property name="standard.renderkit.xml" value="${api.dir}/doc/standard-html-renderkit.xml"/>

    <!-- Version -->
    <property name="spec.version" value="2.0"/>
    <property name="patch.version" value="2"/>
    <property name="impl.name" value="Mojarra"/>
    <property name="build.number" value="${DSTAMP}"/>
    <property name="build.type" value="SNAPSHOT"/>
    <property name="impl.version.number" value="${spec.version}.${patch.version}" />
    <property name="impl.version" value="${impl.version.number}-${build.type}"/>
    <property name="full.impl.version" value="${impl.version.number} (${build.number}-${build.type})"/>
    <property name="snapshot.version" value="${impl.version.number}-SNAPSHOT"/>

    <!-- Environment -->
    <property environment="myenv" />
    <property name="http.proxy.host" value=""/>
    <property name="http.proxy.port" value=""/>

    <!-- Change bundle -->
    <property name="change.bundle.dir" value="${jsf.build.home}/common/ant/bin" />

    <!-- Debug args (OVERRIDE IN BUILD.PROPERTIES) -->
    <property name="debug.jvm.args" value=""/>

    <!--  TODO remove this once maven stuff is complete, it's just here for reference.

    <target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
            classpath="lib/maven-ant-tasks-2.0.9.jar"/>
        <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
            <isset property="maven.repo.local"/>
        </condition>
        <echo>maven.repo.local=${maven.repo.local}</echo>
        <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
        <artifact:pom file="pom.xml" id="maven.project"/>
        <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
    </target>

    -->
    <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
        <isset property="maven.repo.local"/>
    </condition>
    <echo>maven.repo.local=${maven.repo.local}</echo>
    <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
    
    <artifact:remoteRepository id="jboss.repo" url="http://repository.jboss.com/maven2/"/>
    <artifact:remoteRepository id="j.n.repo" url="http://download.java.net/maven/2/"/>
    <artifact:remoteRepository id="gf.repo" url="http://download.java.net/maven/glassfish/"/>
    <artifact:remoteRepository id="gf.nexus.repo" url="http://maven.glassfish.org/content/groups/glassfish/"/>
    <artifact:remoteRepository id="codehaus.repo" url="http://repository.codehaus.org/"/>
    <artifact:remoteRepository id="ibiblio.repo" url="http://mirrors.ibiblio.org/pub/mirrors/maven2/"/>

    <artifact:dependencies filesetId="compile.filepath" pathId="compile.path">
        <dependency groupId="org.codehaus.groovy" artifactId="groovy-all" version="1.6.4" scope="provided"/>
        <dependency groupId="org.glassfish.web" artifactId="el-impl" version="2.2" scope="provided"/>
        <dependency groupId="javax" artifactId="javaee-api" version="6.0-SNAPSHOT" scope="provided"/>
        <localRepository refid="local.repository"/>
        <remoteRepository refid="j.n.repo"/>
        <remoteRepository refid="gf.repo"/>
        <remoteRepository refid="gf.nexus.repo"/>
    </artifact:dependencies>
    
    <artifact:dependencies filesetId="commons.filepath" pathId="commons.path">
        <dependency groupId="commons-collections" artifactId="commons-collections" version="2.1.1"/>
        <dependency groupId="commons-digester" artifactId="commons-digester" version="1.5"/>
        <dependency groupId="commons-beanutils" artifactId="commons-beanutils" version="1.6.1"/>
        <dependency groupId="commons-logging" artifactId="commons-logging" version="1.0.4"/>
        <localRepository refid="local.repository"/>
        <remoteRepository refid="gf.nexus.repo"/>
    </artifact:dependencies>

    <path id="compile.classpath">
        <path refid="compile.path"/>
    </path>

    <path id="apache.commons.classpath">
        <path refid="commons.path"/>
    </path>

    <!-- Common Targets -->

    <!-- Convenience macro for javac -->
    <macrodef name="jsf.javac">        
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="source" default="1.5"/>
        <attribute name="target" default="1.5"/>
        <element name="classpath" implicit="true" optional="yes"/>
        <sequential>           
            <javac srcdir="@{srcdir}"
                   destdir="@{destdir}"
                   debug="${compile.debug}"
                   deprecation="${compile.deprecation}"
                   source="@{source}"
                   target="@{target}"
                   includes="@{includes}"
                   excludes="@{excludes}">
                <classpath/>
            </javac>
        </sequential>
    </macrodef>
    <!--
       Build a JAR file which includes a manifest including
       information pertaining to Sun's JavaServer Faces
       implementation.
    -->
    <macrodef name="jsf.manifested.jar">
        <attribute name="jarfile"/>
        <attribute name="basedir"/>
        <attribute name="extension-name"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <sequential>
            <jar jarfile="@{jarfile}"
                 basedir="@{basedir}"
                 excludes="@{excludes}"
                 includes="@{includes}">
                <manifest>
                    <attribute name="Specification-Title"
                               value="JavaServer Faces"/>
                    <attribute name="Specification-Version"
                               value="${spec.version}"/>
                    <attribute name="Implementation-Title"
                               value="${impl.name}"/>
                    <attribute name="Implementation-Version"
                               value="${impl.version}"/>
                    <attribute name="Implementation-Vendor"
                               value="Oracle America, Inc."/>
                    <attribute name="Implementation-Vendor-Id"
                               value="com.sun"/>
                    <attribute name="Extension-Name"
                               value="@{extension-name}"/>
                </manifest>                
            </jar>
        </sequential>
    </macrodef>

    <!--
       Build an OSGi bundle
    -->
    <macrodef name="jsf.osgi.jar">
        <attribute name="jarfile"/>
        <attribute name="basedir"/>
        <attribute name="bndfile"/>
        <attribute name="extension-name"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <sequential>
            <bnd
                classpath="@{basedir}"
                failok="false"
                exceptions="false"
                files="@{bndfile}"
                output="@{jarfile}"/>
        </sequential>
    </macrodef>

    <macrodef name="jsf.generate.html.components">
        <attribute name="output-dir"/>

        <sequential>
            <mkdir dir="${tools.dir}/build/classes"/>
            <jsf.javac srcdir="${tools.dir}/src/main/java"
                   destdir="${tools.dir}/build/classes">
                <classpath>
                    <path refid="compile.classpath"/>  
                    <path refid="apache.commons.classpath"/>
                </classpath>
            </jsf.javac>
            <taskdef name="generateComponents"
                     classname="com.sun.faces.ant.ComponentGenTask">
                <classpath>
                    <pathelement location="${tools.dir}/build/classes"/>
                </classpath>
            </taskdef>
            <generateComponents
                  generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
                  facesConfig="${standard.renderkit.xml}"
                  fork="true">
                <classpath>
                    <path refid="compile.classpath"/>
                    <pathelement location="${jsf-api.jar}"/>
                    <pathelement location="${tools.dir}/build/classes"/>
                </classpath>
                <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            </generateComponents>
        </sequential>
    </macrodef>

</project>
