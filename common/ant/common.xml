<?xml version="1.0" encoding="UTF-8"?>
      
<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in complicomance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->
      
<project name="JSF Common" basedir=".">

    <import file="${jsf.build.home}/common/ant/${container.name}/container.xml"/>
    <import file="${jsf.build.home}/common/ant/dependencies.xml"/>
    <import file="${jsf.build.home}/common/ant/maven.xml"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement
                  location="${jsf.build.home}/common/lib/ant-contrib.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="aQute/bnd/ant/taskdef.properties">
        <classpath>
            <pathelement
                  location="${jsf.build.home}/common/lib/bnd-0.0.249.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="installerBuilder" classname="org.jvnet.poormans_installer.builder.BuilderTask">
        <classpath>
            <pathelement location="${jsf.build.home}/common/lib/installer-builder.jar"/>
            <pathelement location="${jsf.build.home}/common/lib/sfx4j-1.0.jar"/>
        </classpath>
    </taskdef>
    
    <!-- Setup the time properties for use with the project -->
    <tstamp/>
    
    <!-- Properties needed throughout the project -->

    <!-- Structural -->
    <property name="api.dir" value="${jsf.build.home}/jsf-api"/>
    <property name="mvn.api.dir" value="${api.dir}/build/mvn" />
    <property name="impl.dir" value="${jsf.build.home}/jsf-ri"/>
    <property name="mvn.impl.dir" value="${jsf.build.home}/jsf-ri/build/mvn"/>
    <property name="tools.dir" value="${jsf.build.home}/jsf-tools"/>    
    <property name="demo.dir" value="${jsf.build.home}/jsf-demo"/>
    <property name="spec.snapshot.dir" 
              value="${demo.dir}/dist/spec-snapshot" />
    <property name="impl.test.results.dir" value="${impl.dir}/testresults"/>
    <property name="api.test.results.dir" value="${api.dir}/testresults"/>

    <!-- Artifacts of interest -->
    <property name="jsf-api.jar" value="${api.dir}/build/lib/jsf-api.jar"/>
    <property name="jsf-tools.jar" value="${tools.dir}/build/lib/jsf-tools.jar"/>
    <property name="jsf-impl.jar" value="${impl.dir}/build/lib/jsf-impl.jar"/>   
    <property name="jsf.test.jar" value="${jsf.build.home}/lib/jsf-extensions-test-time.jar"/>    
    <property name="installer.jar" value="${jsf.build.home}/common/lib/installer-builder.jar"/>
    <property name="javanettasks.jar" value="${jsf.build.home}/common/lib/javanettasks-1.0.5.jar"/>
    <property name="standard.renderkit.xml" value="${api.dir}/doc/standard-html-renderkit.xml"/>

    <!-- Version -->
    <property name="spec.version" value="2.0"/>
    <property name="patch.version" value="2"/>
    <property name="impl.name" value="Mojarra"/>
    <property name="build.number" value="${DSTAMP}"/>
    <property name="build.type" value="SNAPSHOT"/>
    <property name="impl.version.number" value="${spec.version}.${patch.version}" />
    <property name="impl.version" value="${impl.version.number}-${build.type}"/>
    <property name="full.impl.version" value="${impl.version.number} (${build.number}-${build.type})"/>
    <property name="snapshot.version" value="${impl.version.number}-SNAPSHOT"/>

    <!-- Environment -->
    <property environment="myenv" />
    <property name="http.proxy.host" value=""/>
    <property name="http.proxy.port" value=""/>

    <!-- Change bundle -->
    <property name="change.bundle.dir" value="${jsf.build.home}/common/ant/bin" />

    <!-- Debug args (OVERRIDE IN BUILD.PROPERTIES) -->
    <property name="debug.jvm.args" value=""/>

    <!-- Test classpaths that are used in multiple places within the project -->
    <path id="junit.classpath">
        <pathelement location="${junit.jar}"/>
    </path>

    <path id="jsf.test.jar.classpath">
        <pathelement location="${jsf.test.jar}"/>
    </path>

    <path id="htmlunit.compile.classpath">
        <path refid="junit.classpath"/>
        <fileset dir="${htmlunit.home}/lib" includes="htmlunit*.jar,
                                                      commons-httpclient*.jar"/>
    </path>

    <path id="htmlunit.runtime.classpath">
        <path refid="junit.classpath"/>
        <fileset dir="${htmlunit.home}/lib" includes="*.jar"/>
    </path>

    <!-- Make sure to compile/run with the special cactus jar 
         in our source repository, rather than the stock version -->
    <path id="cactus.compile.classpath">
        <path refid="junit.classpath"/>
        <fileset dir="${jsf.build.home}/lib" includes="cactus-*.jar"/>
        <fileset dir="${cactus.home}/lib" includes="cactus-*.jar" excludes="*ant*.jar"/>
    </path>            

    <path id="cactus.runtime.classpath">
        <path refid="junit.classpath"/>
        <fileset dir="${cactus.home}/lib" includes="*.jar"  excludes="cactus-1.*.jar"/>
        <fileset dir="${jsf.build.home}/lib" includes="cactus-*.jar"/>
    </path>

    <path id="compile.classpath">
        <pathelement location="${el-api.jar}"/>
        <pathelement location="${el-impl.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${jsp.jar}"/>
        <pathelement location="${portlet.jar}"/>
        <pathelement location="${jstl.jar}"/>
        <pathelement location="${annotation.jar}"/>
        <pathelement location="${groovy.jar}"/>
        <pathelement location="${validation-api.jar}"/>
    </path>
    
    <path id="sun.commons.classpath">
        <pathelement location="${sun-commons-beanutils.jar}"/>
        <pathelement location="${sun-commons-digester.jar}"/>
        <pathelement location="${sun-commons-collections.jar}"/>
        <pathelement location="${sun-commons-logging.jar}"/>
    </path>

    <!-- Common Targets -->

    <!-- Convenience macro for javac -->
    <macrodef name="jsf.javac">        
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="source" default="1.5"/>
        <attribute name="target" default="1.5"/>
        <element name="classpath" implicit="true" optional="yes"/>
        <sequential>           
            <javac srcdir="@{srcdir}"
                   destdir="@{destdir}"
                   debug="${compile.debug}"
                   deprecation="${compile.deprecation}"
                   source="@{source}"
                   target="@{target}"
                   includes="@{includes}"
                   excludes="@{excludes}">
                <classpath/>
            </javac>
        </sequential>
    </macrodef>

    <!-- Convenience wrapper for junit -->
    <macrodef name="jsf.junit">
        <attribute name="classpath-refid"/>
        <attribute name="context-path" default=""/>
        <attribute name="test-results-dir"/>
        <attribute name="assert.classes" default=""/>
        <attribute name="logging.config.file" default=""/>
        <element name="tests" optional="true"/>
        <element name="custom-sysproperties" optional="true"/>
        <element name="suite" optional="true"/>
        <sequential>
            <junit printsummary="yes"
                   fork="yes"
                   haltonfailure="${halt.on.failure}"
                   haltonerror="${halt.on.failure}">
                <jvmarg line="${debug.jvm.args}"/>
                <jvmarg line="@{assert.classes}"/>
                <classpath refid="@{classpath-refid}"/>
                <formatter type="plain" usefile="false"/>
                <formatter type="xml" usefile="true"/>
                <sysproperty key="host" value="${container.host}"/>
                <sysproperty key="port" value="${container.port}"/>
                <sysproperty key="context.path" value="@{context-path}"/>
                <sysproperty key="java.util.logging.config.file" 
                             value="@{logging.config.file}"/>
                <custom-sysproperties/>
                <batchtest todir="@{test-results-dir}">
                    <tests/>
                </batchtest>
                <suite/>
            </junit>
        </sequential>
    </macrodef>

    <!-- Conveninece macro for building WARs -->
    <macrodef name="jsf.war">
        <attribute name="basedir"/>
        <attribute name="archive-name"/>
        <attribute name="webxml"/>
        <element name="archive-elements" optional="true"/>
        <sequential>
            <echo message="Creating archive '@{archive-name}'..."/>

            <jar destfile="@{basedir}/@{archive-name}.war">
                <zipfileset file="@{webxml}"
                            prefix="WEB-INF"/>
                <archive-elements/>
            </jar>
            <if>
                <equals arg1="${build.standalone}" arg2="true"/>
                <then>
                    <echo message="Adding dependent libraries..."/>

                    <for list="${jsf-impl.jar},${jsf-api.jar},${webapp.jars}"
                         param="jar">
                        <sequential>
                            <echo message="JAR: @{jar}"/>
                            <jar destfile="@{basedir}/@{archive-name}.war"
                                 update="true">
                                <zipfileset file="@{jar}" prefix="WEB-INF/lib"/>
                            </jar>
                        </sequential>
                    </for>

                </then>
                <else>
                    <echo message="Will not package dependent libraries..."/>
                </else>
            </if>
        </sequential>
    </macrodef>

    <!--
       Build a JAR file which includes a manifest including
       information pertaining to Sun's JavaServer Faces
       implementation.
    -->
    <macrodef name="jsf.manifested.jar">
        <attribute name="jarfile"/>
        <attribute name="basedir"/>
        <attribute name="extension-name"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <sequential>
            <jar jarfile="@{jarfile}"
                 basedir="@{basedir}"
                 excludes="@{excludes}"
                 includes="@{includes}">
                <manifest>
                    <attribute name="Specification-Title"
                               value="JavaServer Faces"/>
                    <attribute name="Specification-Version"
                               value="${spec.version}"/>
                    <attribute name="Implementation-Title"
                               value="${impl.name}"/>
                    <attribute name="Implementation-Version"
                               value="${impl.version}"/>
                    <attribute name="Implementation-Vendor"
                               value="Sun Microsystems, Inc."/>
                    <attribute name="Implementation-Vendor-Id"
                               value="com.sun"/>
                    <attribute name="Extension-Name"
                               value="@{extension-name}"/>
                </manifest>                
            </jar>
        </sequential>
    </macrodef>

    <!--
       Build an OSGi bundle
    -->
    <macrodef name="jsf.osgi.jar">
        <attribute name="jarfile"/>
        <attribute name="basedir"/>
        <attribute name="bndfile"/>
        <attribute name="extension-name"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <sequential>
            <bnd
                classpath="@{basedir}"
                failok="false"
                exceptions="false"
                files="@{bndfile}"
                output="@{jarfile}"/>
        </sequential>
    </macrodef>

    <macrodef name="jsf.generate.html.components">
        <attribute name="output-dir"/>

        <sequential>
            <mkdir dir="${tools.dir}/build/classes"/>
            <jsf.javac srcdir="${tools.dir}/src"
                   destdir="${tools.dir}/build/classes">
                <classpath>
                    <path refid="compile.classpath"/>  
                    <path refid="sun.commons.classpath"/>
                </classpath>
            </jsf.javac>
            <taskdef name="generateComponents"
                     classname="com.sun.faces.ant.ComponentGenTask">
                <classpath>
                    <pathelement location="${tools.dir}/build/classes"/>
                </classpath>
            </taskdef>
            <generateComponents
                  generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
                  facesConfig="${standard.renderkit.xml}"
                  fork="true">
                <classpath>
                    <path refid="compile.classpath"/>
                    <pathelement location="${jsf-api.jar}"/>
                    <pathelement location="${tools.dir}/build/classes"/>
                </classpath>
                <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            </generateComponents>
        </sequential>
    </macrodef>

    <!-- Change bundle target(s) -->

    <target name="cb" description="Create a change bundle for review">
            <if>
                <os family="unix"/>
                <then>
                    <exec executable="bash" failonerror="true">
                        <arg line="${change.bundle.dir}/cb.sh"/>
                    </exec>
                </then>
                <elseif>
                    <os family="windows"/>
                    <then>
                        <exec executable="${change.bundle.dir}/cb.bat" failonerror="true"/>
                    </then>
                </elseif>
                <else>
                    <echo message="Your platform is not currently supported." />
                </else>
            </if>
    </target>
</project>
