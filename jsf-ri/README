This README documents the Sun Reference implementation (RI) for JSR 127,
JavaServer (tm) Faces.

jsf-api cvs tag for this implementation: JSF_API_20020607
jsf-api-spec for this implementation: JSF_20020607.pdf


Major changes/features in this release:
=======================================

* A "page-url" element has been added to ".xul" files which refers to uri for jsp page.

* Faces_Basic webapp has a link and submit button that navigates to another page
  upon click.

* Change to a completely "path info" based URI scheme.

Known Issues With This Release
==============================

1. Components are instantiated on each request.
   Fix:

2. Components don't get their RendererType property set until renderering
   time, which implies that the default decode() is used, but the
   RenderKit's encode is used.
   Fix:

3. The unit tests could use some refactoring
   Fix:


4. It's impossible to use the same tree on different jsp pages since the
   filename of the XUL tree must be the same as the filename of the JSP
   page, with different extensions of course.  For example: login.xul and
   login.jsp.  This restriction will be lifted when we have a better idea
   for navigation.

   Fix: A new element "<page-url>" has been introduced in the "xul" metadata
        file which refers to the "jsp" page for this "xul" file
        (ex: /Faces_Basic.jsp).  The name of the "jsp" need not correspond
        with the "xul" file. 

   This may be a temporary fix, because we may be moving away from
   maintaining a seperate "xul" file, as well as "jsp" page.  We 
   still will have a component tree, but it may be built automatically.

5. For hyperlink event processing, where the destination "target" is another
   Faces page ("target" will refer to the "xul" file of the destination
   page), we need to set the response tree to this "target" attribute value. 

      Example: <link id="mylink" target="/Faces_Basic_Thanks.xul"
                   text="Thanks..." value="mylink" />

   So, a tree would be created for "Faces_Basic_Thanks.xul" and set as
   the response tree.  The ideal solution would be to enqueue a Command
   event in the hyperlink renderer's "decode" method, set the response 

   tree in UICommand event processing method, and return "true" to 
   proceed to the "rendering" phase.  However, UICommand accomodates both 
   Hyperlinks and Buttons, so the UICommand.event method becomes unmanageable 
   (the event processing logic for Buttons may be different).


   Fix: Create the new tree (corresponding to the "xul" tree id specified in
        "target" attribute) and overwrite the response tree in the 
        hyperlink's "decode" method.

   This is probably a temporary fix until we come up with a better 
   solution. One possible solution may be to enqueue the Command event
   in the "decode" method, and just handle the event in an event handler
   (during InvokeApplication phase).  However, we would be going through
   some needless phases (such as validation), when all we want to do
   for hyperlinks, is go to the "rendering" phase.


6. Component type is hard coded in component subclasses (ex: UICommand)
   as fully qualfied class names (ex: javax.faces.component.UICommand).
   However, a component's type is configurable in the renderkit's xml 
   configuration file (HtmlBasicRenderKit.xml).

7. Since Phase ids are not consecutive anymore, phaseid cannot be used as an index to 
   locate a particular phase. Since Phase doesn't have accessor methods for Id, 
   we have to cast to RI implementation class GenericPhaseImpl.

8. There is no way to register validators in XUL.

