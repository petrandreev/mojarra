This README documents the Sun Reference implementation (RI) for JSR 127,
JavaServer (tm) Faces.

jsf-api cvs tag for this implementation: JSF_API_20020614A
jsf-api-spec for this implementation: JSF_20020614.pdf


Major changes/features in this release:
=======================================

[2.4][3.1.8][UIComponent] UIComponent.event() renamed to processEvent().
Added UIComponent.processEvents() for the default functionality to
process the event queue for a single component. Event handler can return
true to trigger transfer to Render Response.

[6.1][Lifecycle] Added executePhase() method for executing an individual
phase. Details of lifecycle management are still under discussion.

[6.2][PhaseListener] Remove obsolete class. Custom phases can do
anything that listeners could do, and then some, so listeners were
redundant.

[5.2][Message] Remove messageId and reference propeties. Former is not
needed once the localization has taken place, and the latter can be
established externally.

[5.3][MessageImpl] Added concrete implemenation of Mesasge (should
really be named MessageBase though).

[5.5][FacesContextFactory] createFacesContext() renamed to
getFacesContext().

[3.3][TreeFactory] createTree() renamed to getTree().

[5.8][FacesContextFactory][FacesServlet] Simplify to a single
getFacesContext() method that takes a Lifecycle instance, rather than a
Lifecycle identifier, as the last parameter.

[9.1.3][FacesServlet] Lifecycle identifier to use is now configurable
via a context initialization parameter.

[7.3][RenderKitFactory] createRenderKit() renamed to getRenderKit().

[Renderer] Implement attribute descriptor support

[2.7][5.1.4][ApplicationHandler] Event processing methods collapsed into
single processEvent() method. Applications are explicitly allowed to
queue Messages. Added FacesContext.getApplicationEventsCount().

[6.4][ViewHandler] Added new pluggable interface for how the Render
Response phase actually performs its output. Default implementation must
support RD.forward().

[6.5][LifecycleFactory] createLifecycle() renamed to getLifecycle().
Added missing addLifecycle() method. Removed -- at least for now --
registerBefore() and registerAfter() since an implementation can
completely configure its own Lifecycle before calling addLifecycle() to
register it. This area is still under discussion so will likely change
some more.

[2.4][3.1.8][5.1.8][UIComponent][FacesContext] Migrate queueing of
request events from UIComponent to FacesContext.

[5.1.5][FacesContext] Removed obsolete MessageList
class (replaced by MessageResources support), and put message queuing
methods directly on FacesContext.

[5.1.6][FacesContext] Removed getPhaseId() and setPhaseId() in
preparation for possibly eliminating formal phase identifiers.

[5.6][MessageResources] Added new class to represent a set of
localizable messages keyed by message ids. More than one
MessageResources can be used in the same JSF app.

[5.7][MessageResourcesFactory] Added factory class for MessageResources
instances. Two standard instances (one for API classes, one for
implementation classes) must be supported, but apps and component
libraries can also add their own. You should be able to reuse a lot of
the code in .03 that supported this concept.

[4.8][4.9][UISelectMany][UISelectOne] Now accept Object types instead of
String types only. Supports arrays and Lists as the "items" property
value, as well as the value pointed at by "itemsModelReference".
Abstracted common logic into new UISelectBase class (not public).

AttributeDescriptor Support is implemented


Known Issues With This Release
==============================

*  Components are instantiated on each request.
   Fix:

*  It's impossible to use the same tree on different jsp pages since the
   filename of the XUL tree must be the same as the filename of the JSP
   page, with different extensions of course.  For example: login.xul and
   login.jsp.  This restriction will be lifted when we have a better idea
   for navigation.

   Fix: A new element "<page-url>" has been introduced in the "xul" metadata
        file which refers to the "jsp" page for this "xul" file
        (ex: /Faces_Basic.jsp).  The name of the "jsp" need not correspond
        with the "xul" file. 

   This may be a temporary fix, because we may be moving away from
   maintaining a seperate "xul" file, as well as "jsp" page.  We 
   still will have a component tree, but it may be built automatically.

*  For hyperlink event processing, where the destination "target" is another
   Faces page ("target" will refer to the "xul" file of the destination
   page), we need to set the response tree to this "target" attribute value. 

      Example: <link id="mylink" target="/Faces_Basic_Thanks.xul"
                   text="Thanks..." value="mylink" />

   So, a tree would be created for "Faces_Basic_Thanks.xul" and set as
   the response tree.  The ideal solution would be to enqueue a Command
   event in the hyperlink renderer's "decode" method, set the response 

   tree in UICommand event processing method, and return "true" to 
   proceed to the "rendering" phase.  However, UICommand accomodates both 
   Hyperlinks and Buttons, so the UICommand.event method becomes unmanageable 
   (the event processing logic for Buttons may be different).


   Fix: Create the new tree (corresponding to the "xul" tree id specified in
        "target" attribute) and overwrite the response tree in the 
        hyperlink's "decode" method.

   This is probably a temporary fix until we come up with a better 
   solution. One possible solution may be to enqueue the Command event
   in the "decode" method, and just handle the event in an event handler
   (during InvokeApplication phase).  However, we would be going through
   some needless phases (such as validation), when all we want to do
   for hyperlinks, is go to the "rendering" phase.


*  Component type is hard coded in component subclasses (ex: UICommand)
   as fully qualfied class names (ex: javax.faces.component.UICommand).
   However, a component's type is configurable in the renderkit's xml 
   configuration file (HtmlBasicRenderKit.xml).

*  Since Phase ids are not consecutive anymore, phaseid cannot be used as
   an index to locate a particular phase. Since Phase doesn't have
   accessor methods for Id, we have to cast to RI implementation class
   GenericPhaseImpl.

*  There is no way to register validators in XUL.

*  AttributeDescriptor support happens all the time, even though it's
   only used at design time.
