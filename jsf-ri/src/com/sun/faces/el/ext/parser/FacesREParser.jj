/*****************************************
 * OPTIONS *
 *****************************************/

options {
  JAVA_UNICODE_ESCAPE = false; 
  UNICODE_INPUT = true; 
  STATIC = false;
  OPTIMIZE_TOKEN_MANAGER = true;
}

/*****************************************
 * PARSER JAVA CODE *
 *****************************************/

PARSER_BEGIN(FacesREParser)

package com.sun.faces.el.ext.parser;

import com.sun.faces.el.impl.*;
import com.sun.faces.el.ext.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated Reference Expression parser for JavaServer Faces.
 */

public class FacesREParser {

}

PARSER_END(FacesREParser)


/*****************************************
 * TOKENS *
 *****************************************/
SKIP:
{
  "\""
  | "'"
}
TOKEN :
{
/* Literals */

  < INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
   < STRING_LITERAL:
      ("\"" ((~["\"","\\"]) | ("\\" ( ["\\","\""] )))* "\"") |
      ("\'" ((~["\'","\\"]) | ("\\" ( ["\\","\'"] )))* "\'")
   >
|
  < BADLY_ESCAPED_STRING_LITERAL:
      ("\"" (~["\"","\\"])* ("\\" ( ~["\\","\""] ))) |
      ("\'" (~["\'","\\"])* ("\\" ( ~["\\","\'"] )))
  >

/* Reserved Words and Symbols */

| < DOT: "." >
| < LBRACKET: "[" >
| < RBRACKET: "]" >

/* Identifiers */

| < IDENTIFIER: (<LETTER>|<IMPL_OBJ_START>) (<LETTER>|<DIGIT>)* >
| < #IMPL_OBJ_START: "#" >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >

/* This is used to catch any non-matching tokens, so as to avoid any
   TokenMgrErrors */
| < ILLEGAL_CHARACTER: (~[" ","\n","\r","\t","$","{","}","+","=","*","&","^","%","#","@","!","|","?","<",">","`","~"]) >
}


/*****************************************
 * GRAMMAR PRODUCTIONS *
 *****************************************/

/**
 *
 * Returns a String if the expression string is a single String, an
 * Expression if the expression string is a single Expression, an
 * ExpressionString if it's a mixture of both.
 **/
Object ExpressionString () :
{
  Object ret = "";
  List elems = null;
  Object elem;
}
{
  /** Try to optimize for the case of a single expression or String **/
  ret = AttrValueExpression ()


  /** If there's more than one, then switch to using a List **/
  (
    elem = AttrValueExpression ()
     {
       if (elems == null) {
         elems = new ArrayList ();
	 elems.add (ret);
       }
       elems.add (elem);
     }
  )*

  {
    if (elems != null) {
      ret = new ExpressionString (elems.toArray ());
    }
    return ret;
  }
}

Expression AttrValueExpression () :
{
  Expression exp;
}
{
  exp = Expression () 
   { return exp; }
}


Expression Expression () :
{
  Expression ret;
}
{
  (
   ret = Value ()
  )
  { return ret; }
}

Expression Value () :
{
  Expression prefix;
  ValueSuffix suffix;
  List suffixes = null;
}
{
  prefix = ValuePrefix ()
    (suffix = ValueSuffix () 
      { 
	if (suffixes == null) {
	  suffixes = new ArrayList ();
	}
	suffixes.add (suffix);
      }
     )*

  {
    if (suffixes == null) {
      return prefix;
    }
    else {
      return new FacesComplexValue (prefix, suffixes);
    }
  }
}


/**
 * This is an element that can start a value
 **/
Expression ValuePrefix () :
{
  Expression ret;
}
{
  (
   ret = Literal ()
   | ret = NamedValue ()
   )
    { return ret; }
}


NamedValue NamedValue () :
{
  Token t;
}
{
  t = <IDENTIFIER> { return new FacesNamedValue (t.image); }
}

ValueSuffix ValueSuffix () :
{
  ValueSuffix suffix;
}
{
  (
   suffix = FacesPropertySuffix ()
   | suffix = FacesArraySuffix ()
   )

    { return suffix; }
}


FacesPropertySuffix FacesPropertySuffix () :
{
  Token t;
  String property;
}
{
  <DOT> 
     (property = Identifier ())

    {
      return new FacesPropertySuffix (property);
    }
}


ArraySuffix FacesArraySuffix () :
{
  Expression index;
}
{
  <LBRACKET>
     index = Expression ()
     <RBRACKET>
   
   {
     return new FacesArraySuffix (index);
   }
}


Literal Literal () :
{
  Literal ret;
}
{
  (
   ret = IntegerLiteral ()
   | ret = StringLiteral ()
   )
    { return ret; }
}

StringLiteral StringLiteral () :
{
  Token t;
}
{
  t = <STRING_LITERAL>
  { return StringLiteral.fromToken (t.image); }
}

IntegerLiteral IntegerLiteral () :
{
  Token t;
}
{
  t = <INTEGER_LITERAL>
  { return new IntegerLiteral (t.image); }
}

String Identifier () :
{
  Token t;
}
{
  (
   t = <IDENTIFIER>
   )
    { return t.image; }
}

