/*
 * $Id: FacesREParserTokenManager.java,v 1.1 2003/08/13 18:10:51 rlubke Exp $
 */

/*
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/* Generated By:JavaCC: Do not edit this line. FacesREParserTokenManager.java */

package com.sun.faces.el.ext.parser;


public class FacesREParserTokenManager implements FacesREParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            default :
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 34:
                return jjStartNfaWithStates_0(0, 1, 20);
            case 39:
                return jjStartNfaWithStates_0(0, 2, 21);
            case 46:
                return jjStopAtPos(0, 6);
            case 91:
                return jjStopAtPos(0, 7);
            case 93:
                return jjStopAtPos(0, 8);
            default :
                return jjMoveNfa_0(1, 0);
        }
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {
        0x1ff00000fffffffeL,
        0xffffffffffffc000L,
        0xffffffffL,
        0x600000000000000L
    };
    static final long[] jjbitVec2 = {
        0x0L,
        0x0L,
        0x0L,
        0xff7fffffff7fffffL
    };
    static final long[] jjbitVec3 = {
        0x0L,
        0xffffffffffffffffL,
        0xffffffffffffffffL,
        0xffffffffffffffffL
    };
    static final long[] jjbitVec4 = {
        0xffffffffffffffffL,
        0xffffffffffffffffL,
        0xffffL,
        0x0L
    };
    static final long[] jjbitVec5 = {
        0xffffffffffffffffL,
        0xffffffffffffffffL,
        0x0L,
        0x0L
    };
    static final long[] jjbitVec6 = {
        0x3fffffffffffL,
        0x0L,
        0x0L,
        0x0L
    };
    static final long[] jjbitVec7 = {
        0xfffffffffffffffeL,
        0xffffffffffffffffL,
        0xffffffffffffffffL,
        0xffffffffffffffffL
    };
    static final long[] jjbitVec8 = {
        0x0L,
        0x0L,
        0xffffffffffffffffL,
        0xffffffffffffffffL
    };

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 20;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 21:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            else if (curChar == 39) {
                                if (kind > 4)
                                    kind = 4;
                            }
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 1:
                            if ((0xffff384ffffd9ffL & l) != 0L) {
                                if (kind > 13)
                                    kind = 13;
                            } else if ((0x1800000000L & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                                jjCheckNAdd(2);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 3)
                                    kind = 3;
                                jjCheckNAdd(0);
                            } else if (curChar == 39)
                                jjCheckNAddStates(3, 7);
                            else if (curChar == 34)
                                jjCheckNAddStates(8, 12);
                            break;
                        case 20:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(9, 10);
                            else if (curChar == 34) {
                                if (kind > 4)
                                    kind = 4;
                            }
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 0:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 3)
                                kind = 3;
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if ((0x3ff001000000000L & l) == 0L)
                                break;
                            if (kind > 9)
                                kind = 9;
                            jjCheckNAdd(2);
                            break;
                        case 3:
                            if ((0xffff384ffffd9ffL & l) != 0L && kind > 13)
                                kind = 13;
                            break;
                        case 4:
                            if (curChar == 34)
                                jjCheckNAddStates(8, 12);
                            break;
                        case 5:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 7:
                            if (curChar == 34)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 8:
                            if (curChar == 34 && kind > 4)
                                kind = 4;
                            break;
                        case 9:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(9, 10);
                            break;
                        case 11:
                            if ((0xfffffffbffffffffL & l) != 0L && kind > 5)
                                kind = 5;
                            break;
                        case 12:
                            if (curChar == 39)
                                jjCheckNAddStates(3, 7);
                            break;
                        case 13:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 15:
                            if (curChar == 39)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 16:
                            if (curChar == 39 && kind > 4)
                                kind = 4;
                            break;
                        case 17:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 19:
                            if ((0xffffff7fffffffffL & l) != 0L && kind > 5)
                                kind = 5;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 21:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 19;
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 1:
                            if ((0x87fffffebffffffeL & l) != 0L) {
                                if (kind > 13)
                                    kind = 13;
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                                jjCheckNAdd(2);
                            }
                            break;
                        case 20:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddTwoStates(9, 10);
                            else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 11;
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(13, 15);
                            else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 2:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 9)
                                kind = 9;
                            jjCheckNAdd(2);
                            break;
                        case 3:
                            if ((0x87fffffebffffffeL & l) != 0L && kind > 13)
                                kind = 13;
                            break;
                        case 5:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 6:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 7:
                            if (curChar == 92)
                                jjCheckNAddStates(13, 15);
                            break;
                        case 9:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddTwoStates(9, 10);
                            break;
                        case 10:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 11;
                            break;
                        case 11:
                        case 19:
                            if ((0xffffffffefffffffL & l) != 0L && kind > 5)
                                kind = 5;
                            break;
                        case 13:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 14:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 15:
                            if (curChar == 92)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 17:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 18:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 19;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 21:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(0, 2);
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                if (kind > 9)
                                    kind = 9;
                                jjCheckNAdd(2);
                            }
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 13)
                                    kind = 13;
                            }
                            break;
                        case 20:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(13, 15);
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(9, 10);
                            break;
                        case 2:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 9)
                                kind = 9;
                            jjCheckNAdd(2);
                            break;
                        case 3:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 13)
                                kind = 13;
                            break;
                        case 5:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(13, 15);
                            break;
                        case 9:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(9, 10);
                            break;
                        case 11:
                        case 19:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 5)
                                kind = 5;
                            break;
                        case 13:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddStates(0, 2);
                            break;
                        case 17:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
        13,
        14,
        16,
        13,
        14,
        16,
        17,
        18,
        5,
        6,
        8,
        9,
        10,
        5,
        6,
        8,
    };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec3[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 51:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 61:
                return ((jjbitVec6[i2] & l2) != 0L);
            default :
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec8[i2] & l2) != 0L);
            default :
                if ((jjbitVec7[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    public static final String[] jjstrLiteralImages = {
        "",
        null,
        null,
        null,
        null,
        null,
        "\56",
        "\133",
        "\135",
        null,
        null,
        null,
        null,
        null,
    };
    public static final String[] lexStateNames = {
        "DEFAULT",
    };
    static final long[] jjtoToken = {
        0x23f9L,
    };
    static final long[] jjtoSkip = {
        0x6L,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[20];
    private final int[] jjstateSet = new int[40];
    protected char curChar;

    public FacesREParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public FacesREParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 20; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError(
                "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(
                EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                TokenMgrError.LEXICAL_ERROR);
        }
    }

}
