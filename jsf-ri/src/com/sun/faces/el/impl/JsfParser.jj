/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JsfParser.jj */
/*@egen*//*
	Author:	Jacob Hookom
	Email:	jacob at hookom.net
*/

/* == Option Declaration == */
options
{
	STATIC=false;                                                                                                                                       
	JAVA_UNICODE_ESCAPE=false;
  	UNICODE_INPUT=true;                         
}

/* == Parser Declaration == */
PARSER_BEGIN( JsfParser )
package com.sun.faces.el.impl;
import java.io.StringReader;
import java.util.Map;
import java.util.HashMap;
public class JsfParser/*@bgen(jjtree)*/implements JsfParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTJsfParserState jjtree = new JJTJsfParserState();

/*@egen*/
    protected static Map cache = new HashMap();
    public static Node parse(String ref) throws ParseException
    {
        if (ref == null)
        {
            throw new ParseException(ELSupport.msg("el.error.parser.ref.null"));
        }

        Node node = (Node) cache.get(ref);
        if (node == null)
        {
            node = (new JsfParser(new StringReader(ref))).execute();
            if (node instanceof AstComplex && node.jjtGetNumChildren() == 1)
            {
                node = node.jjtGetChild(0);
            }
            cache.put(ref, node);
        }
        return node;
    }
}
PARSER_END( JsfParser )

/* == Operations == */
AbstractNode execute()          : {/*@bgen(jjtree) Complex */
  AstComplex jjtn000 = new AstComplex(JJTCOMPLEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Complex */
        try {
/*@egen*/
	(elExpr() | textExpr())* <EOF>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void elExpr() : {}
{
	<START_EXPRESSION> expr() <END_EXPRESSION>
}

void textExpr()       : {/*@bgen(jjtree) Text */
                          AstText jjtn000 = new AstText(JJTTEXT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Text */
        try {
/*@egen*/
	t=<NON_EXPRESSION_TEXT>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* == parent jump point == LOOKAHEAD(orExpr() <QUESTIONMARK>) */
void expr() : {}
{
	chooseExpr()
}

/* == choose expression == */
void chooseExpr() : {} 
{
	orExpr() (<QUESTIONMARK> orExpr() <COLON>/*@bgen(jjtree) #Choose( 3) */
                                                  {
                                                    AstChoose jjtn001 = new AstChoose(JJTCHOOSE);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                  }
                                                  try {
/*@egen*/ chooseExpr()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001,  3);
                                                    }
                                                  }
/*@egen*/)*
}

/* == or expression == */
void orExpr() : {}
{
	andExpr() ((<OR0>|<OR1>)/*@bgen(jjtree) #Or( 2) */
                                 {
                                   AstOr jjtn001 = new AstOr(JJTOR);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ andExpr()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
                                 }
/*@egen*/)*
}

/* == and expression == */
void andExpr() : {}
{
	equalityExpr() ((<AND0>|<AND1>)/*@bgen(jjtree) #And( 2) */
                                        {
                                          AstAnd jjtn001 = new AstAnd(JJTAND);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*/ equalityExpr()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte001) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte001;
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            throw (ParseException)jjte001;
                                          }
                                          throw (Error)jjte001;
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                          }
                                        }
/*@egen*/)*
}

/* == equality expression == */
void equalityExpr() : {}
{
	compareExpr()
	(
		((<EQ0>|<EQ1>)/*@bgen(jjtree) #Equal( 2) */
                               {
                                 AstEqual jjtn001 = new AstEqual(JJTEQUAL);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ compareExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/)
	|
		((<NE0>|<NE1>)/*@bgen(jjtree) #NotEqual( 2) */
                               {
                                 AstNotEqual jjtn002 = new AstNotEqual(JJTNOTEQUAL);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ compareExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte002;
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   throw (ParseException)jjte002;
                                 }
                                 throw (Error)jjte002;
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
                               }
/*@egen*/)
	)*
}

/* == compare expression == */
void compareExpr() : {}
{
	binaryExpr()
	(
		((<LT0>|<LT1>)/*@bgen(jjtree) #LessThan( 2) */
                               {
                                 AstLessThan jjtn001 = new AstLessThan(JJTLESSTHAN);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ binaryExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/)
	|
		((<GT0>|<GT1>)/*@bgen(jjtree) #GreaterThan( 2) */
                               {
                                 AstGreaterThan jjtn002 = new AstGreaterThan(JJTGREATERTHAN);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ binaryExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte002) {
                                 if (jjtc002) {
                                   jjtree.clearNodeScope(jjtn002);
                                   jjtc002 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte002 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte002;
                                 }
                                 if (jjte002 instanceof ParseException) {
                                   throw (ParseException)jjte002;
                                 }
                                 throw (Error)jjte002;
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                 }
                               }
/*@egen*/)
	|
		((<LE0>|<LE1>)/*@bgen(jjtree) #LessThanEqual( 2) */
                               {
                                 AstLessThanEqual jjtn003 = new AstLessThanEqual(JJTLESSTHANEQUAL);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*/ binaryExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte003) {
                                 if (jjtc003) {
                                   jjtree.clearNodeScope(jjtn003);
                                   jjtc003 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte003 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte003;
                                 }
                                 if (jjte003 instanceof ParseException) {
                                   throw (ParseException)jjte003;
                                 }
                                 throw (Error)jjte003;
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                 }
                               }
/*@egen*/)
	|
		((<GE0>|<GE1>)/*@bgen(jjtree) #GreaterThanEqual( 2) */
                               {
                                 AstGreaterThanEqual jjtn004 = new AstGreaterThanEqual(JJTGREATERTHANEQUAL);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                               }
                               try {
/*@egen*/ binaryExpr()/*@bgen(jjtree)*/
                               } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte004;
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   throw (ParseException)jjte004;
                                 }
                                 throw (Error)jjte004;
                               } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004,  2);
                                 }
                               }
/*@egen*/)
	)*
}

/* == binary expression == */
void binaryExpr() : {}
{
	multExpr()
	(
		(<PLUS>/*@bgen(jjtree) #Plus( 2) */
                        {
                          AstPlus jjtn001 = new AstPlus(JJTPLUS);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ multExpr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/)
	|
		(<MINUS>/*@bgen(jjtree) #Minus( 2) */
                         {
                           AstMinus jjtn002 = new AstMinus(JJTMINUS);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ multExpr()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/)
	)*
}

/* == multiplicative expression == */
void multExpr() : {}
{
	unaryExpr()
	(
		(<MULT>/*@bgen(jjtree) #Mult( 2) */
                        {
                          AstMult jjtn001 = new AstMult(JJTMULT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/)
	|
		(<DIV>/*@bgen(jjtree) #Div( 2) */
                       {
                         AstDiv jjtn002 = new AstDiv(JJTDIV);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
                       }
/*@egen*/)
	|
		((<MOD0>|<MOD1>)/*@bgen(jjtree) #Mod( 2) */
                                 {
                                   AstMod jjtn003 = new AstMod(JJTMOD);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte003) {
                                   if (jjtc003) {
                                     jjtree.clearNodeScope(jjtn003);
                                     jjtc003 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte003 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte003;
                                   }
                                   if (jjte003 instanceof ParseException) {
                                     throw (ParseException)jjte003;
                                   }
                                   throw (Error)jjte003;
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                   }
                                 }
/*@egen*/)
	)*
}

/* == unary expression == */
void unaryExpr() : {}
{
		<MINUS>/*@bgen(jjtree) Negative */
                        {
                          AstNegative jjtn001 = new AstNegative(JJTNEGATIVE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/ 
	|
		(<NOT0>|<NOT1>)/*@bgen(jjtree) Not */
                                {
                                  AstNot jjtn002 = new AstNot(JJTNOT);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                                } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte002;
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    throw (ParseException)jjte002;
                                  }
                                  throw (Error)jjte002;
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/ 
	|
		<EMPTY>/*@bgen(jjtree) Empty */
                        {
                          AstEmpty jjtn003 = new AstEmpty(JJTEMPTY);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*/ unaryExpr()/*@bgen(jjtree)*/
                        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            throw (RuntimeException)jjte003;
                          }
                          if (jjte003 instanceof ParseException) {
                            throw (ParseException)jjte003;
                          }
                          throw (Error)jjte003;
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/
	|	
		valueExpr()
}

/* == value expression == */
void valueExpr() : {}
{/*@bgen(jjtree) #Value(> 1) */
        {
          AstValue jjtn001 = new AstValue(JJTVALUE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(valuePrefixExpr() (valueSuffixExpr())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

/* == value prefix expression == */
void valuePrefixExpr() : {}
{
	<LPAREN> expr() <RPAREN>
	| trueExpr()
	| falseExpr()
	| nullExpr()
	| variableExpr()
	| stringExpr()
	| floatExpr()
	| numberExpr()
}

/* == value suffix expression == */
void valueSuffixExpr() : {}
{
	(propertyExpr() | propertyEvalExpr())
}

/* == variable expression == */
void variableExpr()           : {/*@bgen(jjtree) Variable */
                                  AstVariable jjtn000 = new AstVariable(JJTVARIABLE);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

/* == property expression == */
void propertyExpr()           : {/*@bgen(jjtree) Property */
                                  AstProperty jjtn000 = new AstProperty(JJTPROPERTY);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Property */
        try {
/*@egen*/
	<DOT> t=<IDENTIFIER>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void propertyEvalExpr()               : {/*@bgen(jjtree) PropertyEval */
  AstPropertyEval jjtn000 = new AstPropertyEval(JJTPROPERTYEVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyEval */
        try {
/*@egen*/
	<LBRACK> expr() <RBRACK>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* == string expression == */
void stringExpr()         : {/*@bgen(jjtree) String */
                              AstString jjtn000 = new AstString(JJTSTRING);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	t=<STRING_LITERAL>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* == number expression == */
void numberExpr()         : {/*@bgen(jjtree) Number */
                              AstNumber jjtn000 = new AstNumber(JJTNUMBER);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void floatExpr()        : {/*@bgen(jjtree) Float */
                            AstFloat jjtn000 = new AstFloat(JJTFLOAT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Float */
        try {
/*@egen*/
	t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* == constants == */
void trueExpr()       : {/*@bgen(jjtree) True */
  AstTrue jjtn000 = new AstTrue(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) True */
                             try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }
void falseExpr()        : {/*@bgen(jjtree) False */
  AstFalse jjtn000 = new AstFalse(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) False */
                               try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/ }
void nullExpr()       : {/*@bgen(jjtree) Null */
  AstNull jjtn000 = new AstNull(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Null */
                             try {
/*@egen*/ <NULL>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ }

/* ==================================================================================== */
<DEFAULT> TOKEN:
{
  < NON_EXPRESSION_TEXT:
    (~["#"])+ | ("#" (~["{", "#"])+) | "#"
  >
|
  < START_EXPRESSION: "#{" > : IN_EXPRESSION
}

<IN_EXPRESSION> SKIP : { " " | "\t" | "\n" | "\r" }

<IN_EXPRESSION> TOKEN :
{
	< INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])* >
|	< FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? 
		| "." (["0"-"9"])+ (<EXPONENT>)?
		| (["0"-"9"])+ <EXPONENT>
	>
|	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|	< STRING_LITERAL: ("\"" ((~["\"","\\"])
		| ("\\" ( ["\\","\""] )))* "\"")
		| ("\'" ((~["\'","\\"])
		| ("\\" ( ["\\","\'"] )))* "\'")
	>
|	< BADLY_ESCAPED_STRING_LITERAL: ("\"" (~["\"","\\"])* ("\\" ( ~["\\","\""] )))
		| ("\'" (~["\'","\\"])* ("\\" ( ~["\\","\'"] )))
	>
|	< TRUE : "true" >
|	< FALSE : "false" >
|	< NULL : "null" >
|	< END_EXPRESSION : "}" > : DEFAULT
|	< DOT : "." >
|	< LPAREN : "(" >
|	< RPAREN : ")" >
|	< LBRACK : "[" >
|	< RBRACK : "]" >
|	< COLON : ":" >
|	< COMMA : "," >
|	< GT0 : ">" >
|	< GT1 : "gt" >
|	< LT0 : "<" >
|	< LT1 : "lt" >
|	< GE0 : ">=" >
|	< GE1 : "ge" >
|	< LE0 : "<=" >
|	< LE1 : "le" >
|	< EQ0 : "==" >
|	< EQ1 : "eq" >
|	< NE0 : "!=" >
|	< NE1 : "ne" >
|	< NOT0 : "!" >
|	< NOT1 : "not" >
|	< AND0 : "&&" >
|	< AND1 : "and" >
|	< OR0 : "||" >
|	< OR1 : "or" >
|	< EMPTY : "empty" >
|	< INSTANCEOF : "instanceof" >
|	< MULT : "*" >
|	< PLUS : "+" >
|	< MINUS : "-" >
|	< QUESTIONMARK : "?" >
|	< DIV : "/" >
|	< MOD0 : "%" >
|	< MOD1 : "mod" >
|	< IDENTIFIER: (<LETTER>|<IMPL_OBJ_START>) (<LETTER>|<DIGIT>)* >
|	< #IMPL_OBJ_START: "#" >
|	< #LETTER:
		[
		"$",
		"A"-"Z",
		"_",
		"a"-"z",
		"\u00c0"-"\u00d6",
		"\u00d8"-"\u00f6",
		"\u00f8"-"\u00ff",
		"\u0100"-"\u1fff",
		"\u3040"-"\u318f",
		"\u3300"-"\u337f",
		"\u3400"-"\u3d2d",
		"\u4e00"-"\u9fff",
		"\uf900"-"\ufaff"
		]
	>
|	< #DIGIT:
		[
		"0"-"9",
		"\u0660"-"\u0669",
		"\u06f0"-"\u06f9",
		"\u0966"-"\u096f",
		"\u09e6"-"\u09ef",
		"\u0a66"-"\u0a6f",
		"\u0ae6"-"\u0aef",
		"\u0b66"-"\u0b6f",
		"\u0be7"-"\u0bef",
		"\u0c66"-"\u0c6f",
		"\u0ce6"-"\u0cef",
		"\u0d66"-"\u0d6f",
		"\u0e50"-"\u0e59",
		"\u0ed0"-"\u0ed9",
		"\u1040"-"\u1049"
		]
	>
|	< ILLEGAL_CHARACTER: (~[]) >
}
