<?xml version='1.0' encoding='UTF-8'?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">


    <!-- ************ Per user local properties ******************************* -->

    <property file="${user.home}/build.properties"/>    
    <property file="../build.properties"/>    
    <import file="${jsf.build.home}/common/ant/source-build-setup.xml"/>


    <!-- ******************* Structural ************************** -->

    <!-- The base directory for compilation targets -->
    <property name="build.dir" value="build"/>
    <property name="target.dir" value="target"/>
   <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.generate.dir" value="${build.dir}/generate"/>
    <property name="build.generate.tld.dir"
              value="${build.generate.dir}/conf/share"/>

    <!-- The base directory for binary dependency libs under local version
         control -->
    <property name="local.lib.dir"
              value="${basedir}/../lib"/>

    <!-- The base directory for distribution targets -->
    <property name="dist.dir" value="${basedir}/dist"/>

    <!-- The base directory for component sources -->
    <property name="source.dir" value="${basedir}/src"/>

    <!-- The base directory for component tests -->
    <property name="test.dir" value="${basedir}/test"/>

    <!-- Misc -->
    <property name="conf.share.dir" value="${basedir}/conf/share"/>
    <property name="name" value="jsf-impl"/>

    <property name="dependency.base.dir" value="${jsf.build.home}/dependencies"/>
    <property name="dependency.jar.dir" value="${dependency.base.dir}/jars"/>
    <property name="yuicompressor.jar" value="${dependency.jar.dir}/yuicompressor.jar"/>

    <path id="impl.compile.classpath">
        <pathelement location="${jsf-api-intermediate.jar}"/>
        <path refid="apache.commons.classpath"/>
        <path refid="compile.classpath"/>
        <pathelement location="${tools.dir}/build/classes"/>
    </path>


    <!-- ************ Executable Targets ************************************** -->


    <target name="init"
            description="Initialize and evaluate conditionals">
        <echo message="-------- ${impl.name} ${impl.version} --------"/>
    </target>

    <target name="prepare" depends="init"
            description="Prepare build directory">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
        <mkdir dir="${build.generate.tld.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.classes.dir}/com/sun/faces/xhtml"/>
        <mkdir dir="${build.dir}/javadocs"/>
        <mkdir dir="${build.dir}/vdldocs/jsp"/>
        <mkdir dir="${build.dir}/vdldocs/facelets"/>
        <mkdir dir="${build.dir}/lib"/>
        <antcall target="delete.and.remkdir.build.generate.dir" />
    </target>

    <target name="delete.and.remkdir.build.generate.dir"
            unless="skip.delete.generate">
        <delete dir="${build.generate.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
    </target>

    <target name="copy.template.sources" depends="prepare"
            description="Copy template sources from ${tools.dir}/template-source">

        <mkdir dir="${build.generate.dir}/com/sun/faces/util"/>
        <filter token="protection" value="public"/>

        <filter token="package" value="com.sun.faces.util"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/com/sun/faces/util"
              filtering="true"/>
        <copy file="${tools.dir}/template-src/TypedCollections.java"
              todir="${build.generate.dir}/com/sun/faces/util"
              filtering="true"/>
        <filter token="package" value="com.sun.faces.application.view"/>
        <copy file="${tools.dir}/template-src/StateHolderSaver.java"
              todir="${build.generate.dir}/com/sun/faces/application/view"
              filtering="true"/>

        <filter token="protection" value="public"/>

        <filter token="package" value="com.sun.faces.application"/>
        <copy todir="${build.generate.dir}/com/sun/faces/application"
              filtering="true">
            <fileset dir="${api.dir}/template-src">
                <include name="*Adapter.java"/>
            </fileset>
        </copy>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/MethodBindingMethodExpressionAdapter.java"
              token="@serialVersionUID@"
              value="6351778415298720238L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/MethodExpressionMethodBindingAdapter.java"
              token="@serialVersionUID@"
              value="5639227653537610567L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/ValueExpressionValueBindingAdapter.java"
              token="@serialVersionUID@"
              value="2990621816592041196L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/ValueBindingValueExpressionAdapter.java"
              token="@serialVersionUID@"
              value="7410146713650507654L"/>
        <replace
              file="${build.generate.dir}/com/sun/faces/application/view/StateHolderSaver.java"
              token="@serialVersionUID@"
              value="4866548262845392093L"/>
    </target>

    <target name="check.taglib.generation.necessity">
        <uptodate property="skip.taglib.generation"
                  targetfile="${build.generate.dir}/last-taglib-generation">
            <srcfiles dir="${api.dir}/doc">
                <include name="standard-html-renderkit.xml"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="generate"
            depends="check.taglib.generation.necessity"
            unless="skip.taglib.generation">
        <path id="ant.classpath">
            <pathelement location="${myenv.ANT_HOME}/lib/ant.jar"/>
        </path>

        <copy todir="${build.dir}">
            <fileset dir="${tools.dir}/conf">
                <include name="TAG-*"/>
            </fileset>
        </copy>

        <mkdir dir="${tools.dir}/build/classes"/>
        <jsf.javac srcdir="${tools.dir}/src/main/java"
               destdir="${tools.dir}/build/classes">
            <classpath>
                <path refid="impl.compile.classpath"/>
                <path refid="ant.classpath"/>
            </classpath>
        </jsf.javac>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${tools.dir}/src/main/java"
                     includes="**/*.properties"/>
        </copy>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${impl.dir}/src"
                     includes="**/LogStrings.properties"/>
        </copy>
        <copy todir="${tools.dir}/build/classes/com/sun/faces"
              flatten="true">
            <fileset dir="${api.dir}/doc"
                      includes="*.dtd,*.xsd"/>
        </copy>
        <taskdef name="generateTaglib"
                 classname="com.sun.faces.ant.TaglibGenTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <taskdef name="generateAttrManager"
                 classname="com.sun.faces.ant.AttributeManagerGenTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <generateTaglib
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="impl.compile.classpath"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <jvmarg line="${debug.jvm.args}"/>
            <assertions>
                <enable/>
            </assertions>
        </generateTaglib>
        <generateAttrManager
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="impl.compile.classpath"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <jvmarg line="${debug.jvm.args}"/>
            <assertions>
                <enable/>
            </assertions>
        </generateAttrManager>
        <!--
        <copy todir="${build.generate.dir}">


            <fileset dir="${tools.dir}/src/main/java">
                <include name="com/sun/faces/config/DigesterFactory.java"/>
                <include name="com/sun/faces/config/beans/*.java"/>
                <include name="com/sun/faces/config/rules/*.java"/>
                <include name="com/sun/faces/util/*.java"/>
            </fileset>

        </copy>
        -->


        <touch file="${build.generate.dir}/last-taglib-generation"/>

        <antcall target="create.runtime.config"/>

    </target>

    <target name="compile" depends="prepare,generate,copy.template.sources"
            description="Just compile the classes">

        <!-- Run javac through everything -->
        <jsf.javac srcdir="${source.dir}:${build.generate.dir}"
                   destdir="${build.classes.dir}"
                   excludes="**/ManagedBeanFactoryImpl.java">
            <classpath>
                <path refid="impl.compile.classpath"/>
            </classpath>
        </jsf.javac>

        <copy todir="${build.classes.dir}">
            <fileset dir="${source.dir}" includes="**/*.properties,**/*.js,**/*.xsd"/>
            <!--<fileset dir="${tools.dir}/src/main/java" includes="**/*.properties"/>-->
        </copy>

        <!-- Massage the version number into LogStrings.properties -->
        <replace dir="${build.classes.dir}/com/sun/faces/"
                 token="|version.string|"
                 value="${impl.version.number} (${build.type} ${build.number})">
            <include name="LogStrings*.properties"/>
        </replace>

        <copy todir="${build.classes.dir}/com/sun/faces">
            <fileset dir="${api.dir}/doc">
                <include name="*.dtd"/>
                <include name="standard-html-renderkit.xml"/>
                <include name="*.xsd"/>
            </fileset>
        </copy>

        <concat destfile="${build.classes.dir}/META-INF/resources/javax.faces/jsf-uncompressed.js" fixlastline="yes">
            <filelist dir="${api.dir}/src/main/resources">
                <file name="jsf.js"/>
            </filelist>
            <filelist  dir="${basedir}/resources">
                <file name="mojarra.js"/>
            </filelist>
        </concat>

        <java jar="${yuicompressor.jar}" fork="true" failonerror="true"
            args="-o ${build.classes.dir}/META-INF/resources/javax.faces/jsf.js ${build.classes.dir}/META-INF/resources/javax.faces/jsf-uncompressed.js"/>
        <!--
            RELEASE_PENDING (rlubke,driscoll)
            For now these are copied to the root of the javax.faces.jar, but
            eventually they should be in com.sun.faces per the copy statement
            above.
        -->
        <copy todir="${build.classes.dir}/com/sun/faces/xhtml">
            <fileset dir="${conf.share.dir}/xhtml">
                <include name="*.dtd"/>
                <include name="*.ent"/>
            </fileset>
        </copy>

        <copy file="conf/share/javax.servlet.ServletContainerInitializer"
              toDir="${build.classes.dir}/META-INF/services" />
        <copy toDir="${build.classes.dir}/com/sun/faces/metadata/taglib">
            <fileset dir="${conf.share.dir}">
                <include name="*.taglib.xml" /> 
            </fileset>
        </copy>
        <copy file="${build.generate.tld.dir}/html_basic.tld"
              toDir="${build.classes.dir}/META-INF"/>
        <copy file="conf/xslt/jsf1_0-1_1toSchema.xsl"
              toDir="${build.classes.dir}/com/sun/faces"/>
        <copy file="conf/xslt/facelets1_0-2_0toSchema.xsl"
              toDir="${build.classes.dir}/com/sun/faces"/>
        <unzip src="${jsf.build.home}/lib/injectionproviders.jar"
               dest="${build.classes.dir}"/>
        <copy todir="${build.classes.dir}/META-INF">
            <fileset dir="${conf.share.dir}">
                <include name="jsf_core.tld"/>
                <include name="mojarra_ext.tld"/>
                <include name="mojarra_ext.taglib.xml"/>
                <include name="facelet-dev*.xml"/>
                <include name="error-include.xhtml"/>
            </fileset>
        </copy>

    </target>

    <target name="clean"
            description="Clean build and distribution directories">
        <ant antfile="build-tests.xml" target="remove.tstamp"/>
        <delete dir="${build.dir}"/>
        <delete dir="${target.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${impl.test.results.dir}"/>
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
            <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
        </delete>
        <delete file="jsf-${impl.version}.zip"/>
        <delete file="jsf-${impl.version}_src.zip"/>
        <ant dir="${basedir}/systest" inheritall="false" target="clean"/>
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="clean"/>
         <delete dir="${tools.dir}/build"/>
    </target>

    <target name="all" depends="clean,prepare,compile"
            description="Clean and compile all components"/>

    <!-- Create the source distribution -->
    <target name="ri.source">
        <zip destfile="${dist.dir}/jsf-ri-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
                        prefix="jsf-ri-src-${impl.version}"/>
            <zipfileset dir="${source.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/src"/>
            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/test"/>
            <zipfileset dir="${basedir}"
                        includes="conf/** web/**"
                        prefix="jsf-ri-src-${impl.version}"/>
        </zip>
    </target>


    <target name="dist" depends="jars" description="Build distribution files">

        <mkdir dir="${dist.dir}"/>

        <antcall target="vdldocs"/>

        <!-- Create the binary distribution -->
        <zip destfile="${dist.dir}/jsf-ri-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="lib/**,vdldocs/**"
                        prefix="jsf-ri-${impl.version}"/>
        </zip>

        <!-- Create a buildable source distribution -->
        <zip destfile="${dist.dir}/jsf-ri-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
                        prefix="jsf-ri-src-${impl.version}"/>
            <zipfileset dir="${source.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/src"/>

            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/test"/>
            <zipfileset dir="${basedir}/systest"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/systest"/>
        </zip>
        <antcall target="ri.source"/>

    </target>

    <target name="vdldocs">

      <antcall target="jsp.tlddocs" />
      <antcall target="facelets.tlddocs" />

    </target>

    <target name="jsp.tlddocs">
        <java fork="true" jar="${tlddoc.jar}">
            <arg line="-d ${build.dir}/vdldocs/jsp"/>
            <arg line="-windowtitle 'JSF ${spec.version} View Declaration Language: JSP Variant'"/>
            <arg value="${build.generate.tld.dir}/html_basic.tld"/>
            <arg value="${conf.share.dir}/jsf_core.tld"/>
        </java>
        <copy todir="${build.dir}/vdldocs/jsp">
           <fileset dir="${basedir}/../jsf-api/doc/">
             <include name="changed*.png" />
           </fileset>
        </copy>

    </target>

    <target name="facelets.tlddocs">
        <taskdef name="generateFaceletsTld"
                 classname="com.sun.faces.ant.FaceletsTLDGenTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>

        <generateFaceletsTld
              generatorConfig="${tools.dir}/conf/FaceletsHtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="impl.compile.classpath"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <jvmarg line="${debug.jvm.args}"/>
            <assertions>
                <enable/>
            </assertions>
        </generateFaceletsTld>
        <java fork="true" jar="${tlddoc.jar}">
            <arg line="-d ${build.dir}/vdldocs/facelets"/>
            <arg line="-windowtitle 'JSF ${spec.version} View Declaration Language: Facelets Variant'"/>
            <arg line="-xslt ${conf.share.dir}/tlddoc-resources"/>
            <arg value="${conf.share.dir}/facelets_jsf_core.tld"/>
            <arg value="${build.generate.tld.dir}/facelets_html_basic.tld"/>
            <arg value="${conf.share.dir}/composite.tld"/>
            <arg value="${conf.share.dir}/ui.tld"/>
            <arg value="${conf.share.dir}/jstl-core.tld"/>
            <arg value="${conf.share.dir}/jstl-fn.tld"/>
        </java>
        <copy todir="${build.dir}/vdldocs/facelets">
           <fileset dir="${basedir}/../jsf-api/doc/">
             <include name="changed*.png" />
           </fileset>
        </copy>

    </target>


    <target name="compile.test" depends="prepare,compile"
            description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>

    </target>

    <target name="test"
             depends="init.test,run.junit.test,run.cactus.test,run.systest,run.systest-per-webapp"
            description="Run all unit and system tests"/>

    <target name="init.test">
        <mkdir dir="${impl.test.results.dir}"/>
    </target>

    <target name="run.systest" description="Run system tests"
            depends="init.test">              
        <ant dir="${basedir}/systest" inheritall="false" target="test"/>        
    </target>

    <target name="run.systest-per-webapp"
            description="Run per-webapp system tests"
            depends="init.test,compile.test">
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="test"/>
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="remove"/>
    </target>


    <target name="run.junit.test" depends="init.test,compile.test"
            description="Run unit tests not requiring cactus">
        <ant antfile="build-tests.xml" target="run.test"/>
    </target>

    <target name="run.cactus.test" depends="init.test,compile.test"
            description="Run unit tests requiring cactus">
        <ant antfile="build-tests.xml" target="execute.cactus.tests"/>
    </target>

    <target name="force.run.cactus.test" depends="init.test,compile.test"
            description="Run unit tests requiring cactus, forcing reinstall">
        <ant antfile="build-tests.xml" target="force.execute.cactus.tests"/>
    </target>   

    <target name="prepare.test.webapp" depends="init.test">
        <echo>Invoking target prepare.test.webapp</echo>
        <ant antfile="build-tests.xml" target="prepare.test.webapp"/>
        <echo>Invoking target build.war in systest</echo>
        <ant dir="${basedir}/systest" inheritall="false" target="build.war"/>
    </target>

    <!-- 
         =================================================================== 
           Create the jars
         =================================================================== 
    -->

    <target name="jars" depends="compile">

        <copy file="${basedir}/mojarra-jsf-impl.bnd" tofile="tmp.bnd"/>
        <replace file="tmp.bnd"
                 token="@spec.version@"
                 value="${spec.version}"/>
        <replace file="tmp.bnd"
                 token="@impl.name@"
                 value="${impl.name}"/>
        <replace file="tmp.bnd"
                 token="@impl.version@"
                 value="${impl.version}"/>
        <if>
            <equals arg1="${build.type}" arg2=""/>
            <then>
                <replace file="tmp.bnd"
                         token="@osgi.version@"
                         value="${impl.version.number}"/>
            </then>
            <else>
                <replace file="tmp.bnd"
                         token="@osgi.version@"
                         value="${impl.version.number}-${build.type}"/>
            </else>
        </if>
        <replace file="tmp.bnd"
                 token="@extension.name@"
                 value="com.sun.faces"/>
        <jsf.osgi.jar jarfile="${build.dir}/lib/${name}.jar"
                      bndfile="tmp.bnd"
                      basedir="${build.classes.dir}"
                      extension-name="com.sun.faces"/>
        <delete file="tmp.bnd"/>
    </target>

    <target name="main" depends="jars"/>

    <target name="create.runtime.config">
<!--    in="${build.dir}/classes/com/sun/faces/standard-html-renderkit.xml"-->
        <xslt in="${api.dir}/doc/standard-html-renderkit.xml" 
              out="merged.xml"
              style="conf/xslt/merge-config.xsl">
        </xslt>
        <replace file="${basedir}/merged.xml">
            <replacetoken><![CDATA[xmlns:jsf="http://java.sun.com/xml/ns/javaee"]]></replacetoken>
            <replacevalue><![CDATA[]]></replacevalue>
        </replace>
        <replace file="${basedir}/merged.xml">
            <replacetoken><![CDATA[ >]]></replacetoken>
            <replacevalue><![CDATA[>]]></replacevalue>
        </replace>
        <xslt in="${basedir}/merged.xml"
              out="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml"
              style="conf/xslt/prune-tool-data.xsl">
        </xslt>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]></replacetoken>
        </replace>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[ >]]></replacetoken>
            <replacevalue><![CDATA[>]]></replacevalue>
        </replace>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[<faces-config>]]></replacetoken>
            <replacevalue><![CDATA[
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
    version="2.0">]]>
            </replacevalue>
        </replace>
        <delete file="${basedir}/merged.xml"/>
    </target>


    <target name="passthru">
        <ant antfile="build-tests.xml" target="passthru"/>
    </target>

    <target name="prepare.cactus.webapp">
        <ant antfile="build-tests.xml" target="prepare.test.webapp"/>
    </target>

     <!--
       USE THE FOLLOWING TARGETS TO PUSH VARIOUS BUILD TYPES TO YOUR LOCAL
       M2 REPOSITORY
    -->

    <target name="mvn.deploy.snapshot.local" description="Deploy a SNAPSHOT build to the local maven repo">
        <mvn.deploy.snapshot.local type="impl"/>
    </target>


    <target name="mvn.deploy.promoted.local">
        <mvn.deploy.promoted.local type="impl"/>
    </target>


    <target name="mvn.deploy.release.local">
        <mvn.deploy.release.local type="impl"/>
    </target>


    <!--
       USE THE FOLLOWING TARGETS TO PUSH VARIOUS BUILD TYPES TO THE
       JAVA.NET M2 REPOSITORY
    -->
     <target name="mvn.deploy.snapshot">
        <mvn.deploy.snapshot type="impl"/>
    </target>


    <target name="mvn.deploy.promoted">
        <mvn.deploy.promoted type="impl"/>
    </target>


    <target name="mvn.deploy.release">
        <mvn.deploy.release type="impl"/>
    </target>

    
</project>
