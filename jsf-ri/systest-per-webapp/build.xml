<?xml version='1.0' encoding='UTF-8'?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI-Systest-per-webapp" default="test" basedir=".">

    <property name="Name" value="JavaServer Faces RI per-webapp System Test"/>
    <property name="name" value="jsf-ri-systest-per-webapp"/>

    <!-- ************ Per user local properties ******************************* -->

    <property file="${user.home}/build.properties"/>
    <!-- User local        -->
    <property file="../../build.properties"/>
    <!-- Project local     -->
    <import file="${jsf.build.home}/common/ant/common.xml"/>   

    <!-- Construct compile classpath -->
    <path id="test.compile.classpath">
        <pathelement location="${jsf-api.jar}"/>
        <pathelement location="${jsf-impl.jar}"/>
        <pathelement location="${javax-enterprise.jar}"/>
        <pathelement location="${javax-inject.jar}"/>
        <pathelement location="${jsf.test.jar}"/>
        <pathelement location="${jsf.test.jar}"/>
        <path refid="compile.classpath"/>
        <pathelement location="${basedir}/build/classes"/>       
        <pathelement location="${basedir}/../build/test/classes"/>       
        <path refid="htmlunit.compile.classpath"/>
    </path>

    <property name="deploy-exploded-applications"
              value="" />

    <property name="applications-for-V3-only"
              value="disable-bean-validator,
                     no-web-xml" />

    <property name="applications-for-V3.1-only"
              value="disable-bean-validator,
                     injection,
                     no-web-xml,
                     cluster-no-agressive-session-dirtying" />

    <property name="applications-for-V3.1_no_cluster-only"
              value="disable-bean-validator,
                     injection,
                     no-web-xml" />

    <property name="container-agnostic-applications"
              value="
                   find-resources-in-jar,
                   annotation-restrictions,
                   clientside-statesaving,
                   absolute-ordering,
                   document-ordering,
                   empty-string-as-null,
                   resource-locale-prefix,
                   nested-loadbundles,
                   replace-application,
                   replace-statemanager,
                   invalid-mapping,
                   nested-datatables,
                   jar-ordering,
                   replace-lifecycle,
                   string-converter,
                   replace-variableresolver,
                   replace-variableresolver-programmatically,
                   add-elresolver-and-replace-variableresolver-programmatically,
                   replace-variableresolver-and-add-elresolver-programmatically,
                   converter-property-editor,
                   disable-unicode-escaping,
                   late-bindings,
                   property-resolver-jsp,
                   never-unwrap-exceptions,
                   write-attribute-script-disabled,
                   write-attribute-script-enabled,
                   wcag-datatable,
                   flash,
                   jsp-flash,
                   suppress-xml-decl,
                   replace-vdl,
                   process-as-jspx,
                   request-char-encoding-no-session,
                   bogus-render-kit-id,
                   characterCombat"/>
    <!--

       EXCLUDED APPLICATIONS:
          view-expired
          core-tags
          el-performance
          command-link-redirect,
                   flash,
                   jsp-flash
    -->

   <property name="applications-for-V3.1_no_cluster-virtual-server"
             value="
                   find-resources-in-jar,
                   annotation-restrictions,
                   clientside-statesaving,
                   empty-string-as-null,
                   resource-locale-prefix,
                   nested-loadbundles,
                   replace-application,
                   replace-statemanager,
                   invalid-mapping,
                   nested-datatables,
                   jar-ordering,
                   replace-lifecycle,
                   string-converter,
                   replace-variableresolver,
                   converter-property-editor,
                   late-bindings,
                   property-resolver-jsp,
                   never-unwrap-exceptions,
                   write-attribute-script-disabled,
                   write-attribute-script-enabled,
                   wcag-datatable,
                   suppress-xml-decl,
                   replace-vdl,
                   process-as-jspx,
                   bogus-render-kit-id,
                   characterCombat"/>

    <property name="applications-with-custom-dependencies"
              value="formOmittedTrinidad"/>

    <!-- ************ Executable Targets ************************************** -->


    <target name="init"
            description="Initialize and evaluate conditionals">
        <echo message="-------- ${Name} ${impl.version} --------"/>
    </target>


    <target name="prepare" depends="init"
            description="Prepare build directory">       

    </target>    

    <macrodef name="build.app">
        <attribute name="base-app-dir"/>
        <attribute name="appname"/>
        <sequential>
          <mkdir dir="@{base-app-dir}/build/classes"/>
          <jsf.javac srcdir="@{base-app-dir}/src/java"
                     destdir="@{base-app-dir}/build/classes">
              <classpath>
                  <path refid="test.compile.classpath"/>
              </classpath>
          </jsf.javac>
            <jsf.war archive-name="jsf-@{appname}"
                     basedir="@{base-app-dir}/build"
                     webxml="@{base-app-dir}/web/WEB-INF/web.xml">
                <archive-elements>
                    <zipfileset dir="@{base-app-dir}/web"
                                includes="**/*"/>
                    <zipfileset dir="@{base-app-dir}/build/classes"
                                prefix="WEB-INF/classes"
                                excludes="**/*TestCase.class"/>
                    <zipfileset dir="@{base-app-dir}/src/java"
                                includes="**/*.properties,**/*.xml"
                                prefix="WEB-INF/classes"/>
                    <zipfileset dir="${basedir}/build/classes"
                                prefix="WEB-INF/classes"
                                includes="com/sun/faces/systest/model/*.class"
                                excludes="**/*TestCase*"/>
                </archive-elements>
            </jsf.war>
          <mkdir dir="@{base-app-dir}/build/jsf-@{appname}" />
          <unwar src="@{base-app-dir}/build/jsf-@{appname}.war"
                 dest="@{base-app-dir}/build/jsf-@{appname}" />
        </sequential>
    </macrodef>

    <macrodef name="deploy.app">
        <attribute name="base-app-dir"/>
        <attribute name="appname"/>
        <attribute name="use-virtual-servers" default="false"/>
        <sequential>
          <if>
            <contains string="${deploy-exploded-applications}" substring="@{appname}" />
            <then>
              <deploydir.artifact
                    explodedWarDir="@{base-app-dir}/build/jsf-@{appname}"
                    appName="jsf-@{appname}"/>
            </then>
            <else>
              <deploy.artifact
                    artifact="@{base-app-dir}/build/jsf-@{appname}.war"
                    appName="jsf-@{appname}" 
                    use-virtual-servers="@{use-virtual-servers}"/>
            </else>
          </if>
        </sequential>
    </macrodef>

    <macrodef name="undeploy.app">
        <attribute name="appname"/>
        <sequential>
            <undeploy.artifact artifact="jsf-@{appname}.war"
                               appName="jsf-@{appname}"/>
        </sequential>
    </macrodef>

    <target name="compile.base.sources">
        <mkdir dir="${basedir}/build/classes"/>
        <jsf.javac srcdir="${impl.dir}/systest/src"
                   destdir="${basedir}/build/classes">
            <classpath>
                <path refid="test.compile.classpath"/>
            </classpath>
        </jsf.javac>
    </target>

    <target name="define.applications" depends="discover.container.version,define.V2.applications,define.V3.applications,define.V3.1.applications,define.V3.1_no_cluster.applications" />

    <target name="define.applications.virtual-server" depends="discover.container.version,define.V3.1_no_cluster.applications.virtual.server">
      <property name="applications" value="" />
      <property name="instance.numbers" value="1,2" />
    </target>

    <target name="query.is.V3.1_no_cluster">
        <condition property="container.is.V3.1_no_cluster">
          <equals arg1="glassfishV3.1_no_cluster" arg2="${container.name}" />
        </condition>
    </target>

    <target name="define.V2.applications" if="container.is.V2">
       <property name="applications" value="${container-agnostic-applications}" />
    </target>

    <target name="define.V3.applications" if="container.is.V3">
       <property name="applications" 
                 value="${container-agnostic-applications},${applications-for-V3-only}" />
    </target>

    <target name="define.V3.1.applications" if="container.is.V3.1">
       <property name="applications" 
                 value="${container-agnostic-applications},${applications-for-V3.1-only}, ${applications-with-custom-dependencies}" />
    </target>

    <target name="define.V3.1_no_cluster.applications.virtual.server" 
            if="container.is.V3.1_no_cluster">
       <property name="applications"
                 value="${applications-for-V3.1_no_cluster-virtual-server}, ${applications-with-custom-dependencies}" />
    </target>



    <target name="define.V3.1_no_cluster.applications" if="container.is.V3.1_no_cluster">
       <property name="applications" 
                 value="${container-agnostic-applications},${applications-for-V3.1_no_cluster-only},${applications-with-custom-dependencies}" />
    </target>

    <target name="install" depends="compile.base.sources,define.applications">
        
        <for list="${applications}" param="app" trim="true">
            <sequential>
                <undeploy.app appname="@{app}"/>
                <if>
                    <contains string="@{app}" substring="Trinidad"/>
                    <then>
                        <antcall target="populate-dependency-properties-@{app}"/>
                    </then>
                </if>

                <build.app appname="@{app}"
                            base-app-dir="${basedir}/@{app}"/>
                <deploy.app appname="@{app}"
                            base-app-dir="${basedir}/@{app}"/>
            </sequential>
        </for>

    </target>

    <target name="populate-dependency-properties-formOmittedTrinidad">
        <copy file="${trinidad-api.jar}" todir="formOmittedTrinidad/web/WEB-INF/lib"/>
        <copy file="${trinidad-impl.jar}" todir="formOmittedTrinidad/web/WEB-INF/lib"/>       
    </target>

<target name="install-virtual-server" depends="compile.base.sources,define.applications.virtual-server">
    <if>
        <or>
            <equals arg1="${create-virtual-servers}" arg2="true"
                   casesensitive="false" trim="true" />
            <contains string="${create-virtual-servers}" substring="create-virtual-servers"
                   />
        </or>
        <then>
          <delete.virtual.servers/>
          <create.virtual.servers/>
        </then>
      </if>
         
        <for list="${applications}" param="app" trim="true">
            <sequential>
                <undeploy.app appname="@{app}"/>
                <if>
                    <contains string="@{app}" substring="Trinidad"/>
                    <then>
                        <antcall target="populate-dependency-properties-@{app}"/>
                    </then>
                </if>
                <build.app appname="@{app}"
                           base-app-dir="${basedir}/@{app}"/>               
                <deploy.app appname="@{app}" use-virtual-servers="true"
                            base-app-dir="${basedir}/@{app}"/>
            </sequential>
        </for>
        
    </target>

    <target name="build" depends="define.applications,compile.base.sources">
        
        <for list="${applications}" param="app" trim="true">
            <sequential>
                <if>
                    <contains string="@{app}" substring="Trinidad"/>
                    <then>
                        <antcall target="populate-dependency-properties-@{app}"/>
                    </then>
                </if>
                <build.app appname="@{app}"
                            base-app-dir="${basedir}/@{app}"/>               
            </sequential>
        </for>

    </target>

    <target name="remove" depends="define.applications">
        
        <for list="${applications}" param="app" trim="true">
            <sequential>
              <undeploy.app appname="@{app}"/>              
            </sequential>
        </for>
        
    </target>

    <target name="remove-virtual-server" depends="define.applications.virtual-server">

        <for list="${applications}" param="app" trim="true">
            <sequential>
              <undeploy.app appname="@{app}"/>              
            </sequential>
        </for>

      <if>
        <or>
           <equals arg1="${create-virtual-servers}" arg2="true"
                   casesensitive="false" trim="true" />
           <contains string="${create-virtual-servers}" substring="create-virtual-servers"
                   />
        </or>
        <then>
          <delete.virtual.servers/>
        </then>
      </if>
        
    </target>

    <target name="clean" depends="define.applications"
            description="Clean build and distribution directories">
        
        <delete dir="${basedir}/build"/>
        <for list="${applications}" param="app" trim="true">
            <sequential>
               <delete dir="${basedir}/@{app}/build"/>
               <delete dir="${basedir}/@{app}/target"/>
            </sequential>
        </for>
               
    </target>    


    <!-- ********** Test Execution Targets ************************************ -->

    <target name="test.no.install" depends="define.applications"
            description="Execute all tests against installed /jsf-* applications">

        <ant antfile="build-tests.xml" target="test">
          <property name="applications" value="${applications}" />
        </ant>

    </target>    


    <target name="test" depends="install"
            description="Execute all tests against installed /jsf-* applications">

        <ant antfile="build-tests.xml" target="test">
          <property name="applications" value="${applications}" />
        </ant>

    </target>

    <target name="test-virtual-server" depends="define.applications.virtual-server"
            description="Execute all tests against installed /jsf-* applications">

        <ant antfile="build-tests.xml" target="test-virtual-server">        
          <property name="glassfishV3.1-virtual-server" value="true" />
        </ant>
    </target>

        
</project>
