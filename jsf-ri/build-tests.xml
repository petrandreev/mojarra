<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<project name="Java Server Faces Unit Tests" basedir=".">

    <!--
            This is a generic build.xml file for Ant that is used to run the
            Java Server Faces unit tests. This build file *must* be called from the
            build.xml file in order to inherit most of it's needed properties
            (See below for the list of these properties).
    -->

    <!-- ========== Prerequisite Properties =================================== -->

    <!-- ========== Initialization Properties ================================= -->

    <!-- ========== Derived Properties ======================================== -->

    <!--
            These property values are derived from values defined above, and
            generally should NOT be overridden by command line settings
    -->

    <property file="${user.home}/build.properties"/>
    <property file="../build.properties"/>
    <import file="${jsf.build.home}/common/ant/common.xml"/>    

    <!-- Default value for debugging arguments is no.  Override in
         build.properties -->
    <property name="debug.jvm.args" value=""/>

    <!-- Source directory for tests -->
    <property name="src.test.dir" value="${basedir}/test"/>

    <!-- Configuration directory for tests -->
    <property name="conf.test.dir" value="conf/test"/>

    <!-- Output directory for tests -->
    <property name="out.test.dir" value="${basedir}/build/test"/>

    <!-- Compilation Classpath -->
    <path id="test.compile.classpath">
        <pathelement location="${conf.test.dir}"/>
        <pathelement location="${jsf-api.jar}"/>      
        <pathelement location="${jsf-impl.jar}"/>
        <pathelement location="${jsf.test.jar}"/>
        <path refid="compile.classpath"/>
        <path refid="cactus.compile.classpath"/>        
        <path refid="sun.commons.classpath"/>
    </path>

    <path id="test.runtime.classpath">
        <pathelement location="${out.test.dir}/classes"/>
        <pathelement location="${conf.test.dir}"/> 
        <pathelement location="${jsf-api.jar}"/>      
        <pathelement location="${jsf-impl.jar}"/>
        <pathelement location="${jsf.test.jar}"/>
        <!-- Temporary until javax.security is available on maven -->
        <pathelement location="${dependency.base.dir}/glassfish/lib/javaee.jar"/>
        <path refid="compile.classpath"/>
        <path refid="cactus.runtime.classpath"/>        
    </path>

    <!-- ========== Executable Targets ======================================== -->

    <!--
            Initialization of custom Ant tasks
    -->
    <target name="init">
        <taskdef name="runservertests"
                 classname="org.apache.cactus.integration.ant.RunServerTestsTask">
            <classpath>
                <path refid="test.runtime.classpath"/>
            </classpath>
        </taskdef>

        <uptodate property="skip.build"
                  targetfile="${out.test.dir}/last-testrun">
            <srcfiles dir="${basedir}">
                <include name="src/**/*.*"/>
                <include name="test/**/*.*"/>
                <include name="conf/**/*.*"/>
                <include name="web/test/**/*.*"/>       
            </srcfiles>
        </uptodate>
    </target>


    <!-- 
            Create directories and copy files for the struts tests
    -->
    <target name="prepare.test" depends="init">

       
        <mkdir dir="${out.test.dir}/classes"/>
        <!-- Create a lib directory where needed libs for the test war will
             be put -->
        <!--<mkdir dir="${out.test.dir}/WEB-INF/lib"/>

        <copy file="${build.classes}/com/sun/faces/util/MessageFactory.class"
              tofile="${out.test.dir}/WEB-INF/classes/com/sun/faces/util/MessageFactory.class"/>
        <copy file="${build.classes}/com/sun/faces/util/MessageFactory$BindingFacesMessage.class"
              tofile="${out.test.dir}/WEB-INF/classes/com/sun/faces/util/MessageFactory$BindingFacesMessage.class"/>-->

    </target>

    <!-- 
            Compile unit tests
    -->
    <target name="compile.test" depends="prepare.test">
        <mkdir dir="${out.test.dir}/classes/com/sun/faces/application"/>
        <filter token="package" value="com.sun.faces.application"/>
        <filter token="protection" value="public"/>
        <copy todir="${out.test.dir}/classes/com/sun/faces/application"
              filtering="true">
            <fileset dir="${api.dir}/template-src">
                <include name="*Adapter.java"/>
            </fileset>
        </copy>
        <replace
              file="${out.test.dir}/classes/com/sun/faces/application/MethodBindingMethodExpressionAdapter.java"
              token="@serialVersionUID@"
              value="6351778415298720238L"/>

        <replace
              file="${out.test.dir}/classes/com/sun/faces/application/MethodExpressionMethodBindingAdapter.java"
              token="@serialVersionUID@"
              value="5639227653537610567L"/>

        <replace
              file="${out.test.dir}/classes/com/sun/faces/application/ValueExpressionValueBindingAdapter.java"
              token="@serialVersionUID@"
              value="2990621816592041196L"/>

        <replace
              file="${out.test.dir}/classes/com/sun/faces/application/ValueBindingValueExpressionAdapter.java"
              token="@serialVersionUID@"
              value="7410146713650507654L"/>
        <jsf.javac srcdir="${src.test.dir}"
                   destdir="${out.test.dir}/classes"
                   excludes="**/ConfigFileTestCase.java">
            <classpath>
                <path refid="test.compile.classpath"/>
            </classpath>
        </jsf.javac>
        <jsf.javac srcdir="${out.test.dir}/classes"
                   destdir="${out.test.dir}/classes"
                   excludes="**/ConfigFileTestCase.java">
            <classpath>
                <path refid="test.compile.classpath"/>
            </classpath>    
        </jsf.javac>
    </target>    

    <target name="prepare.test.webapp" unless="skip.build"
            description="put the test webapp in the WAR file format in out.test.dir"
            depends="compile.test">
        <filter token="test.root.dir" value="${out.test.dir}"/>
        <copy file="${conf.test.dir}/web.xml" todir="${out.test.dir}"
              filtering="on"/>
        <jsf.war basedir="${basedir}/build"
                 archive-name="test"
                 webxml="${out.test.dir}/web.xml">
            <archive-elements>
                <zipfileset dir="${src.test.dir}"
                            includes="**/*.properties,**/*.xml"
                            prefix="WEB-INF/classes"/>
                <zipfileset dir="${out.test.dir}/classes"
                            prefix="WEB-INF/classes"/>                
                <zipfileset dir="${cactus.home}/lib"
                            prefix="WEB-INF/lib"
                            includes="cactus*.jar,
                                      aspect*.jar,
                                      commons-logging*.jar"
                            excludes="*ant*.jar,cactus-1.7.1.jar"/>
                <zipfileset dir="${jsf.build.home}/lib"
                            prefix="WEB-INF/lib"
                            includes="cactus*.jar"/>
                <zipfileset file="${junit.jar}"
                            prefix="WEB-INF/lib"/>
                <zipfileset file="${jsf.test.jar}"
                            prefix="WEB-INF/lib"/>
                <zipfileset dir="${basedir}/web/test"
                            includes="*.jsp,*.xml,*.gif,*html"
                            excludes="**/CVS/**"/>
                <zipfileset dir="${cactus.home}/web"
                            includes="jspRedirector.jsp"/>
                <zipfileset dir="${basedir}/web/test/WEB-INF"
                            prefix="WEB-INF"/>
                <zipfileset dir="${basedir}/web/test/resources"
                            prefix="/resources"/>
            </archive-elements>
        </jsf.war>        
        <copy todir="${out.test.dir}">
            <fileset dir="${basedir}/web/test"
                     excludes="*.jsp,*.xml,*.gif,*html,**/WEB-INF/**"/>
        </copy>
    </target>

    <target name="execute.cactus.tests" depends="prepare.test.webapp">
        <antcall target="undeploy"/>
        <antcall target="deploy"/>
        <touch file="${out.test.dir}/last-testrun"/>
        <antcall target="run.cactus.test"/>  
        <antcall target="undeploy"/>
    </target>

    <target name="force.execute.cactus.tests">
        <antcall target="remove.tstamp"/>
        <antcall target="execute.cactus.tests"/>
    </target>

    <target name="remove.tstamp">
        <delete file="${out.test.dir}/last-testrun"/>
    </target>

    <target name="deploy"
            description="Deploy the Cactus test application">
        <deploy.artifact artifact="${basedir}/build/test.war"
                         appName="test"/>
    </target>

    <target name="undeploy"
            description="Undeploy the jsf-systest application">
        <undeploy.artifact artifact="${basedir}/build/test.war"
                           appName="test"/>
    </target>

    <!--
            Start the Cactus test using JUnit test runner.
    -->
    <target name="run.cactus.test">
        <jsf.junit classpath-refid="test.runtime.classpath"
                   test-results-dir="${impl.test.results.dir}">
            <custom-sysproperties>
                <sysproperty key="cactus.contextURL"
                             value="http://${container.host}:${container.port}/test"/>
            </custom-sysproperties>
            <suite>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.annotation.TestAnnotatedComponents"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.el.TestResourceELResolver"/>                
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.resource.TestResourceManager"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.resource.TestResourceHandlerImpl"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.resource.TestResourceImpl"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.TestAdapters"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.io.TestIO"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestInjection"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestActionListenerImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestApplicationFactoryImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestApplicationImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestApplicationEvents"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestApplicationImpl_Config"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.TestFacesMessage"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.TestHASDeprStateManagerImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestNavigationHandler"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.application.TestStateManagerImpl"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.application.TestViewHandlerImpl"/>
                <!--
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.config.ConfigFileTestCase"/>
                -->
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.config.TestConfigListener"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.config.TestManagedBeanFactory"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.config.TestFacesConfigOrdering"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.context.TestExceptionHandler"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.context.TestExternalContextImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.context.TestFacesContextFactoryImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.context.TestFacesContextImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.convert.TestConverters"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.impl.TestELImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.impl.TestUnifiedELImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestPropertyResolverImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestFacesResourceBundleELResolver"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestValueBindingImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestValueExpressionImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestValueBindingImpl_Model"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestValueExpressionImpl_Model"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestVariableResolverImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestMethodRef"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.el.TestMethodExpressionImpl"/>   
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestApplyRequestValuesPhase"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestInvokeApplicationPhase"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestLifecycleFactoryImpl"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestLifecycleImpl"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.lifecycle.TestLifecycleImpl_initial"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestPhase"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestProcessEvents"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestProcessValidationsPhase"/>
                <!-- Commented out.  This functionality is fully implemented
                      in systest, without being so fragile.
                      RELEASE_PENDING see bug #867
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestRenderResponsePhase"/>  -->
                <!-- Commented out.  This test relies heavily on a bug in
                     FacesContext.setViewRoot() that allowed one to pass a null
                     value in.  This test case needs to be revisited.
                <test todir="${impl.test.results.dir}" 
                      name="com.sun.faces.lifecycle.TestRestoreViewPhase"/> -->
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.lifecycle.TestUpdateModelValuesPhase"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestComponentType"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestHtmlResponseWriter"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestRendererConversions"/>
                <!--  Commented out.  This funcationality is fully implemented
                      in systest, without being so fragile.
                      RELEASE_PENDING see bug #867
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestRenderers_1"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestRenderers_2"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestRenderers_3"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.TestRenderers_4"/>  -->
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.renderkit.html_basic.MenuRendererTestCase"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.TestContentTypes"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.TestRenderKit"/>
                <test todir="${impl.test.results.dir}"
                    name="com.sun.faces.renderkit.TestRenderKitFactory"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.taglib.TlvTestCase"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.taglib.jsf_core.TestLoadBundleTag"/>                
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.taglib.jsf_core.TestValidatorTags"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.taglib.jsf_core.TestViewTag"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.util.TestUtil"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.util.TestUtil_messages"/>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.taglib.jsf_core.TestCoreTagsVBEnabled"/>
            	<!-- To run the following tests, uncomment
                 following tests and set javax.faces.STATE_SAVING_METHOD 
                 property in conf/test/web.xml to client. Tests that 
                 excercise save state in server code have to be commented as 
                 well 
                <test todir="${impl.test.results.dir}"  
                      name="com.sun.faces.lifecycle.TestSaveStateInPage"/>
                <test todir="${impl.test.results.dir}"  
                      name="com.sun.faces.lifecycle.TestRestoreViewFromPage"/> -->
            </suite>

        </jsf.junit>       
    </target>


    <target name="run.test" depends="compile.test">
        <jsf.junit classpath-refid="test.runtime.classpath"
                   test-results-dir="${impl.test.results.dir}">
            <suite>
                <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.util.TestUtil_local"/>  
                 <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.util.TestLRUMap_local"/>
                 <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.util.TestHtmlUtils"/>
                 <test todir="${impl.test.results.dir}"
                      name="com.sun.faces.renderkit.html_basic.HtmlResponseWriterTest"/>


            </suite>    
        </jsf.junit>
        <antcall target="test.config"/>
    </target>
    
     <target name="config.compile"            
            description="Compile standalone JUnit tests">

        <mkdir dir="${basedir}/build/test"/>
        <jsf.javac srcdir="${basedir}/test"
                   destdir="${basedir}/build/test/classes"
                   includes="com/sun/faces/config/ConfigureListenerTestCase.java,
                             com/sun/faces/config/TestComponent.java,
                             com/sun/faces/config/TestConverter.java,
                             com/sun/faces/config/TestRenderer.java,
                             com/sun/faces/config/TestValidator.java,
                             com/sun/faces/mock/*.java"
                   excludes="com/sun/faces/config/ConfigFileTestCase.java">

            <classpath>
                <path refid="test.compile.classpath"/>
                
            </classpath>    
        </jsf.javac>      
        <copy todir="${basedir}/build/test/classes">
            <fileset dir="${basedir}/test"
                     includes="**/*.properties"/>
        </copy>
    </target>    

    <target name="prepare.config"   
            description="Prepare pseudo-webapps for configuration testing">

        <!-- Set up webapp "test-config-1" -->
        <mkdir dir="${build.dir}/test-config-1"/>
        <copy todir="${build.dir}/test-config-1">
            <fileset dir="web/test-config-1"/>
        </copy>
        <mkdir dir="${build.dir}/test-config-1/WEB-INF/classes"/>
        <mkdir dir="${build.dir}/test-config-1/WEB-INF/lib"/>
        <copy todir="${build.dir}/test-config-1/WEB-INF/lib"
              file="${jsf-api.jar}"/>
        <copy todir="${build.dir}/test-config-1/WEB-INF/lib"
              file="${build.dir}/lib/${name}.jar"/>

        <!-- Set up webapp "test-config-2" by copying "test-config-1" ... -->
        <mkdir dir="${build.dir}/test-config-2"/>
        <copy todir="${build.dir}/test-config-2">
            <fileset dir="${build.dir}/test-config-1"/>
        </copy>
        <!-- ... and adding a META-INF/faces-config.xml file in /WEB-INF/classes -->
        <mkdir dir="${build.dir}/test-config-2/WEB-INF/classes/META-INF"/>
        <copy tofile="${build.dir}/test-config-2/WEB-INF/classes/META-INF/faces-config.xml"
              file="${build.dir}/test-config-2/WEB-INF/embed-config.xml"/>

    </target>

    <target name="test.config"
            depends="prepare.config,config.compile"
            description="Execute standalone JUnit tests on config subsystem">

        <echo message="Running com.sun.faces.config tests ..."/>
        <jsf.junit classpath-refid="test.runtime.classpath"
                   test-results-dir="${impl.test.results.dir}">
            <custom-sysproperties>
                <sysproperty   key="base.dir" value="${basedir}/build"/>
            </custom-sysproperties>
            <tests>
                <fileset dir="${basedir}/build/test/classes"
                         includes="com/sun/faces/config/ConfigureListenerTestCase.class"/>
            </tests>             
        </jsf.junit>        
    </target>

</project>
