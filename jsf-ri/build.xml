<?xml version='1.0' encoding='UTF-8'?>

<!--
 Copyright 2004 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->


<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">

  <property name="Name" value="JavaServer Faces RI"/>
  <property name="name" value="jsf-impl"/>
  <property name="version" value="1_1"/>

<!-- ************ Per user local properties ******************************* -->

  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->
  <property environment="myenv" />


<!-- ************ Where are we building into? ***************************** -->

  <!-- the root of our tomcat -->

  <!-- The base directory for compilation targets -->
  <property name="build.home" value="build"/>
  <property name="build.classes" value="${build.home}/classes"/>

  <property name="build.generate"   value="${build.home}/generate"/>
  <property name="build.generate.tld"   value="${build.generate}/conf/share"/>

  <property name="build.coverage"   value="${build.home}/coverage"/>
  <property name="build.classes.instr" 
            value="${build.coverage}/classes_instr"/>
  <property name="build.coverage.report"   
            value="${build.coverage}/report"/>


  <!-- The base directory for the JSF APIs -->
  <property name="jsf-api.home" value ="../jsf-api"/>

  <property name="jsf-tools.dir"    value="${basedir}/../jsf-tools"/>
  
  <property name="jsf-portlet.dir"    value="${basedir}/../jsf-portlet"/>


  <!-- The base directory for distribution targets -->
  <property name="dist.home" value="${basedir}/dist"/>

  <!-- The base directory for component sources -->
  <property name="source.home" value="${basedir}/src"/>

  <!-- The base directory for component tests -->
  <property name="test.home" value="${basedir}/test"/>

  <!-- The directory in which test results are written -->
  <property name="test.results.dir" value="${basedir}/testresults"/>

  <!-- The base directory for dependent jars -->
  <property name="lib.home" value="${basedir}/lib"/>

  <!-- The base directory for executable scripts -->
  <property name="bin.home" value="${basedir}/etc/bin"/>

  <!-- The home directory for Ant -->
  <property name="ant.home" value="${basedir}/lib"/>

  <!-- The base directory of the JSF TCK -->
  <property name="jsf-tck.home" value="../jsf-tck"/>

  <property name="jcov.javac.args"         value=""/>
  <property name="jcov.jvm.args"         value=""/>
  <property name="debug.jvm.args" value=""/>

  <!-- ************ Dependencies **** *************************************** -->

  <!-- The locations of necessary jar files -->
  <property name="servlet.jar" value="${tomcat.home}/common/lib/servlet-api.jar"/>
  <property name="jsp.jar" value="${tomcat.home}/common/lib/jsp-api.jar"/>
  <property name="catalina-ant.jar" value="${tomcat.home}/server/lib/catalina-ant.jar"/>
  <property name="commons-logging.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-logging.jar"/>
  <property name="commons-digester.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-digester.jar"/>
  <property name="commons-beanutils.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-beanutils.jar"/>
  <property name="commons-collections.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-collections.jar"/>
  <property name="jstl.jar" 
            value="${tomcat.home}/jstl/lib/jstl.jar"/>
  <property name="standard.jar" 
            value="${tomcat.home}/jstl/lib/standard.jar"/>
  <property name="jsf-api.jar" value="${jsf-api.home}/build/lib/jsf-api.jar"/>
  <property name="jsf-portlet.jar" value="${jsf-portlet.dir}/portlet-lib/build/lib/jsf-portlet.jar"/>
  <property name="jsf-api.dtd" value="${jsf-api.home}/build/lib/web-facesconfig_1_1.dtd"/>
  <property name="tlddoc.jar" value="${tomcat.home}/../tlddoc-1_0/tlddoc.jar"/>
  <property name="jcov.jar" 
            value="${tomcat.home}/../jcov/lib/jcov.jar"/>

<!-- ************ Compiler Defaults *************************************** -->

  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug" value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation" value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize" value="false"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp.jar}"/> 
    <pathelement location="${jstl.jar}"/>
  </path>

  <path id="catalina-ant.classpath">
    <pathelement location="${catalina-ant.jar}"/>
  </path>

  <path id="test.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.home}/test"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${jsp.jar}"/> 
    <pathelement location="${jstl.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${standard.jar}"/>
  </path>

  <!-- Custom Tomcat Integration -->
  <taskdef  name="list"     classname="org.apache.catalina.ant.ListTask">
        <classpath>
          <pathelement location="${catalina-ant.jar}" />
        </classpath>
  </taskdef>    
  <property name="url"      value="http://localhost:8080/manager"/>


    <!-- Directory where tlds are stored -->
    <property name="conf.share.dir" value="conf/share"/>


<!-- ************ Executable Targets ************************************** -->

  <!-- 
       ===================================================================
         Convenience target: cvs update              
       =================================================================== 
  -->
  <target name="cvsupdate">
    <cvs command="update -d -P"/>
  </target>

  <!-- 
       ===================================================================
         Convenience target: pull.clean.build
       =================================================================== 
  -->
  <target name="pull.clean.build" depends="cvsupdate,clean,main">
  </target>


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${Name} ${version} --------"/>
  </target>

  <target name="prepare" 
          depends="init,detect.tck,set.tools.property,verify.tools.property"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/generate"/>
    <mkdir dir="${build.home}/bin"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.classes}/META-INF"/>
    <mkdir dir="${build.home}/javadocs"/>
    <mkdir dir="${build.home}/tlddocs"/>
    <mkdir dir="${build.home}/lib"/>
  </target>

  <target name="prepare.generate"
          depends="prepare,set.tools.property,verify.tools.property">
    <mkdir dir="${build.generate.tld}"/>
  </target>

  <target name="set.tools.property" unless="jsf-tools">
    <available property="jsf-tools" value="${jsf-tools.dir}"
               file="${jsf-tools.dir}/build.xml"/>
  </target>

  <target name="verify.tools.property" unless="jsf-tools">

<fail>
You must have the property jsf-tools defined, or the path ../jsf-tools
must exist.  This is necessary for the MessageFactory class.
</fail>
  </target>

  <target name="copy.template.sources" depends="prepare"
     description="Copy template sources from ${jsf-tools.dir}/template-source">

    <mkdir dir="${build.generate}/com/sun/faces/util"/>
    <filter token="protection" value="public"/>

    <filter token="package" value="com.sun.faces.util"/>
    <copy file="${jsf-tools.dir}/template-src/MessageFactory.java" 
          todir="${build.generate}/com/sun/faces/util"
          filtering="true"/>

  </target>

  <target name="check.taglib.generation.necessity" if="jsf-tools">
    <uptodate property="skip.taglib.generation"
              targetfile="${build.generate}/last-taglib-generation">
       <srcfiles dir="${jsf-api.home}/doc">
         <include name="*.xml"/>
       </srcfiles>
    </uptodate>
  </target>

  <target name="generate" depends="prepare.generate,check.taglib.generation.necessity"
          if="jsf-tools" unless="skip.taglib.generation">
    <echo>
      jsf-tools is ${jsf-tools.dir}
    </echo>

    <ant dir="${jsf-tools.dir}" inheritall="false" target="clean.generated.taglib"/>

    <ant dir="${jsf-tools.dir}" inheritall="false" target="generate.taglib"/>

    <copy todir="${build.generate}">

      <!-- Copy the configuration processing classes -->
      <fileset dir="${jsf-tools.dir}/src">
        <include name="com/sun/faces/config/beans/*.java"/>
        <include name="com/sun/faces/config/rules/*.java"/>
      </fileset>

      <!-- Copy the generated tag classes and TLD -->
      <fileset dir="${jsf-tools.dir}/build/generate">
        <include name="conf/**/*.*"/>
        <include name="com/**/*.*"/>
      </fileset>
  
    </copy>

    <touch file="${build.generate}/last-taglib-generation"/>

  </target>

  <target         name="props"
           description="Display resolved properties">

    <echo      message="commons-beanutils.jar =   ${commons-beanutils.jar}"/>
    <echo      message="commons-collections.jar = ${commons-collections.jar}"/>
    <echo      message="commons-digester.jar =    ${commons-digester.jar}"/>
    <echo      message="commons-logging.jar =     ${commons-logging.jar}"/>
    <echo      message="jsf-api.jar =             ${jsf-api.jar}"/>
    <echo      message="jsp.jar =                 ${jsp.jar}"/>
    <echo      message="jstl.jar =                ${jstl.jar}"/>
    <echo      message="junit.jar =               ${junit.jar}"/>
    <echo      message="servlet.jar =             ${servlet.jar}"/>
    <echo      message="standard.jar =            ${standard.jar}"/>

  </target>

  <path id="jcov.instr.classpath">
    <pathelement location="${jsf-tools.dir}/build/classes_jcov"/>
    <pathelement location="${jcov.jar}"/>
  </path>


  <target name="main.jcov">
    <mkdir dir="${build.coverage}" />
    <mkdir dir="${build.classes.instr}" />
    <antcall target="main">
      <param name="jcov.javac.args" value="-Xjcov" />
    </antcall>
    <exec executable="perl" output="${build.coverage}/jcov.options">
      <arg line="${jsf-api.home}/test/generate-savebegin.pl -o ${jsf-api.home}/test/output-methods.pl -j ${build.home}/lib/${name}.jar -l" />
    </exec>
    <!-- build our custom instrumenter -->
    <ant dir="${jsf-tools.dir}" inheritall="false" target="jcov.tools"/>
    <echo message="Instrumenting ${name} classes" />
    <java classname="com.sun.tdk.jcov.InstrMain2" fork="true">
      <classpath refid="jcov.instr.classpath" />
      <jvmarg line="${debug.jvm.args}"/>
      <arg line="-option_file=${build.coverage}/jcov.options -output=${build.classes.instr} ${build.classes}" />
    </java>
    <antcall target="jars">
      <param name="build.classes" value="${build.classes.instr}/classes" />
    </antcall>
    <antcall target="bundle.jcov.into.impl" />
    <!-- exclude autogenerated classes from template generation -->
    <mkdir dir="${build.coverage}/classes_for_template" />
    <copy todir="${build.coverage}/classes_for_template">
      <fileset dir="${build.classes.instr}/classes" excludes="com/sun/faces/taglib/html_basic/*.*,com/sun/faces/config/beans/**/*.*,com/sun/faces/config/rules/**/*.*" />
    </copy>
    <java classname="com.sun.tdk.jcov.TmplGenMain" classpath="${jcov.jar}"
          fork="true">
      <arg line="-dtype=A -classpath=${build.coverage}/classes_for_template -output=${build.coverage}/${name}-template.jcov" />
    </java>
  </target>

  <target name="build.coverage.report">
    <copy todir="${build.coverage}" file="${tomcat.home}/bin/java.jcov" />
    <java classname="com.sun.tdk.jcov.MergerMain" classpath="${jcov.jar}" 
          fork="true">
      <arg line="-output=${build.coverage}/${name}-master.jcov ${build.coverage}/java.jcov ${build.coverage}/${name}-template.jcov" />
    </java>
    <mkdir dir="${build.coverage.report}" />
    <mkdir dir="${build.coverage.report}/src" />
    <copy todir="${build.coverage.report}/src">
     <fileset dir="${source.home}"/>
    </copy>
    <copy todir="${build.coverage.report}/src">
      <fileset dir="${build.generate}">
        <include name="com/sun/**/*.java"/>
      </fileset>
    </copy>
    <copy todir="${build.coverage.report}/src">
     <fileset dir="${jsf-api.home}/src"/>
    </copy>
    <copy todir="${build.coverage.report}/src">
      <fileset dir="${jsf-api.home}/build/generate">
        <include name="javax/**/*.java"/>
      </fileset>
    </copy>
    <copy todir="${build.coverage.report}/src">
     <fileset dir="${jsf-tools.dir}/src"/>
    </copy>
    <java classname="com.sun.tdk.jcov.RepGenMain" classpath="${jcov.jar}">
      <arg line="-src_root=${build.coverage.report}/src -rel_links -per_src -output=${build.coverage.report} -fmt=html_ns ${build.coverage}/${name}-master.jcov" />
    </java>
    
  </target>

 <target name="compile.old" if="old.compiler">
    <javac srcdir="${source.home}:${build.generate}"
           destdir="${build.classes}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          fork="true"
          executable="${old.compiler}"
          optimize="${compile.optimize}">
      <compilerarg line="${jcov.javac.args}" />
      <classpath refid="compile.classpath"/>
    </javac>
  </target>
                                                                                                                                    
  <target name="compile.standard" unless="old.compiler">
    <javac srcdir="${source.home}:${build.generate}"
           destdir="${build.classes}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <compilerarg line="${jcov.javac.args}" />
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="compile" depends="prepare,generate,copy.template.sources"
   description="Just compile the classes">
    <!-- Run javac through everything -->
    <antcall target="compile.old"/>
    <antcall target="compile.standard"/>

    <copy todir="${build.classes}">
        <fileset dir="${source.home}" includes="**/*.properties"/>
    </copy>
    <copy todir="${build.classes}">
        <fileset dir="${source.home}" includes="**/*.xml"/>
    </copy>

    <copy todir="${build.classes}/com/sun/faces">
        <fileset dir="${jsf-api.home}/doc">
          <include name="*.dtd"/>
          <include name="*.xml"/>
        </fileset>
    </copy>

    <copy file="${build.generate.tld}/html_basic.tld"
         toDir="${build.classes}/META-INF"/>
    <copy file="${conf.share.dir}/jsf_core.tld"
         toDir="${build.classes}/META-INF"/>

    </target>

  <target name="clean" 
   description="Clean build and distribution directories">
    <ant antfile="build-tests.xml" target="safe.remove"/>
    <ant antfile="build-tests.xml" target="remove.tstamp"/>
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
    <delete    dir="${test.results.dir}"/>
    <delete> 
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
    </delete>
    <delete file="jsf-${version}.zip"/>
    <delete file="jsf-${version}_src.zip"/>
    <delete  dir="${tomcat.home}/jsf-${version}/lib" />
    <ant dir="${basedir}/systest" inheritall="false" target="safe.remove"/>  
    <ant dir="${basedir}/systest" inheritall="false" target="clean"/>  
    <ant dir="${basedir}/systest-per-webapp" inheritall="false" target="remove"/>  
    <ant dir="${basedir}/systest-per-webapp" inheritall="false" target="clean"/>  
    <ant antfile="build-tests.xml" target="remove.jsp.incompat.workaround"/>
    <ant dir="${jsf-portlet.dir}" inheritall="false" target="clean"/>
  </target>

  <target name="all" depends="clean,prepare,compile"
   description="Clean and compile all components"/>

  <!-- Create the source distribution -->
  <target name="ri.source">
    <zip     destfile="${dist.home}/jsf-ri-src-${version}.zip">
      <zipfileset dir="${basedir}"
             includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
               prefix="jsf-ri-src-${version}"/>
      <zipfileset dir="${source.home}"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/src"/>
      <zipfileset dir="${test.home}"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/test"/>
      <zipfileset dir="${basedir}"
             includes="conf/** web/**"
               prefix="jsf-ri-src-${version}"/>
    </zip>
  </target>


  <target name="dist" depends="jars" description="Build distribution files">
    <mkdir dir="${dist.home}"/>

    <antcall target="tlddocs"/>

    <!-- Create the binary distribution -->
    <zip     destfile="${dist.home}/jsf-ri-${version}.zip">
      <zipfileset dir="${build.home}"
             includes="lib/**,tlddocs/**"
               prefix="jsf-ri-${version}"/>
    </zip>

    <!-- Create a buildable source distribution -->
    <zip     destfile="${dist.home}/jsf-ri-src-${version}.zip">
      <zipfileset dir="${basedir}"
             includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
               prefix="jsf-ri-src-${version}"/>
      <zipfileset dir="${source.home}"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/src"/>
         
      <zipfileset dir="${test.home}"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/test"/>
      <zipfileset dir="${basedir}/systest"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/systest"/>
      <zipfileset dir="${basedir}"
             includes="conf/** web/**"
	     excludes="**/fruitstand/**"
               prefix="jsf-ri-src-${version}"/>
    </zip>
    <antcall target="ri.source"/>
    
  </target>

  <target name="tlddocs">

    <echo message="tlddoc.jar = ${tlddoc.jar}"/>

    <java fork="true" jar="${tlddoc.jar}">
      <arg line="-d ${build.home}/tlddocs"/>
      <arg line="-windowtitle jsf-ri-${version}"/>
      <arg value="${build.generate.tld}/html_basic.tld"/>
      <arg value="${conf.share.dir}/jsf_core.tld"/>
    </java>
  </target>

    <target name="compile.test" depends="prepare,compile"
     description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>
    
    </target>

    <target name="test" depends="init.test,run.junit.test,run.cactus.test,test.config,run.systest,run.systest-per-webapp"
     description="Run all unit and system tests"/>

    <target name="init.test">
        <mkdir dir="${test.results.dir}"/>
    </target>

    <target name="run.systest" description="Run system tests">
      <ant dir="${basedir}/systest" inheritall="false" target="safe.remove"/>
      <ant dir="${basedir}/systest" inheritall="false" target="install"/>
      <ant dir="${basedir}/systest" inheritall="false" target="test"/>
      <ant dir="${basedir}/systest" inheritall="false" target="remove"/>
    </target>

    <target name="run.systest-per-webapp" description="Run per-webapp system tests">
      <ant dir="${basedir}/systest-per-webapp" inheritall="false" target="test"/>
      <ant dir="${basedir}/systest-per-webapp" inheritall="false" target="remove"/>
    </target>


    <target name="run.junit.test" depends="compile.test"
     description="Run unit tests not requiring cactus">
        <ant antfile="build-tests.xml" target="run.test"/>
    </target>

    <target name="run.cactus.test" depends="compile.test,jars"
     description="Run unit tests requiring cactus">
        <ant antfile="build-tests.xml" target="execute.cactus.tests"/>
    </target>

    <target name="force.run.cactus.test" depends="compile.test,jars"
     description="Run unit tests requiring cactus, forcing reinstall">
        <ant antfile="build-tests.xml" target="force.execute.cactus.tests"/>
    </target>

    <target name="run.junit.test.jcov" 
     description="Run unit tests not requiring cactus, with jcov">
        <ant antfile="build-tests.xml" target="run.test">
          <property name="jcov.jar"  value="${jcov.jar}" />
          <property name="build.classes" 
                    value="${build.classes.instr}/classes" />
        </ant>
    </target>

    <target name="run.cactus.test.jcov"
     description="Run unit tests requiring cactus, with jcov">
        <ant antfile="build-tests.xml" target="force.execute.cactus.tests">
          <property name="jcov.jar"  value="${jcov.jar}" />
        </ant>
    </target>

    <target name="run.systest.jcov" description="Run system tests, with jcov">
      <ant dir="${basedir}/systest" inheritall="false" target="safe.remove"/>
      <ant dir="${basedir}/systest" inheritall="false" target="install"/>
      <ant dir="${basedir}/systest" inheritall="false" target="test">
          <property name="jcov.file" value="system" />
          <property name="jcov.jar"  value="${jcov.jar}" />
      </ant>
      <ant dir="${basedir}/systest" inheritall="false" target="remove"/>
    </target>

    <target name="test.jcov">
      <antcall target="run.junit.test.jcov" />
      <antcall target="run.cactus.test.jcov" />
      <antcall target="run.systest.jcov" />
    </target>

    <target name="passthru">
        <echo>Invoking target ${passthru}</echo>
        <ant antfile="build-tests.xml" target="${passthru}"/>
    </target>

  <!-- 
       =================================================================== 
         Create the jars
       =================================================================== 
  -->
  <target name="jars" depends="compile">
    <echo message="${build.classes}" />
    <jar jarfile="${build.home}/lib/${name}.jar" 
         basedir="${build.classes}" > 
         <manifest>
          <attribute name="Specification-Title" value="JavaServer Faces"/>
          <attribute name="Specification-Version" value="1.1"/>
          <attribute name="Implementation-Title" value="'${name}': ${Name}"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc."/>
          <attribute name="Implementation-Vendor-Id" value="com.sun"/>
          <attribute name="Extension-Name" value="com.sun.faces"/>
        </manifest>
    </jar>

  </target>

  <target name="bundle.jcov.into.impl">
    <mkdir dir="${build.coverage}/jar" />
    <exec executable="jar" dir="${build.coverage}/jar">
      <arg line="-xf ${basedir}/${build.home}/lib/${name}.jar" />
    </exec>
    <exec executable="jar" dir="${build.coverage}/jar">
      <arg line="-xf ${jcov.jar}" />
    </exec>
    <delete file="${build.home}/lib/${name}.jar" />
    <jar jarfile="${build.home}/lib/${name}.jar" 
         basedir="${build.coverage}/jar" />
  </target>
  
   <!-- 
       =================================================================== 
         Create the Portlet Integration library
       =================================================================== 
  -->
  <target name="build-jsf-portlet.jar" depends="jars">
    <echo>
      jsf-portlet is ${jsf-portlet.dir}
    </echo>
    <ant dir="${jsf-portlet.dir}" inheritall="false" target="main"/>
    <copy file="${jsf-portlet.jar}" todir="${build.home}/lib" />
  </target>

  <!--
       ==================================================================
          TCK related
       ==================================================================
  -->
                                                                                
  <target name="detect.tck" description="Detect the presence of the JSF TCK">
      <available property="jsf.tck.present" file="${jsf-tck.home}" type="dir"/>
  </target>
                                                                                
  <target name="copy.to.tck" description="Copy the jsf-impl.jar to TCK_HOME/weblib"
          if="jsf.tck.present">
      <copy file="${build.home}/lib/${name}.jar" todir="${jsf-tck.home}/weblib"
            overwrite="true"/>
  </target>


<!--
       ===================================================================
         Tomcat integration targets
       ===================================================================
  -->

  <target name="list"
   description="List installed webapps on Tomcat">
    <list url="${url}" username="${username}" password="${password}"/>
  </target>

     <!--
      ===================================================================
       This target copies the JSF libraries under ${jwsdp.home}. This
       target simulates JWSDP 1.2 distribution environment.
      ===================================================================
     -->
   <target name="jsf.deploy.wspack" depends="jars">
     <mkdir dir="${tomcat.home}/jsf"/>
     <mkdir dir="${tomcat.home}/jsf/lib"/>

     <copy file="${build.home}/lib/${name}.jar" todir="${tomcat.home}/jsf/lib"/>
     <copy file="${jsf-api.jar}" todir="${tomcat.home}/jsf/lib"/>
   </target>


  <target name="main" depends="jars,build-jsf-portlet.jar,copy.to.tck"/>

  <!--
       ===================================================================
         Temporary Testing Targets
       ===================================================================
  -->

  <target name="test.compile"
       depends="compile"
   description="Compile standalone JUnit tests">

      <mkdir             dir="${basedir}/build/test"/>

      <javac          srcdir="${basedir}/test"
                     destdir="${basedir}/build/test"
                       debug="${compile.debug}"
                    optimize="${compile.optimize}"
                 deprecation="${compile.deprecation}">

        <classpath     refid="test.classpath"/>

        <!-- PENDING(craigmcc) -  "config" and "mock" subpackages only
             until generators work again -->
        <include        name="com/sun/faces/config/ConfigureListenerTestCase.java"/>
        <include        name="com/sun/faces/config/TestComponent.java"/>
        <include        name="com/sun/faces/config/TestConverter.java"/>
        <include        name="com/sun/faces/config/TestRenderer.java"/>
        <include        name="com/sun/faces/config/TestValidator.java"/>
        <include        name="com/sun/faces/mock/*.java"/>

    </javac>

    <copy              todir="${basedir}/build/test">
      <fileset           dir="${basedir}/test"
                    includes="**/*.properties"/>
    </copy>

  </target>

  <property name="log.impl"         value="org.apache.commons.logging.impl.SimpleLog"/>
  <property name="log.level"        value="info"/> <!-- Unit test -->
  <property name="log.digester"     value="info"/> <!-- Digester main -->
  <property name="log.sax"          value="info"/> <!-- SAX events -->

  <target name="prepare.config"
       depends="jars"
   description="Prepare pseudo-webapps for configuration testing">

    <!-- Set up webapp "test-config-1" -->
    <mkdir          dir="${build.home}/test-config-1"/>
    <copy         todir="${build.home}/test-config-1">
      <fileset      dir="web/test-config-1"/>
    </copy>
    <mkdir          dir="${build.home}/test-config-1/WEB-INF/classes"/>
    <mkdir          dir="${build.home}/test-config-1/WEB-INF/lib"/>
    <copy         todir="${build.home}/test-config-1/WEB-INF/lib"
                   file="${jsf-api.jar}"/>
    <copy         todir="${build.home}/test-config-1/WEB-INF/lib"
                   file="${build.home}/lib/${name}.jar"/>

    <!-- Set up webapp "test-config-2" by copying "test-config-1" ... -->
    <mkdir          dir="${build.home}/test-config-2"/>
    <copy         todir="${build.home}/test-config-2">
      <fileset      dir="${build.home}/test-config-1"/>
    </copy>
    <!-- ... and adding a META-INF/faces-config.xml file in /WEB-INF/classes -->
    <mkdir          dir="${build.home}/test-config-2/WEB-INF/classes/META-INF"/>
    <copy        tofile="${build.home}/test-config-2/WEB-INF/classes/META-INF/faces-config.xml"
                   file="${build.home}/test-config-2/WEB-INF/embed-config.xml"/>

  </target>

  <target name="test.config"
       depends="prepare.config,test.compile"
   description="Execute standalone JUnit tests on config subsystem">

    <echo message="Running com.sun.faces.config tests ..."/>
    <junit printSummary="no" fork="no"
          haltonfailure="yes" haltonerror="yes">

      <classpath  refid="test.classpath"/>
      <formatter   type="plain"
                usefile="false"/>
      <formatter type="xml" usefile="true" />

      <sysproperty   key="basedir"
                   value="${build.home}"/>

      <sysproperty   key="java.endorsed.dirs"
                   value="${tomcat.home}/jaxp/lib/endorsed"/>

      <sysproperty   key="org.apache.commons.logging.Log"
                   value="${log.impl}"/>
      <sysproperty   key="org.apache.commons.logging.simplelog.defaultlog"
                   value="info"/>
      <sysproperty   key="org.apache.commons.logging.simplelog.log.com.sun.faces"
                   value="${log.level}"/>
      <sysproperty   key="org.apache.commons.logging.simplelog.log.org.apache.commons.digester.Digester"
                   value="${log.digester}"/>
      <sysproperty   key="org.apache.commons.logging.simplelog.log.org.apache.commons.digester.Digester.sax"
                   value="${log.sax}"/>
      <sysproperty   key="base.dir" value="${basedir}/build"/>

      <batchtest todir="${test.results.dir}">
        <fileset    dir="${basedir}/build/test"
               includes="com/sun/faces/config/ConfigureListenerTestCase.class"/>
      </batchtest>
    </junit>

  </target>


</project>
