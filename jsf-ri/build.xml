<?xml version='1.0' encoding='UTF-8'?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License). You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the License at
 https://javaserverfaces.dev.java.net/CDDL.html or
 legal/CDDLv1.0.txt. 
 See the License for the specific language governing
 permission and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at legal/CDDLv1.0.txt.    
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 [Name of File] [ver.__] [Date]
 
 Copyright 2005 Sun Microsystems Inc. All Rights Reserved
-->


<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">


    <!-- ************ Per user local properties ******************************* -->

    <property file="${user.home}/build.properties"/>    
    <property file="../build.properties"/>    
    <import file="${jsf.build.home}/common/ant/common.xml"/>


    <!-- ******************* Structural ************************** -->

    <!-- The base directory for compilation targets -->
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.generate.dir" value="${build.dir}/generate"/>
    <property name="build.generate.tld.dir"
              value="${build.generate.dir}/conf/share"/>

    <!-- The base directory for distribution targets -->
    <property name="dist.dir" value="${basedir}/dist"/>

    <!-- The base directory for component sources -->
    <property name="source.dir" value="${basedir}/src"/>

    <!-- The base directory for component tests -->
    <property name="test.dir" value="${basedir}/test"/>
    
    <!-- Misc -->
    <property name="conf.share.dir" value="${basedir}/conf/share"/>
    <property name="name" value="jsf-impl"/>
    
    <path id="impl.compile.classpath">
        <pathelement location="${jsf-api.jar}"/>
        <path refid="compile.classpath"/>
    </path>


    <!-- ************ Executable Targets ************************************** -->


    <target name="init"
            description="Initialize and evaluate conditionals">
        <echo message="-------- ${impl.name} ${impl.version} --------"/>
    </target>

    <target name="prepare" depends="init"
            description="Prepare build directory">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
        <mkdir dir="${build.generate.tld.dir}"/>        
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.classes.dir}/META-INF"/>
        <mkdir dir="${build.dir}/javadocs"/>
        <mkdir dir="${build.dir}/tlddocs"/>
        <mkdir dir="${build.dir}/lib"/>
    </target>        

    <target name="copy.template.sources" depends="prepare"
            description="Copy template sources from ${tools.dir}/template-source">

        <mkdir dir="${build.generate.dir}/com/sun/faces/util"/>
        <filter token="protection" value="public"/>

        <filter token="package" value="com.sun.faces.util"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/com/sun/faces/util"
              filtering="true"/>

        <filter token="protection" value="public"/>

        <filter token="package" value="com.sun.faces.application"/>
        <copy todir="${build.generate.dir}/com/sun/faces/application"
              filtering="true">
            <fileset dir="${api.dir}/template-src">
                <include name="*Adapter.java"/>
            </fileset>
        </copy>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/MethodBindingMethodExpressionAdapter.java"
              token="@serialVersionUID@"
              value="6351778415298720238L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/MethodExpressionMethodBindingAdapter.java"
              token="@serialVersionUID@"
              value="5639227653537610567L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/ValueExpressionValueBindingAdapter.java"
              token="@serialVersionUID@"
              value="2990621816592041196L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/ValueBindingValueExpressionAdapter.java"
              token="@serialVersionUID@"
              value="7410146713650507654L"/>
    </target>

    <target name="check.taglib.generation.necessity">
        <uptodate property="skip.taglib.generation"
                  targetfile="${build.generate.dir}/last-taglib-generation">
            <srcfiles dir="${api.dir}/doc">
                <include name="standard-html-renderkit.xml"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="generate"
            depends="check.taglib.generation.necessity"
            unless="skip.taglib.generation">        

        <copy todir="${build.dir}">
            <fileset dir="${tools.dir}/conf">
                <include name="TAG-*"/>
            </fileset>
        </copy>
        
        <delete dir="${build.generate.dir}"/>

        <mkdir dir="${tools.dir}/build/classes"/>
        <mkdir dir="${build.generate.dir}"/>
        <javac srcdir="${tools.dir}/src"
               destdir="${tools.dir}/build/classes">
            <classpath>
                <path refid="impl.compile.classpath"/>
            </classpath>
        </javac>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${tools.dir}/src"
                     includes="**/*.properties"/>            
        </copy>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${impl.dir}/src"
                     includes="**/LogStrings.properties"/>
        </copy>
        <copy todir="${tools.dir}/build/classes/com/sun/faces"
              flatten="true">
            <fileset dir="${api.dir}/doc"
                      includes="*.dtd,*.xsd"/>
        </copy>
        <taskdef name="generateTaglib"
                 classname="com.sun.faces.ant.TaglibGenTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <generateTaglib
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="impl.compile.classpath"/>                
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <jvmarg line="${debug.jvm.args}"/>
        </generateTaglib>

        <copy todir="${build.generate.dir}">

            <!-- Copy the configuration processing classes -->
            <fileset dir="${tools.dir}/src">
                <include name="com/sun/faces/config/DigesterFactory.java"/>
                <include name="com/sun/faces/config/beans/*.java"/>
                <include name="com/sun/faces/config/rules/*.java"/>
                <include name="com/sun/faces/util/*.java"/>
            </fileset>
           
        </copy>

        <touch file="${build.generate.dir}/last-taglib-generation"/>

    </target>    
    
    <target name="compile" depends="prepare,generate,copy.template.sources"
            description="Just compile the classes">
        <!-- Run javac through everything -->
        <jsf.javac srcdir="${source.dir}:${build.generate.dir}"
                   destdir="${build.classes.dir}">
            <classpath>
                <path refid="impl.compile.classpath"/>
            </classpath>            
        </jsf.javac>

        <copy todir="${build.classes.dir}">
            <fileset dir="${source.dir}" includes="**/*.properties"/>
            <fileset dir="${tools.dir}/src" includes="**/*.properties"/>
        </copy>

        <copy todir="${build.classes.dir}/com/sun/faces">
            <fileset dir="${api.dir}/doc">
                <include name="*.dtd"/>
                <include name="standard-html-renderkit.xml"/>
                <include name="*.xsd"/>
            </fileset>
        </copy>

        <copy file="${build.generate.tld.dir}/html_basic.tld"
              toDir="${build.classes.dir}/META-INF"/>
        <copy file="${conf.share.dir}/jsf_core.tld"
              toDir="${build.classes.dir}/META-INF"/>

    </target>

    <target name="clean"
            description="Clean build and distribution directories">        
        <ant antfile="build-tests.xml" target="remove.tstamp"/>
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${impl.test.results.dir}"/>
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
            <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
        </delete>
        <delete file="jsf-${impl.version}.zip"/>
        <delete file="jsf-${impl.version}_src.zip"/>               
        <ant dir="${basedir}/systest" inheritall="false" target="clean"/>        
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="clean"/>     
         <delete dir="${tools.dir}/build"/>
    </target>

    <target name="all" depends="clean,prepare,compile"
            description="Clean and compile all components"/>

    <!-- Create the source distribution -->
    <target name="ri.source">
        <zip destfile="${dist.dir}/jsf-ri-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
                        prefix="jsf-ri-src-${impl.version}"/>
            <zipfileset dir="${source.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/src"/>
            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/test"/>
            <zipfileset dir="${basedir}"
                        includes="conf/** web/**"
                        prefix="jsf-ri-src-${impl.version}"/>
        </zip>
    </target>


    <target name="dist" depends="jars" description="Build distribution files">      

        <mkdir dir="${dist.dir}"/>

        <antcall target="tlddocs"/>

        <!-- Create the binary distribution -->
        <zip destfile="${dist.dir}/jsf-ri-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="lib/**,tlddocs/**"
                        prefix="jsf-ri-${impl.version}"/>
        </zip>

        <!-- Create a buildable source distribution -->
        <zip destfile="${dist.dir}/jsf-ri-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
                        prefix="jsf-ri-src-${impl.version}"/>
            <zipfileset dir="${source.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/src"/>

            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/test"/>
            <zipfileset dir="${basedir}/systest"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/systest"/>            
        </zip>
        <antcall target="ri.source"/>

    </target>

    <target name="tlddocs">                
        <java fork="true" jar="${tlddoc.jar}">
            <arg line="-d ${build.dir}/tlddocs"/>
            <arg line="-windowtitle jsf-ri-${spec.version}"/>
            <arg value="${build.generate.tld.dir}/html_basic.tld"/>
            <arg value="${conf.share.dir}/jsf_core.tld"/>
        </java>
    </target>

    <target name="compile.test" depends="prepare,compile"
            description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>

    </target>

    <target name="test"
            depends="init.test,run.junit.test,run.cactus.test,run.systest,run.systest-per-webapp"
            description="Run all unit and system tests"/>

    <target name="init.test">
        <mkdir dir="${impl.test.results.dir}"/>
    </target>

    <target name="run.systest" description="Run system tests"
            depends="init.test">              
        <ant dir="${basedir}/systest" inheritall="false" target="test"/>        
    </target>

    <target name="run.systest-per-webapp"
            description="Run per-webapp system tests"
            depends="init.test,compile.test">
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="test"/>
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="remove"/>
    </target>


    <target name="run.junit.test" depends="init.test,compile.test"
            description="Run unit tests not requiring cactus">
        <ant antfile="build-tests.xml" target="run.test"/>
    </target>

    <target name="run.cactus.test" depends="init.test,compile.test"
            description="Run unit tests requiring cactus">
        <ant antfile="build-tests.xml" target="execute.cactus.tests"/>
    </target>

    <target name="force.run.cactus.test" depends="init.test,compile.test"
            description="Run unit tests requiring cactus, forcing reinstall">
        <ant antfile="build-tests.xml" target="force.execute.cactus.tests"/>
    </target>   

    <target name="prepare.test.webapp">
        <echo>Invoking target prepare.test.webapp</echo>
        <ant antfile="build-tests.xml" target="prepare.test.webapp"/>
    </target>

    <!-- 
         =================================================================== 
           Create the jars
         =================================================================== 
    -->

    <target name="jars" depends="compile,create.runtime.config">
        <jsf.manifested.jar jarfile="${build.dir}/lib/${name}.jar"
                            basedir="${build.classes.dir}"
                            extension-name="com.sun.faces"/>                                               
    </target>

    <target name="main" depends="jars"/>

    <target name="create.runtime.config">
        <xslt in="${build.dir}/classes/com/sun/faces/standard-html-renderkit.xml"
              out="merged.xml"
              style="conf/xslt/merge-config.xsl">
        </xslt>
        <replace file="${basedir}/merged.xml">
            <replacetoken><![CDATA[xmlns:jsf="http://java.sun.com/xml/ns/javaee"]]></replacetoken>
            <replacevalue><![CDATA[]]></replacevalue>
        </replace>
        <replace file="${basedir}/merged.xml">
            <replacetoken><![CDATA[ >]]></replacetoken>
            <replacevalue><![CDATA[>]]></replacevalue>
        </replace>
        <xslt in="${basedir}/merged.xml"
              out="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml"
              style="conf/xslt/prune-tool-data.xsl">
        </xslt>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]></replacetoken>
        </replace>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[ >]]></replacetoken>
            <replacevalue><![CDATA[>]]></replacevalue>
        </replace>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[<faces-config>]]></replacetoken>
            <replacevalue><![CDATA[
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd"
    version="1.2">]]>
            </replacevalue>
        </replace>
        <delete file="${basedir}/merged.xml"/>
    </target>

    <!--
         ===================================================================
           Temporary Testing Targets
         ===================================================================
    -->

   
    
</project>
