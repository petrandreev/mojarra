<?xml version='1.0' encoding='UTF-8'?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">


    <!-- ************ Per user local properties ******************************* -->

    <property file="${user.home}/build.properties"/>    
    <property file="../build.properties"/>    
    <import file="${jsf.build.home}/common/ant/common.xml"/>


    <!-- ******************* Structural ************************** -->

    <!-- The base directory for compilation targets -->
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.generate.dir" value="${build.dir}/generate"/>
    <property name="build.generate.tld.dir"
              value="${build.generate.dir}/conf/share"/>

    <!-- The base directory for binary dependency libs under local version 
         control -->
    <property name="local.lib.dir"
              value="${basedir}/../lib"/>

    <!-- The base directory for distribution targets -->
    <property name="dist.dir" value="${basedir}/dist"/>

    <!-- The base directory for component sources -->
    <property name="source.dir" value="${basedir}/src"/>

    <!-- The base directory for component tests -->
    <property name="test.dir" value="${basedir}/test"/>
    
    <!-- Misc -->
    <property name="conf.share.dir" value="${basedir}/conf/share"/>
    <property name="name" value="jsf-impl"/>
    
    <path id="impl.compile.classpath">
        <pathelement location="${jsf-api.jar}"/>
        <path refid="sun.commons.classpath"/>
        <path refid="compile.classpath"/> 
        <pathelement location="${tools.dir}/build/classes"/>
    </path>


    <!-- ************ Executable Targets ************************************** -->


    <target name="init"
            description="Initialize and evaluate conditionals">
        <echo message="-------- ${impl.name} ${impl.version} --------"/>
    </target>

    <target name="prepare" depends="init"
            description="Prepare build directory">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
        <mkdir dir="${build.generate.tld.dir}"/>        
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.classes.dir}/META-INF"/>
        <mkdir dir="${build.classes.dir}/META-INF/resources"/>
        <mkdir dir="${build.classes.dir}/META-INF/resources/jsfri"/>
        <mkdir dir="${build.classes.dir}/META-INF/resources/jsfri/scripts"/>
        <mkdir dir="${build.dir}/javadocs"/>
        <mkdir dir="${build.dir}/tlddocs"/>
        <mkdir dir="${build.dir}/lib"/>
        <antcall target="delete.and.remkdir.build.generate.dir" />
    </target>        

    <target name="delete.and.remkdir.build.generate.dir" 
            unless="skip.delete.generate">
        <delete dir="${build.generate.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
    </target>

    <target name="copy.template.sources" depends="prepare"
            description="Copy template sources from ${tools.dir}/template-source">

        <mkdir dir="${build.generate.dir}/com/sun/faces/util"/>
        <filter token="protection" value="public"/>

        <filter token="package" value="com.sun.faces.util"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/com/sun/faces/util"
              filtering="true"/>
        <copy file="${tools.dir}/template-src/TypedCollections.java"
              todir="${build.generate.dir}/com/sun/faces/util"
              filtering="true"/>

        <filter token="protection" value="public"/>

        <filter token="package" value="com.sun.faces.application"/>
        <copy todir="${build.generate.dir}/com/sun/faces/application"
              filtering="true">
            <fileset dir="${api.dir}/template-src">
                <include name="*Adapter.java"/>
            </fileset>
        </copy>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/MethodBindingMethodExpressionAdapter.java"
              token="@serialVersionUID@"
              value="6351778415298720238L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/MethodExpressionMethodBindingAdapter.java"
              token="@serialVersionUID@"
              value="5639227653537610567L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/ValueExpressionValueBindingAdapter.java"
              token="@serialVersionUID@"
              value="2990621816592041196L"/>

        <replace
              file="${build.generate.dir}/com/sun/faces/application/ValueBindingValueExpressionAdapter.java"
              token="@serialVersionUID@"
              value="7410146713650507654L"/>
    </target>

    <target name="check.taglib.generation.necessity">
        <uptodate property="skip.taglib.generation"
                  targetfile="${build.generate.dir}/last-taglib-generation">
            <srcfiles dir="${api.dir}/doc">
                <include name="standard-html-renderkit.xml"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="generate"
            depends="check.taglib.generation.necessity"
            unless="skip.taglib.generation">        
        <path id="ant.classpath">
            <pathelement location="${myenv.ANT_HOME}/lib/ant.jar"/>
        </path>

        <copy todir="${build.dir}">
            <fileset dir="${tools.dir}/conf">
                <include name="TAG-*"/>
            </fileset>
        </copy>
        
        <mkdir dir="${tools.dir}/build/classes"/>
        <jsf.javac srcdir="${tools.dir}/src"
               destdir="${tools.dir}/build/classes">
            <classpath>
                <path refid="impl.compile.classpath"/>
                <path refid="ant.classpath"/>
            </classpath>
        </jsf.javac>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${tools.dir}/src"
                     includes="**/*.properties"/>            
        </copy>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${impl.dir}/src"
                     includes="**/LogStrings.properties"/>
        </copy>
        <copy todir="${tools.dir}/build/classes/com/sun/faces"
              flatten="true">
            <fileset dir="${api.dir}/doc"
                      includes="*.dtd,*.xsd"/>
        </copy>
        <taskdef name="generateTaglib"
                 classname="com.sun.faces.ant.TaglibGenTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <taskdef name="generateAttrManager"
                 classname="com.sun.faces.ant.AttributeManagerGenTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <generateTaglib
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="impl.compile.classpath"/>                
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <jvmarg line="${debug.jvm.args}"/>
            <assertions>
                <enable/>
            </assertions>
        </generateTaglib>
        <generateAttrManager
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="impl.compile.classpath"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <jvmarg line="${debug.jvm.args}"/>
            <assertions>
                <enable/>
            </assertions>    
        </generateAttrManager>
        <!--
        <copy todir="${build.generate.dir}">


            <fileset dir="${tools.dir}/src">
                <include name="com/sun/faces/config/DigesterFactory.java"/>
                <include name="com/sun/faces/config/beans/*.java"/>
                <include name="com/sun/faces/config/rules/*.java"/>
                <include name="com/sun/faces/util/*.java"/>
            </fileset>
           
        </copy>
        -->


        <touch file="${build.generate.dir}/last-taglib-generation"/>
        
        <antcall target="create.runtime.config"/>

    </target>

    <target name="compile" depends="prepare,generate,copy.template.sources"
            description="Just compile the classes">

        <!-- Run javac through everything -->
        <jsf.javac srcdir="${source.dir}:${build.generate.dir}"
                   destdir="${build.classes.dir}"
                   excludes="**/ManagedBeanFactoryImpl.java">
            <classpath>
                <path refid="impl.compile.classpath"/>
            </classpath>            
        </jsf.javac>

        <copy todir="${build.classes.dir}">
            <fileset dir="${source.dir}" includes="**/*.properties,**/*.js,**/*.xsd"/>
            <!--<fileset dir="${tools.dir}/src" includes="**/*.properties"/>-->
        </copy>
        
        <!-- Massage the version number into LogStrings.properties -->
        <replace dir="${build.classes.dir}/com/sun/faces/"
                 token="|version.string|"
                 value="${impl.version}">
            <include name="LogStrings*.properties"/>
        </replace>

        <copy todir="${build.classes.dir}/com/sun/faces">
            <fileset dir="${api.dir}/doc">
                <include name="*.dtd"/>
                <include name="standard-html-renderkit.xml"/>
                <include name="*.xsd"/>
            </fileset>
        </copy>

        <copy file="${source.dir}/com/sun/faces/sunjsf.js"
              toDir="${build.classes.dir}/META-INF/resources/jsfri/scripts"/>
        <copy file="${build.generate.tld.dir}/html_basic.tld"
              toDir="${build.classes.dir}/META-INF"/>
        <copy file="${conf.share.dir}/jsf_core.tld"
              toDir="${build.classes.dir}/META-INF"/>
        <copy file="${conf.share.dir}/jsfri_extensions.tld"
              toDir="${build.classes.dir}/META-INF"/>
        <copy file="${conf.share.dir}/mojarra_ext.tld"
              toDir="${build.classes.dir}/META-INF"/>
        <copy file="conf/xslt/jsf1_0-1_1toSchema.xsl"
              toDir="${build.classes.dir}/com/sun/faces"/>
        <copy file="${conf.share.dir}/com.sun.faces.spi.injectionprovider"
              toDir="${build.classes.dir}/META-INF/services"/>

    </target>

    <target name="clean"
            description="Clean build and distribution directories">        
        <ant antfile="build-tests.xml" target="remove.tstamp"/>
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${impl.test.results.dir}"/>
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
            <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
        </delete>
        <delete file="jsf-${impl.version}.zip"/>
        <delete file="jsf-${impl.version}_src.zip"/>               
        <ant dir="${basedir}/systest" inheritall="false" target="clean"/>        
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="clean"/>     
         <delete dir="${tools.dir}/build"/>
    </target>

    <target name="all" depends="clean,prepare,compile"
            description="Clean and compile all components"/>

    <!-- Create the source distribution -->
    <target name="ri.source">
        <zip destfile="${dist.dir}/jsf-ri-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
                        prefix="jsf-ri-src-${impl.version}"/>
            <zipfileset dir="${source.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/src"/>
            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/test"/>
            <zipfileset dir="${basedir}"
                        includes="conf/** web/**"
                        prefix="jsf-ri-src-${impl.version}"/>
        </zip>
    </target>


    <target name="dist" depends="jars" description="Build distribution files">      

        <mkdir dir="${dist.dir}"/>

        <antcall target="tlddocs"/>

        <!-- Create the binary distribution -->
        <zip destfile="${dist.dir}/jsf-ri-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="lib/**,tlddocs/**"
                        prefix="jsf-ri-${impl.version}"/>
        </zip>

        <!-- Create a buildable source distribution -->
        <zip destfile="${dist.dir}/jsf-ri-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
                        prefix="jsf-ri-src-${impl.version}"/>
            <zipfileset dir="${source.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/src"/>

            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/test"/>
            <zipfileset dir="${basedir}/systest"
                        excludes="**/CVS/**"
                        prefix="jsf-ri-src-${impl.version}/systest"/>            
        </zip>
        <antcall target="ri.source"/>

    </target>

    <target name="tlddocs">                
        <java fork="true" jar="${tlddoc.jar}">
            <arg line="-d ${build.dir}/tlddocs"/>
            <arg line="-windowtitle jsf-ri-${spec.version}"/>
            <arg value="${build.generate.tld.dir}/html_basic.tld"/>
            <arg value="${conf.share.dir}/jsf_core.tld"/>
        </java>
    </target>

    <target name="compile.test" depends="prepare,compile"
            description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>

    </target>

    <target name="test"
            depends="init.test,run.junit.test,run.cactus.test,run.systest,run.systest-per-webapp"
            description="Run all unit and system tests"/>

    <target name="init.test">
        <mkdir dir="${impl.test.results.dir}"/>
    </target>

    <target name="run.systest" description="Run system tests"
            depends="init.test">              
        <ant dir="${basedir}/systest" inheritall="false" target="test"/>        
    </target>

    <target name="run.systest-per-webapp"
            description="Run per-webapp system tests"
            depends="init.test,compile.test">
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="test"/>
        <ant dir="${basedir}/systest-per-webapp" inheritall="false"
             target="remove"/>
    </target>


    <target name="run.junit.test" depends="init.test,compile.test"
            description="Run unit tests not requiring cactus">
        <ant antfile="build-tests.xml" target="run.test"/>
    </target>

    <target name="run.cactus.test" depends="init.test,compile.test"
            description="Run unit tests requiring cactus">
        <ant antfile="build-tests.xml" target="execute.cactus.tests"/>
    </target>

    <target name="force.run.cactus.test" depends="init.test,compile.test"
            description="Run unit tests requiring cactus, forcing reinstall">
        <ant antfile="build-tests.xml" target="force.execute.cactus.tests"/>
    </target>   

    <target name="prepare.test.webapp">
        <echo>Invoking target prepare.test.webapp</echo>
        <ant antfile="build-tests.xml" target="prepare.test.webapp"/>
    </target>

    <!-- 
         =================================================================== 
           Create the jars
         =================================================================== 
    -->

    <target name="jars" depends="compile">
        <unjar dest="${build.classes.dir}">
            <fileset dir="${local.lib.dir}"
                     includes="jsf-facelets-2.0-SNAPSHOT.jar"/>
        </unjar>

        <copy file="${basedir}/mojarra-jsf-impl.bnd" tofile="tmp.bnd"/>
        <replace file="tmp.bnd"
                 token="@spec.version@"
                 value="${spec.version}"/>
        <replace file="tmp.bnd"
                 token="@impl.name@"
                 value="${impl.name}"/>
        <replace file="tmp.bnd"
                 token="@impl.version@"
                 value="${impl.version}"/>
        <if>
            <equals arg1="${build.type}" arg2=""/>
            <then>
                <replace file="tmp.bnd"
                         token="@osgi.version@"
                         value="${impl.version.number}"/>
            </then>
            <else>
                <replace file="tmp.bnd"
                         token="@osgi.version@"
                         value="${impl.version.number}-${build.type}"/>
            </else>
        </if>
        <replace file="tmp.bnd"
                 token="@extension.name@"
                 value="com.sun.faces"/>
        <jsf.osgi.jar jarfile="${build.dir}/lib/${name}.jar"
                      bndfile="tmp.bnd"
                      basedir="${build.classes.dir}"
                      extension-name="com.sun.faces"/>
        <delete file="tmp.bnd"/>
    </target>

    <target name="main" depends="update,jars"/>

    <target name="create.runtime.config">
<!--    in="${build.dir}/classes/com/sun/faces/standard-html-renderkit.xml"-->
        <xslt in="${api.dir}/doc/standard-html-renderkit.xml" 
              out="merged.xml"
              style="conf/xslt/merge-config.xsl">
        </xslt>
        <replace file="${basedir}/merged.xml">
            <replacetoken><![CDATA[xmlns:jsf="http://java.sun.com/xml/ns/javaee"]]></replacetoken>
            <replacevalue><![CDATA[]]></replacevalue>
        </replace>
        <replace file="${basedir}/merged.xml">
            <replacetoken><![CDATA[ >]]></replacetoken>
            <replacevalue><![CDATA[>]]></replacevalue>
        </replace>
        <xslt in="${basedir}/merged.xml"
              out="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml"
              style="conf/xslt/prune-tool-data.xsl">
        </xslt>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]></replacetoken>
        </replace>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[ >]]></replacetoken>
            <replacevalue><![CDATA[>]]></replacevalue>
        </replace>
        <replace file="${build.dir}/classes/com/sun/faces/jsf-ri-runtime.xml">
            <replacetoken><![CDATA[<faces-config>]]></replacetoken>
            <replacevalue><![CDATA[
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
    version="2.0">]]>
            </replacevalue>
        </replace>
        <delete file="${basedir}/merged.xml"/>
    </target>

    <!--
         ===================================================================
           Temporary Testing Targets
         ===================================================================
    -->
<target name="push-to-maven-prepare">
  <taskdef resource="maven-repository-importer.properties">
    <classpath>
      <pathelement path="${maven.repository.importer.jar}" />
    </classpath>
  </taskdef>

  <!-- Create the source distribution -->
  <mkdir dir="${dist.dir}" />
  <jar destfile="${dist.dir}/${name}-sources-${impl.version}.zip">
      <zipfileset dir="${basedir}"
               includes="LICENSE-APACHE.txt,LICENSE.TXT,THIRDPARTYLICENSEREADME.txt"/>
      <zipfileset dir="${source.dir}"
               excludes="**/CVS/**"/>
      <zipfileset dir="${build.generate.dir}"
               excludes="**/CVS/**,conf/**,last-generation"/>
  </jar>

  <delete dir="${build.dir}/maven-repo" /><!-- clean it -->
  <maven-repository-importer destdir="${build.dir}/maven-repo" version="${snapshot.version}">
    <artifact jar="${build.dir}/lib/jsf-impl.jar"  pom="jsf-impl-pom.xml" srczip="${dist.dir}/${name}-sources-${impl.version}.zip"/>
  </maven-repository-importer>
</target>

<target name="push-to-maven" depends="push-to-maven-prepare">
  <!-- import to CVS-->
  <tstamp />
  <echo>importing to CVS...</echo>
  <cvs dest="${build.dir}/maven-repo">
    <commandline>
      <argument value="-d:pserver:${user.name}@cvs.dev.java.net:/cvs" />
      <argument line="-z9 import -ko -W *.jar -kb -m" />
      <argument value="deploying new jars to the java.net maven repository" />

      <argument value="javaserverfaces-sources/repo" />
      <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}" />
    </commandline>
  </cvs>
</target>

   
    
</project>
