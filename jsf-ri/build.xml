<?xml version="1.0"?>

<!--
 Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->


<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">

  <property name="Name" value="JavaServer Faces RI"/>
  <property name="name" value="jsf-ri"/>
  <property name="version" value="20030707"/>

<!-- ************ Per user local properties ******************************* -->

  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->
  <property environment="myenv" />


<!-- ************ Where are we building into? ***************************** -->

  <!-- the root of our tomcat -->

  <!-- The base directory for compilation targets -->
  <property name="build.home" value="${basedir}/build"/>

  <!-- The base directory for the JSF APIs -->
  <property name="jsf-api.home" value ="../jsf-api"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home" value="${basedir}/dist"/>

  <!-- The base directory for component sources -->
  <property name="source.home" value="${basedir}/src"/>

  <!-- The base directory for component tests -->
  <property name="test.home" value="${basedir}/test"/>

  <!-- The base directory for dependent jars -->
  <property name="lib.home" value="${basedir}/lib"/>

  <!-- The base directory for executable scripts -->
  <property name="bin.home" value="${basedir}/etc/bin"/>

  <!-- The home directory for Ant -->
  <property name="ant.home" value="${basedir}/lib"/>

  <!-- Name of ultra-simple web-app -->
  <property name="basic.name"  value="basic"/>


  <!-- ************ Dependencies **** *************************************** -->

  <!-- The locations of necessary jar files -->
  <property name="mozutil.jar" value="${lib.home}/mozutil.jar"/>
  <property name="servlet.jar" value="${tomcat.home}/common/lib/servlet-api.jar"/>
  <property name="jsp.jar" value="${tomcat.home}/common/lib/jsp-api.jar"/>
  <property name="catalina-ant.jar" value="${tomcat.home}/server/lib/catalina-ant.jar"/>
  <property name="xerces.jar" value="${tomcat.home}/jaxp-1.2.2/lib/endorsed/xercesImpl.jar"/>
  <property name="commons-logging.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-logging.jar"/>
  <property name="commons-digester.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-digester.jar"/>
  <property name="commons-beanutils.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-beanutils.jar"/>
  <property name="commons-collections.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-collections.jar"/>
  <property name="jstl.jar" 
            value="${tomcat.home}/jstl/lib/jstl.jar"/>
  <property name="standard.jar" 
            value="${tomcat.home}/jstl/lib/standard.jar"/>
  <property name="jsf-api.jar" value="${jsf-api.home}/build/lib/jsf-api.jar"/>
  <property name="jsf-api.dtd" value="${jsf-api.home}/build/lib/web-facesconfig_1_0.dtd"/>

<!-- ************ Compiler Defaults *************************************** -->

  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug" value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation" value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize" value="false"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp.jar}"/> 
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${jstl.jar}"/>
  </path>

  <path id="catalina-ant.classpath">
    <pathelement location="${catalina-ant.jar}"/>
  </path>

  <!-- Custom Tomcat Integration -->
  <taskdef  name="install"  classname="org.apache.catalina.ant.InstallTask">
      <classpath refid="catalina-ant.classpath" />
  </taskdef>
  <taskdef  name="list"     classname="org.apache.catalina.ant.ListTask">
      <classpath refid="catalina-ant.classpath" />
  </taskdef>    
  <taskdef  name="reload"   classname="org.apache.catalina.ant.ReloadTask">
      <classpath refid="catalina-ant.classpath" />
  </taskdef>
  <taskdef  name="remove"   classname="org.apache.catalina.ant.RemoveTask">
      <classpath refid="catalina-ant.classpath" />
  </taskdef>
  <property name="context.path" value="/basic"/>
  <property name="url"      value="http://localhost:8080/manager"/>


    <!-- Directory where core struts library configurations files are stored -->
    <property name="conf.share.dir" value="conf/share"/>


<!-- ************ Executable Targets ************************************** -->

  <!-- 
       ===================================================================
         Convenience target: cvs update              
       =================================================================== 
  -->
  <target name="cvsupdate">
    <cvs command="update -d -P"/>
  </target>

  <!-- 
       ===================================================================
         Convenience target: pull.clean.build
       =================================================================== 
  -->
  <target name="pull.clean.build" depends="cvsupdate,clean,main">
  </target>


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${Name} ${version} --------"/>
  </target>

  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/bin"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/classes/META-INF"/>
    <mkdir dir="${build.home}/javadocs"/>
    <mkdir dir="${build.home}/lib"/>
    <copy file="${conf.share.dir}/html_basic.tld"
         toDir="${build.home}/classes/META-INF"/>
    <copy file="${conf.share.dir}/jsf_core.tld"
         toDir="${build.home}/classes/META-INF"/>
    <!-- unjar mozutil to classes, so we don't have to expose it -->
    <unjar src="${mozutil.jar}" dest="${build.home}/classes"/>
  </target>

  <target name="compile" depends="prepare"
   description="Just compile the classes">
    <!-- Run javac through everything -->
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/classes">
        <fileset dir="${source.home}" includes="**/*.properties"/>
    </copy>
    <copy todir="${build.home}/classes">
        <fileset dir="${source.home}" includes="**/*.xml"/>
    </copy>
    <copy  file="${jsf-api.dtd}"
          todir="${build.home}/classes/com/sun/faces/config"/>

    </target>

  <target name="clean" 
   description="Clean build and distribution directories">
    <ant antfile="build-tests.xml" target="safe.remove"/>
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
    <delete> 
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
    </delete>
    <delete file="jsf-${version}.zip"/>
    <delete file="jsf-${version}_src.zip"/>
    <delete  dir="${tomcat.home}/jsf-${version}/lib" />
    <ant dir="${basedir}/systest" inheritall="false" target="safe.remove"/>  
    <ant dir="${basedir}/systest" inheritall="false" target="clean"/>  
  </target>

  <target name="all" depends="clean,prepare,compile,build.basic.war"
   description="Clean and compile all components"/>

  <!-- Create the source distribution -->
  <target name="ri.source">
    <zip     destfile="${dist.home}/jsf-ri-src-${version}.zip">
      <zipfileset dir="${basedir}"
             includes="build.xml build-tests.xml README COPYRIGHT LICENSE*.*"
               prefix="jsf-ri-src-${version}"/>
      <zipfileset dir="${source.home}"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/src"/>
      <zipfileset dir="${test.home}"
             excludes="**/CVS/**"
               prefix="jsf-ri-src-${version}/test"/>
      <zipfileset dir="${basedir}"
             includes="conf/** web/**"
               prefix="jsf-ri-src-${version}"/>
    </zip>
  </target>


  <target name="dist" depends="jars" description="Build distribution files">
    <mkdir dir="${dist.home}"/>

    <!-- Create the binary distribution -->
    <zip     destfile="${dist.home}/jsf-ri-${version}.zip">
      <zipfileset dir="${build.home}"
             includes="lib/**"
               prefix="jsf-ri-${version}"/>
    </zip>

    <antcall target="ri.source"/>
    
  </target>

    <target name="compile.test" depends="prepare,compile"
     description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>
    
    </target>

    <target name="test" depends="run.junit.test,run.cactus.test,run.systest"
     description="Run all unit and system tests">
    </target>

    <target name="run.systest" description="Run system tests">
      <ant dir="${basedir}/systest" inheritall="false" target="safe.remove"/>
      <ant dir="${basedir}/systest" inheritall="false" target="install"/>
      <ant dir="${basedir}/systest" inheritall="false" target="test"/>
      <ant dir="${basedir}/systest" inheritall="false" target="remove"/>
    </target>

    <target name="run.junit.test" depends="compile.test"
     description="Run unit tests not requiring cactus">
        <ant antfile="build-tests.xml" target="run.test"/>
    </target>

    <target name="run.cactus.test" depends="compile.test,jars"
     description="Run unit tests requiring cactus">
        <ant antfile="build-tests.xml" target="execute.cactus.tests"/>
    </target>


    <!-- builds"basic" sample app -->
    <target name="build.basic.war" depends="prepare,compile,jars,compile.basic.sample" >
     <!-- name of the war file -->
     <property name="dist.war"  value="${basic.name}.war"/>

     <mkdir  dir="${dist.home}/${basic.name}"/>

     <!-- copy basic directory under dist.home -->
    <copy todir="${dist.home}/${basic.name}">
      <fileset dir="${basedir}/web/${basic.name}" />
    </copy>

    <!-- copy all the classes under basic package -->
    <copy todir="${dist.home}/${basic.name}">
      <fileset dir="${build.home}/${basic.name}"/>
    </copy>

    <!-- copy dependent libs -->
    <copy  file="${commons-beanutils.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons-collections.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons-digester.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons-logging.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${standard.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${jstl.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>

    <copy file="${jsf-api.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy file="${build.home}/lib/${name}.jar"  todir="${dist.home}/${basic.name}/WEB-INF/lib"/>

    <!-- create dummy JAR containing only a configuration resource -->
    <jar jarfile="${dist.home}/${basic.name}/WEB-INF/lib/basic-dummy.jar"
         basedir="conf/basic"/>

    <!-- create a war file for distribution -->
    <jar jarfile="${dist.home}/${dist.war}"
         basedir="${dist.home}/${basic.name}"/> 

  </target>

  <target name="compile.basic.sample"
          description="Compile java files in the sample app named basic.name">
    <property name="basic.name"  value="basic"/>
    <mkdir dir="${build.home}/${basic.name}/WEB-INF/classes"/>
    <javac  srcdir="${basedir}/web/${basic.name}/WEB-INF/src"
           destdir="${build.home}/${basic.name}/WEB-INF/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/${basic.name}/WEB-INF/classes">
        <fileset dir="${basedir}/web/${basic.name}/WEB-INF/src"
                 includes="**/*.properties"/>
    </copy>
  </target>

  <!-- 
       =================================================================== 
         Create the jars
       =================================================================== 
  -->
  <target name="jars" depends="compile">
    <jar jarfile="${build.home}/lib/${name}.jar" 
         basedir="${build.home}/classes" > 
         <manifest>
          <attribute name="Specification-Title" value="JavaServer Faces"/>
          <attribute name="Specification-Version" value="1.0"/>
          <attribute name="Implementation-Title" value="'${name}': ${Name}"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc."/>
          <attribute name="Implementation-Vendor-Id" value="com.sun"/>
          <attribute name="Extension-Name" value="com.sun.faces"/>
        </manifest>
    </jar>

  </target>

<!--
       ===================================================================
         Tomcat integration targets
       ===================================================================
  -->

  <target name="install" depends="build.basic.war"
   description="Install webapp on Tomcat">
    <echo message="${dist.home}"/>
    <echo message="${basic.name}"/>
    <install url="${url}" username="${username}" password="${password}"
            path="${context.path}"
             war="file://${dist.home}/basic.war"/>
  </target>

  <target name="list"
   description="List installed webapps on Tomcat">
    <list url="${url}" username="${username}" password="${password}"/>
  </target>

  <target name="reload" depends="build.basic.war"
   description="Reload this webapp on Tomcat">
    <reload url="${url}" username="${username}" password="${password}"
            path="${context.path}"/>
  </target>

  <target name="remove"
   description="Remove this webapp from Tomcat">
    <remove url="${url}" username="${username}" password="${password}"
            path="${context.path}"/>
  </target>

  <target name="deploy.tomcat" depends="build.basic.war"
   description="Deploy the basic.war to tomcat">
     <copy file="${dist.home}/${dist.war}"
       toDir="${tomcat.home}/webapps"/>

  </target>

  <target name="main" depends="prepare,compile,jars"/>

</project>
