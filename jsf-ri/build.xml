<?xml version="1.0"?>

<!--
 Copyright 2002 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->


<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">

  <property name="Name" value="JSF RI"/>
  <property name="name" value="jsf-ri"/>
  <property name="version" value="20021001"/>

<!-- ************ Per user local properties ******************************* -->

  <property file="${user.home}/build.properties"/>   <!-- User local        -->
  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->
  <property environment="myenv" />


<!-- ************ Where are we building into? ***************************** -->

  <!-- the root of our tomcat -->
  <property name="tomcat.home" value="${myenv.JWSDP_HOME}"/>

  <!-- The base directory for compilation targets -->
  <property name="build.home" value="${basedir}/build"/>

  <!-- The base directory for the JSF APIs -->
  <property name="jsf.api.home" value ="../jsf-api"/>

  <!-- The base directory for the JSF DEMOs -->
  <property name="jsf.demo.home" value ="../jsf-demo"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home" value="${basedir}/dist"/>

  <!-- The base directory for component sources -->
  <property name="source.home" value="${basedir}/src"/>

  <!-- The base directory for dependent jars -->
  <property name="lib.home" value="${basedir}/lib"/>

  <!-- The base directory for executable scripts -->
  <property name="bin.home" value="${basedir}/etc/bin"/>

  <!-- The home directory for Ant -->
  <property name="ant.home" value="${basedir}/lib"/>

  <!-- Application name to deploy under tomcat -->
  <property name="app.name"       value="fruitstand"/>
 
  <!-- Directory name to deploy app.name under tomcat -->
  <property name="deploy.home"  value="${tomcat.home}/webapps/${app.name}"/>

  <!-- Name of ultra-simple web-app -->
  <property name="basic.name"  value="basic"/>

  <!-- Name of cardemo web-app -->
  <property name="cardemo.name"  value="cardemo"/>

  <!-- Directory name to deploy app.name under tomcat -->
  <property name="basic.home"  value="${tomcat.home}/webapps/${basic.name}"/>

  <property name="cardemo.home"  value="${tomcat.home}/webapps/${cardemo.name}"/>

  <property name="spec.pdf"  value="${basedir}/docs/JSF_LATEST.pdf"/>


  <!-- ************ Dependencies **** *************************************** -->

  <!-- The locations of necessary jar files -->
  <property name="mozutil.jar" value="${lib.home}/mozutil.jar"/>
  <property name="servlet.jar" value="${lib.home}/servlet.jar"/>
  <property name="xerces.jar" value="${lib.home}/xerces.jar"/>
  <property name="commons.beanutils.jar"
            value="${lib.home}/commons-beanutils.jar"/>
  <property name="commons.collections.jar" 
            value="${lib.home}/commons-collections.jar"/>
  <property name="commons.logging.jar" 
            value="${lib.home}/commons-logging.jar"/>
  <property name="commons.digester.jar" 
            value="${lib.home}/commons-digester.jar"/>
  <property name="jsf-api.jar" value="${jsf.api.home}/build/lib/jsf-api.jar"/>

<!-- ************ Compiler Defaults *************************************** -->

  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug" value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation" value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize" value="false"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${commons.beanutils.jar}"/>
    <pathelement location="${commons.digester.jar}"/>
    <pathelement location="${commons.logging.jar}"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${jstl.jar}"/>
  </path>


    <!-- Directory where core struts library configurations files are stored -->
    <property name="conf.share.dir" value="conf/share"/>


<!-- ************ Executable Targets ************************************** -->

  <!-- 
       ===================================================================
         Convenience target: cvs update              
       =================================================================== 
  -->
  <target name="cvsupdate">
    <cvs command="update -d -P"/>
  </target>

  <!-- 
       ===================================================================
         Convenience target: pull.clean.build
       =================================================================== 
  -->
  <target name="pull.clean.build" depends="cvsupdate,clean,main">
  </target>


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${Name} ${version} --------"/>
  </target>

  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/bin"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/classes/META-INF"/>
    <mkdir dir="${build.home}/javadocs"/>
    <mkdir dir="${build.home}/lib"/>
    <copy file="${conf.share.dir}/html_basic.tld"
         toDir="${build.home}/classes/META-INF"/>
    <copy file="${conf.share.dir}/jsf_core.tld"
         toDir="${build.home}/classes/META-INF"/>
    <!-- unjar mozutil to classes, so we don't have to expose it -->
    <unjar src="${mozutil.jar}" dest="${build.home}/classes"/>
  </target>

  <target name="compile" depends="prepare"
   description="Just compile the classes">
    <!-- Run javac through everything -->
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/classes">
        <fileset dir="${source.home}" includes="**/*.properties"/>
    </copy>
    <copy todir="${build.home}/classes">
        <fileset dir="${source.home}" includes="**/*.xml"/>
    </copy>

    </target>

  <target name="clean" depends="clean.tomcat"
   description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
    <delete> 
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
    </delete>
    <delete file="jsf-${version}.zip"/>
    <delete file="jsf-${version}_src.zip"/>
  </target>

  <target name="clean.tomcat"
   description="Clean tomcat of anything we've put in it">
    <delete    dir="${deploy.home}"/>
    <delete    dir="${basic.home}"/>
    <delete    dir="${cardemo.home}"/>
  </target>

  <target name="create.source.bundle" depends="clean">

    <mkdir dir="${dist.home}"/>
    <copy todir="${dist.home}/jsf-api">
        <fileset dir="${jsf.api.home}"/>
    </copy>
    <copy todir="${dist.home}/jsf-ri">
        <fileset dir="${basedir}"/>
    </copy>

    <!-- create the zip file -->
    <zip zipfile="jsf-${version}_src.zip" basedir="${dist.home}" />

  </target>


  <target name="compile.sample" 
	  description="Compile java files in the sample app named app.name">
    <mkdir dir="${build.home}/${app.name}/WEB-INF/classes"/>
    <javac  srcdir="${basedir}/web/${app.name}/WEB-INF/src"
           destdir="${build.home}/${app.name}/WEB-INF/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/${app.name}/WEB-INF/classes">
        <fileset dir="${basedir}/web/${app.name}/WEB-INF/src" 
                 includes="**/*.properties"/>
    </copy>
  </target>

  <target name="build.war" depends="clean,prepare,compile,compile.sample,jars" >
     <!-- name of the war file -->
     <property name="dist.war"  value="${app.name}.war"/>
     <mkdir  dir="${dist.home}/${app.name}"/>

     <!-- copy app.name directory under dist.home -->
    <copy todir="${dist.home}/${app.name}">
      <fileset dir="${basedir}/web/${app.name}" />
    </copy>

    <!-- copy all the classes under ${app.name} package -->
    <copy todir="${dist.home}/${app.name}">
      <fileset dir="${build.home}/${app.name}"/>
    </copy>

    <mkdir dir="${dist.home}/${app.name}/WEB-INF/classes" />

    <!-- copy dependent libs -->
    <copy  file="${commons.beanutils.jar}" todir="${dist.home}/${app.name}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${dist.home}/${app.name}/WEB-INF/lib"/>
    <copy  file="${commons.digester.jar}" todir="${dist.home}/${app.name}/WEB-INF/lib"/>
    <copy  file="${commons.logging.jar}" todir="${dist.home}/${app.name}/WEB-INF/lib"/>

    <copy  file="${jsf-api.jar}"
           todir="${dist.home}/${app.name}/WEB-INF/lib"/>
    <copy  file="${build.home}/lib/${name}.jar"
           todir="${dist.home}/${app.name}/WEB-INF/lib"/>


    <!-- create a war file for distribution -->
    <jar jarfile="${dist.home}/${dist.war}"
         basedir="${dist.home}/${app.name}"/>
  </target>

  <!-- deploy the web-app under tomcat. tomcat_home needs to be set prior
       to running this target -->

  <target name="deploy.tomcat" depends="prepare,compile,compile.sample,clean.tomcat,jars">

    <!-- copy app.name directory to tomcat/webapps -->
    <copy todir="${deploy.home}">
      <fileset dir="${basedir}/web/${app.name}" />
    </copy>

    <!-- copy all the classes under ${app.name} package -->
    <copy todir="${deploy.home}">
      <fileset dir="${build.home}/${app.name}"/>
    </copy>

    <mkdir dir="${deploy.home}/WEB-INF/classes" />
    <!-- copy dependent libs to tomcat/libs -->
    <copy  file="${commons.beanutils.jar}" todir="${deploy.home}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${deploy.home}/WEB-INF/lib"/>
    <copy  file="${commons.digester.jar}" todir="${deploy.home}/WEB-INF/lib"/>
    <copy  file="${commons.logging.jar}" todir="${deploy.home}/WEB-INF/lib"/>
    <copy  file="${jsf-api.jar}" 
           todir="${deploy.home}/WEB-INF/lib"/>
    <copy  file="${build.home}/lib/${name}.jar"  
           todir="${deploy.home}/WEB-INF/lib"/>

  </target>

  <target name="deploy.tomcat.basic" depends="build.basic.war">
    <unjar  src="${dist.home}/basic.war" dest="${basic.home}"/>
  </target>

  <target name="deploy.tomcat.cardemo" depends="build.cardemo.war">
    <unjar  src="${dist.home}/cardemo.war" dest="${cardemo.home}"/>
  </target>

  <target name="all" depends="clean,prepare,compile,build.war,deploy.tomcat"
   description="Clean and compile all components"/>

  <target name="dist" depends="jars">
    <mkdir dir="${dist.home}"/>
    <mkdir dir="${dist.home}/example"/>
    <mkdir dir="${dist.home}/lib"/>

    <!-- Handle the top level files -->
    <copy file="README" todir="${dist.home}"/>
    <copy file="ReleaseNotes.html" todir="${dist.home}"/>
    <copy file="LICENSE.html" todir="${dist.home}"/>
    <copy file="LICENSE-APACHE.txt" todir="${dist.home}"/>
    <copy file="LICENSE-MOZILLA.txt" todir="${dist.home}"/>
    <copy file="${spec.pdf}" tofile="${dist.home}/JSF_${version}.pdf"/>

    <!-- Build the API Javadocs -->
    <ant dir="${jsf.api.home}" 
         antfile="${jsf.api.home}/build.xml" target="javadocs"/>
    <!-- Copy the API Javadocs to the dist -->
    <copy todir="${dist.home}/javadocs">
      <fileset dir="${jsf.api.home}/build/javadocs"/>
    </copy>

    <!-- copy the necessary libs -->
    <copy todir="${dist.home}/lib">
      <fileset dir="${lib.home}" includes="commons*.jar"/>
    </copy>
    <copy file="${jstl.jar}" todir="${dist.home}/lib"/>
    <copy file="${standard.jar}" todir="${dist.home}/lib"/>
    <copy file="${jsf-api.jar}" todir="${dist.home}/lib"/>
    <copy file="${build.home}/lib/${name}.jar" todir="${dist.home}/lib"/>
    <copy file="${conf.share.dir}/html_basic.tld" todir="${dist.home}/lib"/>
    <copy file="${conf.share.dir}/jsf_core.tld" todir="${dist.home}/lib"/>

    <!-- Build the demos from the jsf-demo repository -->
    <ant dir="${jsf.demo.home}" inheritAll="false"
         antfile="${jsf.demo.home}/build.xml" target="clean"/>
    <ant dir="${jsf.demo.home}" inheritAll="false" target="copyJarsToDemos"
         antfile="${jsf.demo.home}/build.xml" />

    <!-- copy the necessary examples -->
    <!-- PENDING(raj): include cardemo here -->
    <copy todir="${dist.home}/example/helloDuke">
      <fileset dir="${jsf.demo.home}/helloDuke"/>
    </copy>

    <copy todir="${dist.home}/example/guessNumber">
      <fileset dir="${jsf.demo.home}/guessNumber"/>
    </copy>

    <copy todir="${dist.home}/example/cardemo">
      <fileset dir="${jsf.demo.home}/cardemo"/>
    </copy>

    <!-- create the zip file -->
    <move todir="${basedir}/jsf-${version}">
      <fileset dir="dist"/>
    </move>
    <zip zipfile="jsf-${version}.zip">
      <fileset dir="${basedir}" 
               includes="jsf-${version}/**"/>
    </zip>
    <move todir="dist">
      <fileset dir="${basedir}/jsf-${version}"/>
    </move>


  </target>

  <target name="javadocs" 
          description="Create the API documentation">
    <javadoc packagenames="com.sun.*"
             sourcepath="${source.home}"
             destdir="${build.home}/javadocs"
             author="false"
             version="false"
             windowtitle="${Name} Generated Documentation"
             doctitle="${Name}"
             bottom="Copyright &#169; 2001 Sun Microsystems, Inc. All Rights Reserved.">
        <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

    <target name="compile.test" depends="prepare,compile"
     description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>
    
    </target>

    <target name="run.test" depends="run.junit.test,run.cactus.test"
     description="Run all unit tests">
    </target>

    <target name="run.junit.test" depends="compile.test"
     description="Run unit tests not requiring cactus">

        <ant antfile="build-tests.xml" target="run.test"/>
    
    </target>


    <target name="run.cactus.test" depends="compile.test,jars"
     description="Run unit tests requiring cactus">

        <ant antfile="build-tests.xml" target="test.tomcat.40"/>
    
    </target>

    <!-- builds"basic" sample app -->
    <target name="build.basic.war" depends="clean.tomcat,prepare,compile,jars,compile.basic.sample" >
     <!-- name of the war file -->
     <property name="dist.war"  value="${basic.name}.war"/>

     <mkdir  dir="${dist.home}/${basic.name}"/>

     <!-- copy basic directory under dist.home -->
    <copy todir="${dist.home}/${basic.name}">
      <fileset dir="${basedir}/web/${basic.name}" />
    </copy>

    <!-- copy all the classes under basic package -->
    <copy todir="${dist.home}/${basic.name}">
      <fileset dir="${build.home}/${basic.name}"/>
    </copy>

    <!-- copy dependent libs -->
    <copy  file="${commons.beanutils.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons.digester.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons.logging.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${standard.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${jstl.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>

    <copy file="${jsf-api.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy file="${build.home}/lib/${name}.jar"  todir="${dist.home}/${basic.name}/WEB-INF/lib"/>

    <!-- create a war file for distribution -->
    <jar jarfile="${dist.home}/${dist.war}"
         basedir="${dist.home}/${basic.name}"/>

    <copy file="${dist.home}/${dist.war}" toDir="${tomcat.home}/webapps"/>
  </target>

    <!-- builds"cardemo" sample app -->
    <target name="build.cardemo.war" depends="clean.tomcat,prepare,compile,jars,compile.cardemo.sample" >
     <!-- name of the war file -->
     <property name="dist.war"  value="${cardemo.name}.war"/>

     <mkdir  dir="${dist.home}/${cardemo.name}"/>

     <!-- copy cardemo.directory under dist.home -->
    <copy todir="${dist.home}/${cardemo.name}">
      <fileset dir="${basedir}/web/${cardemo.name}" />
    </copy>

    <!-- copy all the classes under cardemo package -->
    <copy todir="${dist.home}/${cardemo.name}">
      <fileset dir="${build.home}/${cardemo.name}"/>
    </copy>

    <!-- copy dependent libs -->
    <copy  file="${commons.beanutils.jar}" todir="${dist.home}/${cardemo.name}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${dist.home}/${cardemo.name}/WEB-INF/lib"/>
    <copy  file="${commons.digester.jar}" todir="${dist.home}/${cardemo.name}/WEB-INF/lib"/>
    <copy  file="${commons.logging.jar}" todir="${dist.home}/${cardemo.name}/WEB-INF/lib"/>
    <copy file="${jsf-api.jar}" todir="${dist.home}/${cardemo.name}/WEB-INF/lib"/>
    <copy file="${build.home}/lib/${name}.jar"  todir="${dist.home}/${cardemo.name}/WEB-INF/lib"/>

    <!-- create a war file for distribution -->
    <jar jarfile="${dist.home}/${dist.war}"
         basedir="${dist.home}/${cardemo.name}"/>

    <copy file="${dist.home}/${dist.war}" toDir="${tomcat.home}/webapps"/>

  </target>

  <target name="compile.basic.sample"
          description="Compile java files in the sample app named app.name">
    <property name="basic.name"  value="basic"/>
    <mkdir dir="${build.home}/${basic.name}/WEB-INF/classes"/>
    <javac  srcdir="${basedir}/web/${basic.name}/WEB-INF/src"
           destdir="${build.home}/${basic.name}/WEB-INF/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/${basic.name}/WEB-INF/classes">
        <fileset dir="${basedir}/web/${basic.name}/WEB-INF/src"
                 includes="**/*.properties"/>
    </copy>
  </target>

  <target name="compile.cardemo.sample"
          description="Compile java files in the sample app named app.name">
    <property name="cardemo.name"  value="cardemo"/>
    <mkdir dir="${build.home}/${cardemo.name}/WEB-INF/classes"/>
    <javac  srcdir="${basedir}/web/${cardemo.name}/WEB-INF/src"
           destdir="${build.home}/${cardemo.name}/WEB-INF/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/${cardemo.name}/WEB-INF/classes">
        <fileset dir="${basedir}/web/${cardemo.name}/WEB-INF/src"
                 includes="**/*.properties"/>
    </copy>
  </target>

  <!-- 
       =================================================================== 
         Create the jars
       =================================================================== 
  -->
  <target name="jars" depends="compile">
    <jar jarfile="${build.home}/lib/${name}.jar" 
         basedir="${build.home}/classes" > 
    </jar>

  </target>

  <!-- 
       =================================================================== 
         Issues list
       =================================================================== 
  -->
  <target name="issues"
   description="Generate outstanding issues list">
    <style basedir="docs"
           destdir="${build.home}"
         extension=".html"
             style="docs/ri-issues-summary.xsl"
          includes="ri-issues.xml"/>
    <move     file="${build.home}/ri-issues.html"
            tofile="${build.home}/ri-issues-summary.html"/>
    <style basedir="docs"
           destdir="${build.home}"
         extension=".html"
             style="docs/ri-issues-detail.xsl"
          includes="ri-issues.xml"/>
    <move     file="${build.home}/ri-issues.html"
            tofile="${build.home}/ri-issues-detail.html"/>
     <style basedir="${jsf.api.head.home}/doc"
           destdir="${build.home}"
         extension=".html"
             style="docs/api-issues-owners.xsl"
          includes="OutstandingIssues.xml"/>
     <move     file="${build.home}/OutstandingIssues.html"
            tofile="${build.home}/api-issues-owners.html"/>
  </target>



  <target name="main" depends="prepare,compile,jars"/>

</project>
