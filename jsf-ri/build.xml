<?xml version="1.0"?>

<!-- ************ JSF build file ************************************** -->

<project name="JSF-RI" default="main" basedir=".">

  <property name="Name" value="JSF RI"/>
  <property name="name" value="jsf-ri"/>
  <property name="version" value="pre-EA1"/>

<!-- ************ Per user local properties ******************************* -->

  <property file="${user.home}/build.properties"/>   <!-- User local        -->
  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->


<!-- ************ Where are we building into? ***************************** -->

  <!-- The base directory for compilation targets -->
  <property name="build.home" value="${basedir}/build"/>

  <!-- The base directory for the JSF APIs -->
  <property name="jsf.api.home" value ="../jsf-api"/>

  <!-- The base directory for distribution targets -->
  <property name="dist.home" value="${basedir}/dist"/>

  <!-- The base directory for component sources -->
  <property name="source.home" value="${basedir}/src"/>

  <!-- The base directory for dependent jars -->
  <property name="lib.home" value="${basedir}/lib"/>

  <!-- The base directory for executable scripts -->
  <property name="bin.home" value="${basedir}/etc/bin"/>

  <!-- The home directory for Ant -->
  <property name="ant.home" value="${basedir}/lib"/>

  <!-- Application name to deploy under tomcat -->
  <property name="app.name"       value="fruitstand"/>
 
  <!-- Directory name to deploy app.name under tomcat -->
  <property name="deploy.home"  value="${tomcat.home}/webapps/${app.name}"/>

  <!-- Name of ultra-simple web-app -->
  <property name="basic.name"  value="basic"/>

  <!-- Directory name to deploy app.name under tomcat -->
  <property name="basic.home"  value="${tomcat.home}/webapps/${basic.name}"/>


  <!-- ************ Dependencies **** *************************************** -->

  <!-- The locations of necessary jar files -->
  <property name="mozutil.jar" value="${lib.home}/mozutil.jar"/>
  <property name="servlet.jar" value="${lib.home}/servlet.jar"/>
  <property name="jsf-api.jar" value="${jsf.api.home}/build/lib/jsf-api.jar"/>

<!-- ************ Compiler Defaults *************************************** -->

  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug" value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation" value="false"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize" value="false"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}/classes"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${servlet.jar}"/>
  </path>


    <!-- Directory where core struts library configurations files are stored -->
    <property name="conf.share.dir" value="conf/share"/>


<!-- ************ Executable Targets ************************************** -->

  <!-- 
       ===================================================================
         Convenience target: cvs update              
       =================================================================== 
  -->
  <target name="cvsupdate">
    <cvs command="update -d -P"/>
  </target>

  <!-- 
       ===================================================================
         Convenience target: pull.clean.build
       =================================================================== 
  -->
  <target name="pull.clean.build" depends="cvsupdate,clean,main">
  </target>


  <target name="init"
   description="Initialize and evaluate conditionals">
    <echo message="-------- ${Name} ${version} --------"/>
  </target>

  <target name="prepare" depends="init"
   description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/bin"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${build.home}/javadocs"/>
    <mkdir dir="${build.home}/lib"/>
    <mkdir dir="${build.home}/library/classes/META-INF/tlds"/>
    <copy file="${conf.share.dir}/html_basic.tld"
         tofile="${build.home}/library/classes/META-INF/html_basic.tld"/>
    <!-- unjar mozutil to classes, so we don't have to expose it -->
    <unjar src="${mozutil.jar}" dest="${build.home}/classes"/>
  </target>

  <target name="compile" depends="prepare"
   description="Just compile the classes">
    <!-- Run javac through everything -->
    <javac  srcdir="${source.home}"
           destdir="${build.home}/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/classes">
        <fileset dir="${source.home}" includes="**/*.properties"/>
    </copy>

    </target>

  <target name="clean" depends="clean.tomcat"
   description="Clean build and distribution directories">
    <delete    dir="${build.home}"/>
    <delete    dir="${dist.home}"/>
    <delete> 
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="clean.tomcat"
   description="Clean tomcat of anything we've put in it">
    <delete    dir="${deploy.home}"/>
    <delete    dir="${basic.home}"/>
  </target>


  <target name="compile.sample" 
	  description="Compile java files in the sample app named app.name">
    <mkdir dir="${build.home}/${app.name}/WEB-INF/classes"/>
    <javac  srcdir="${basedir}/web/${app.name}/WEB-INF/src"
           destdir="${build.home}/${app.name}/WEB-INF/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/${app.name}/WEB-INF/classes">
        <fileset dir="${basedir}/web/${app.name}/WEB-INF/src" 
                 includes="**/*.properties"/>
    </copy>
  </target>

  <target name="build.war" depends="clean,prepare,compile,compile.sample" >
     <!-- name of the war file -->
     <property name="dist.war"  value="${app.name}.war"/>
     <mkdir  dir="${dist.home}/${app.name}"/>

     <!-- copy app.name directory under dist.home -->
    <copy todir="${dist.home}/${app.name}">
      <fileset dir="${basedir}/web/${app.name}" />
    </copy>

    <!-- copy all the classes under ${app.name} package -->
    <copy todir="${dist.home}/${app.name}">
      <fileset dir="${build.home}/${app.name}"/>
    </copy>

    <!-- copy all the classes under com.sun.faces package -->
    <copy todir="${dist.home}/${app.name}/WEB-INF/classes">
      <fileset dir="${build.home}/classes" excludes="**/CVS/**" />
    </copy>
    
    <!-- copy all the classes under javax.faces package -->
    <!-- <copy  file="${jsf-api.jar}" todir="${dist.home}/${app.name}/WEB-INF/classes> -->
    <unjar src="${jsf-api.jar}" dest="${dist.home}/${app.name}/WEB-INF/classes"/>

    <!-- copy dependent libs -->
    <copy  file="${commons.beanutils.jar}" todir="${dist.home}/${app.name}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${dist.home}/${app.name}/WEB-INF/lib"/>
    <!-- copy tld file -->
    <copy file="${conf.share.dir}/html_basic.tld"
         toDir="${dist.home}/${app.name}/WEB-INF"/>

    <!-- create a war file for distribution -->
    <jar jarfile="${dist.home}/${dist.war}"
         basedir="${dist.home}/${app.name}"/>
  </target>

  <!-- deploy the web-app under tomcat. tomcat_home needs to be set prior
       to running this target -->

  <target name="deploy.tomcat" depends="prepare,compile,compile.sample">

    <!-- copy app.name directory to tomcat/webapps -->
    <copy todir="${deploy.home}">
      <fileset dir="${basedir}/web/${app.name}" />
    </copy>

    <!-- copy all the classes under ${app.name} package -->
    <copy todir="${deploy.home}">
      <fileset dir="${build.home}/${app.name}"/>
    </copy>

    <mkdir dir="${deploy.home}/WEB-INF/classes" />
    <!-- copy all classes from com.sun.faces package -->
    <copy todir="${deploy.home}/WEB-INF/classes">
      <fileset dir="${build.home}/classes" excludes="**/CVS/**" />
    </copy>
    <copy file="${conf.share.dir}/html_basic.tld"
         toDir="${deploy.home}/WEB-INF"/>

    
    <!-- copy all classes from javax.api package -->

    <!-- PENDING(edburns): FFJ can't debug into jar files, so we unjar
    into classes directory -->
    <!-- <copy  file="${jsf-api.jar}" todir="${deploy.home}/WEB-INF/lib"/> -->
    <unjar src="${jsf-api.jar}" dest="${deploy.home}/WEB-INF/classes"/>
    <!-- copy dependent libs to tomcat/libs -->
    <copy  file="${commons.beanutils.jar}" todir="${deploy.home}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${deploy.home}/WEB-INF/lib"/>
  </target>

  <target name="all" depends="clean,prepare,compile,build.war,deploy.tomcat"
   description="Clean and compile all components"/>

  <target name="dist">
    <mkdir dir="${dist.home}"/>
    <mkdir dir="${dist.home}/bin"/>
    <mkdir dir="${dist.home}/lib"/>

    <copy    todir="${dist.home}/bin">
      <fileset dir="${build.home}/bin"/>
    </copy>

    <chmod perm="+x" file="${dist.home}/bin/wsdlp.sh"/>
    <chmod perm="+x" file="${dist.home}/bin/xrpcc.sh"/>

    <copy    todir="${dist.home}/lib">
      <fileset dir="${build.home}/lib"/>
    </copy>
  </target>

  <target name="javadocs" 
          description="Create the API documentation">
    <javadoc packagenames="com.sun.*"
             sourcepath="${source.home}"
             destdir="${build.home}/javadocs"
             author="false"
             version="false"
             windowtitle="${Name} Generated Documentation"
             doctitle="${Name}"
             bottom="Copyright &#169; 2001 Sun Microsystems, Inc. All Rights Reserved.">
        <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

    <target name="compile.test" depends="prepare,compile"
     description="Run unit tests">

        <ant antfile="build-tests.xml" target="compile.test"/>
    
    </target>

    <target name="run.test" depends="run.junit.test,run.cactus.test"
     description="Run all unit tests">
    </target>

    <target name="run.junit.test" depends="compile.test"
     description="Run unit tests not requiring cactus">

        <ant antfile="build-tests.xml" target="run.test"/>
    
    </target>


    <target name="run.cactus.test" depends="compile.test"
     description="Run unit tests requiring cactus">

        <ant antfile="build-tests.xml" target="test.tomcat.40"/>
    
    </target>

    <!-- builds"basic" sample app -->
    <target name="build.basic.war" depends="clean,prepare,compile,compile.basic.sample" >
     <!-- name of the war file -->
     <property name="dist.war"  value="${basic.name}.war"/>

     <mkdir  dir="${dist.home}/${basic.name}"/>

     <!-- copy basic directory under dist.home -->
    <copy todir="${dist.home}/${basic.name}">
      <fileset dir="${basedir}/web/${basic.name}" />
    </copy>

    <!-- copy all the classes under basic package -->
    <copy todir="${dist.home}/${basic.name}">
      <fileset dir="${build.home}/${basic.name}"/>
    </copy>

    <!-- copy all the classes under com.sun.faces package -->
    <copy todir="${dist.home}/${basic.name}/WEB-INF/classes">
      <fileset dir="${build.home}/classes" excludes="**/CVS/**" />
    </copy>
   
    <!-- copy all the classes under javax.faces package -->
    <!-- <copy  file="${jsf-api.jar}" todir="${dist.home}/${basic.name}/WEB-INF/classes> -->
    <unjar src="${jsf-api.jar}" dest="${dist.home}/${basic.name}/WEB-INF/classes"/>

    <!-- copy dependent libs -->
    <copy  file="${commons.beanutils.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>
    <copy  file="${commons.collections.jar}" todir="${dist.home}/${basic.name}/WEB-INF/lib"/>

    <!-- copy tld file -->
    <copy file="${conf.share.dir}/html_basic.tld"
         toDir="${dist.home}/${basic.name}/WEB-INF"/>

    <!-- create a war file for distribution -->
    <jar jarfile="${dist.home}/${dist.war}"
         basedir="${dist.home}/${basic.name}"/>
  </target>

  <target name="compile.basic.sample"
          description="Compile java files in the sample app named app.name">
    <property name="basic.name"  value="basic"/>
    <mkdir dir="${build.home}/${basic.name}/WEB-INF/classes"/>
    <javac  srcdir="${basedir}/web/${basic.name}/WEB-INF/src"
           destdir="${build.home}/${basic.name}/WEB-INF/classes"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.home}/${basic.name}/WEB-INF/classes">
        <fileset dir="${basedir}/web/${basic.name}/WEB-INF/src"
                 includes="**/*.properties"/>
    </copy>
  </target>


  <target name="main" depends="prepare,compile"/>

</project>
