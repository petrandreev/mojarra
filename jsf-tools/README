Requirement:
===========

Today, the Faces reference implementation (RI) maintains a tag library descriptor (tld)
file - html_basic.tld - for all component tags for the html renderkit.  This file
is created and maintained manually.  We currently incorporate some meta data
about html components/renderers in standard-html-renderkit.xml.  We can use this meta data
to automatically generate html_basic.tld, as well as the tag handler classes.
The overall requirement is to have the ability to generate a tld file and tag handler
classes from any faces-config file with "component"/"renderer" definitions as outlined
by the Faces DTD.


The following outlines changes and additions for the tag library definition (tld) generation
design.

Changes:
=======

We will follow a similar model as used for generating the Html component classes.


ConfigParser
------------
 o Some addiitonal data structures are used:

   Map renderersByComponentType - used to help determine if there any renderers associated 
   with a component type.

   Map componentsByComponentType - used to help retrieving component properties (attributes).

   List componentsWithNoRenderer - contains a list of component types that have no associated 
   renderer.  For example: SelectItem/SelectItems ..etc...


 o Component digester rule was added, along with matching patterns. 

 o Additional patterns were added for the storage of the attribute "descripton" and
   "tag-attribute" elements.

 o Additional helper (wrapper) methods were added to get renderer/component attribute
   information - mainly to keep Config* code out of the "generator" classes.

ConfigAttribute
---------------
 o Added support for description / tag-attribute elements.

ConfigRenderer
--------------
ConfigAttribute now contains two additional pieces of information (description/tag-attribute);
ConfigRenderer HashMap "attributes" now contains key value pairs of:

    attributeName | ConfigAttribute 

The wrapper methods (for example "getAttributeClass") are used to return attribute information,
given an attribute name.
ConfigRenderer now contains a list of component types as well.


GenerateConcreteClasses
-----------------------
Minor modifications were needed to use the wrapper methods for retrieving the attribute class.


Additions:
=========

ConfigComponent
---------------
Container object for component information.

ConfigComponents
----------------
Contains a Map of ConfigComponent(s), keyed by component type.

ConfigComponentType
-------------------
Contains the component type as well as a List of attribute names supported by this
component type.  this corresponds with the xml element patterns:

<supported-component-type>
  <component-type>InputText<component-type>
    <attribute-name>required<attribute-name>
    .
    .

--------------
GenerateTagLib
--------------
This class uses information in standard-html-renderkit.xml to produce html_basic.tld.
The file is created under "jsf-tools/build/generate/conf/share";  This is configurable
(changeable) in build.xml.

The generator uses "jsf-tools/TLD-TOP" as the top portion of the tld file.  This would be
everything from "xml version" up to and including the "validator" tag definition - essentially,
everything up until the start of the individual tag information.

Program Flow (for tld / tag handler generation:

 For each renderer type and for each component type for that renderer type:

   o the tag name is constructed.  
     For example: componentType="DataTable"  rendererType="Table"  tag name="data_table"
      
   o the tag class name is constructed.  This is just the tag class path (com.sun.faces.taglib.html_basic)
     + tag name (above) + "Tag".  The fully qualified tag class name for the example above would be:
       "com.sun.faces.taglib.html_basic.Data_TableTag"

   o the tag information is accumulated in a string buffer.  Namely:
     - name, tag-class, tei-class, body-content  
     NOTE: For now, tei-class, body-content values are predefined static string defaults, since
           they all have the same values (tei-class=""com.sun.faces.taglib.FacesTagExtraInfo",
           body-content="JSP");  If need be, the generator could read this information on a tag 
           by tag basis from a config file.

   o using the componentType & rendererType, see if there are a list of supported attribute names.
      These would be listed in standard-html-renderkit.xml as:

      <renderer>
        <renderer-type>Text</renderer-type>
        .
        .
        <attribute>readonly</attribute>
        .
        .
        <supported-component-type>
          <component-type>InputText</component-type>
          <attribute-name>disabled</attribute-name>
          <attribute-name>readonly</attribute-name>
          .
          .
        </supported-component-type>
        <supported-component-type>
          <component-type>OutputText</component-type>
          <attribute-name>rendered</attribute-name>
          <attribute-name>style</attribute-name>
          .
          .

      These "special" attribute names would be listed to identify which renderer dependent attributes 
      go with which component in the case where *one* renderer services multiple components.  For example - 
      "Text" renderer services both "InputText" and "OutputText";  This is a list of renderer dependent 
      attribute names for each component type.

      If there are a list of supported attribute names, then the attribute information is pulled
      from each component property (using each attribute name as a lookup key); 

      So the renderer dependent attributes are processed first.  Then the component properties are
      processed next.  Because of the html concrete components, we will have a full set of 
      component properties and some of them will overlap with the renderer dependent attributes.
      The tld/tag handler generation scheme looks for this and ensures that only one of these
      will be used in the generation.  So, essentially, component properties which do not overlap
      with renderer dependent attributes will be processed and used in the generation.
 

------
Design
------

There are special cases baked into generating the "html_basic" tld and tag handler classes. 
These special cases are most probably specific to the "html_basic" package.  The framework will
allow you to write your own tag library generation implementation specific to your genration needs. 

