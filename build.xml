<?xml version='1.0' encoding='UTF-8'?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License). You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the License at
 https://javaserverfaces.dev.java.net/CDDL.html or
 legal/CDDLv1.0.txt. 
 See the License for the specific language governing
 permission and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at legal/CDDLv1.0.txt.    
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 [Name of File] [ver.__] [Date]
 
 Copyright 2005 Sun Microsystems Inc. All Rights Reserved
-->


<!-- ************ JSF build file ************************************** -->

<project name="javaserverfaces" default="main" basedir=".">

    <!-- ************ Per user local properties ******************************* -->

    <property file="build.properties"/>
    <property environment="myenv"/>
    <import file="${jsf.build.home}/common/ant/common.xml"/>
    <property name="tasks.home" value="${myenv.TASKS_HOME}"/>
    <property name="dist.dir" value="${basedir}/dist"/>


    <property name="LICENSEFILE"
              value="${basedir}/legal/jsf-cddl/CDDLv1.0.txt"/>

    <!-- ************ Compiler Defaults *************************************** -->


    <!-- ************ Executable Targets ************************************** -->
    
    <macrodef name="call.modules">
        <attribute name="target"/>
        <sequential>
            <subant target="@{target}" inheritAll="false">
                <filelist dir="${api.dir}">
                    <file name="build.xml"/>
                </filelist>    
                <filelist dir="${impl.dir}">
                    <file name="build.xml"/>
                </filelist>              
            </subant>
        </sequential>
    </macrodef>

    <target name="clean"
            description="Clean build and distribution directories">
        <delete file="jsf-portlet.zip"/>
        <delete file="jsf-portlet_source.zip"/>
        <delete dir="${portlet.dir}/dist"/>
        <delete file="jsf-samples.zip"/>
        <delete dir="${basedir}/build"/>
        <delete dir="${dist.dir}"/>
        <call.modules target="clean"/>        
    </target>  
    
    <target name="main" description="Build API and RI">
        <call.modules target="main"/>
    </target>

    <target name="test" description="Run API, RI, Demo automated tests">
        <call.modules target="test"/>
    </target>
    
    <target name="test.with.container.refresh" 
            description="Stop the target container, deploy the build artifacts, restart the container and test">
        <container.stop/>
        <antcall target="container.deploy"/>
        <container.start/>
        <call.modules target="test"/>
    </target>
        


    <!-- Create the source distribution -->
    <target name="jsf.source">
        <zip destfile="${dist.dir}/javaserverfaces_source.zip">

            <zipfileset dir="${basedir}"
                        excludes="**/build.properties/**, **/CVS/**, **/build/**, **/dist/**, **/www/**, **/jsf-portlet/**,
          **/jsf-demo/**, **/test-sqe/**" prefix="javaserverfaces_sources"/>

        </zip>
    </target>

   <target name="prepare.build.java.net" description="Build distribution files"
           depends="main">
        
        <mkdir dir="${dist.dir}" />

        <ant dir="${demo.dir}" 
             antfile="build.xml"
             target="dist" 
             inheritAll="false"/>

        <copy file="${demo.dir}/jsf-${impl.version}.zip"
              tofile="${dist.dir}/javaserverfaces_binary.zip"/>
       
        <copy file="${demo.dir}/glassfish-jsf-${impl.version}.jar"
              todir="${dist.dir}"/>

        <delete file="${demo.dir}/glassfish-jsf-${impl.version}.jar"/>
        <delete file="${demo.dir}/jsf-${impl.version}.zip"/>

        <ant target="jsf.source"/>

   </target>

   <target name="build.javadocs.dist" depends="prepare.build.java.net">

        <!-- Create the javadocs distribution -->
        <zip destfile="${dist.dir}/jsf-javadocs-${impl.version}.zip">
            <zipfileset dir="${demo.dir}/dist"
                        includes="javadocs/**,renderkitdocs/**,tlddocs/**"
                        prefix="jsf-${impl.version}"/>
        </zip>

  </target>

    <target name="build.java.net" 
            depends="prepare.build.java.net">

        <antcall target="build.as.updater.jars" />

        <installerBuilder
              classFile="${dist.dir}/javaserverfaces_binary.class"
              licenseFile="${LICENSEFILE}"
              zipFile="${dist.dir}/javaserverfaces_binary.zip"/>

        <installerBuilder
              classFile="${dist.dir}/javaserverfaces_source.class"
              licenseFile="${LICENSEFILE}"
              zipFile="${dist.dir}/javaserverfaces_source.zip">
        </installerBuilder>

    </target>

    <!-- 
         =================================================================== 
           Create the Portlet Integration library
         =================================================================== 
    -->
    <target name="build-portletLibrary"
            description="Build Portlet Integration Library">
        <mkdir dir="${portlet.dir}/dist/jsf-portlet"/>
        <mkdir dir="${portlet.dir}/dist/jsf-portlet/samples"/>
        <mkdir dir="${portlet.dir}/dist/jsf-portlet/lib"/>       

        <delete file="jsf-portlet.zip"/>
        <delete file="jsf-portlet_source.zip"/>
        <delete file="${dist.dir}/javaserverfaces_portlet.class"/>
        <delete file="${dist.dir}/javaserverfaces_portlet_source.class"/>
        <delete dir="${portlet.dir}/dist"/>
        <delete dir="${portlet.dir}/build"/>

        <zip destfile="${basedir}/jsf-portlet_source.zip">
            <zipfileset dir="${basedir}/jsf-portlet"
                        excludes="**/CVS/**, **/build/**, **/dist/**"
                        prefix="jsf-portlet_sources"/>
        </zip>

        <installerBuilder
              classFile="${dist.dir}/javaserverfaces_portlet_source.class"
              licenseFile="${LICENSEFILE}"
              zipFile="${basedir}/jsf-portlet_source.zip"/>

        <ant dir="${portlet.dir}" 
             antfile="build.xml"
             inheritall="false" 
             target="main"/>
        <copy file="${LICENSEFILE}"
              todir="${portlet.dir}/dist/jsf-portlet"/>
        <copy file="${portlet.dir}/portlet-lib/build/lib/jsf-portlet.jar"
              todir="${portlet.dir}/dist/jsf-portlet/lib"/>

        <!-- copy the portlet-guessNumber.war and source -->
        <ant dir="${portlet.dir}/portlet-guessNumber" inheritAll="false">
        </ant>
        <copy todir="${portlet.dir}/dist/jsf-portlet/samples"
              file="${portlet.dir}/portlet-guessNumber/build/portlet-guessNumber.war"/>

        <copy todir="${portlet.dir}/dist/jsf-portlet/samples/portlet-guessNumber"
              includeEmptyDirs="false">
            <fileset dir="${portlet.dir}/portlet-guessNumber"
                     excludes="**/build/**"/>
        </copy>
        <zip zipfile="jsf-portlet.zip">
            <fileset dir="${portlet.dir}/dist"
                     includes="jsf-portlet/**"/>
        </zip>

        <installerBuilder
              classFile="${dist.dir}/javaserverfaces_portlet.class"
              licenseFile="${LICENSEFILE}"
              zipFile="${basedir}/jsf-portlet.zip"/>

    </target>

    <target name="nightly" depends="build.java.net"
            description="update nightly build">
        <if>
            <available
                  file="${tasks.home}/javanettasks-1.0.8.jar"/>
            <then>
                <sequential>
                    <taskdef
                          resource="org/kohsuke/javanettasks.properties">
                        <classpath>
                            <pathelement
                                  location="${tasks.home}/javanettasks-1.0.8.jar"/>
                            <fileset dir="${tasks.home}/lib"
                                     includes="*.jar"/>
                        </classpath>
                    </taskdef>

                    <javaNetUpload projectName="javaserverfaces"
                                   toFile="/nightly/javaserverfaces_binary.class"
                                   fromFile="${dist.dir}/javaserverfaces_binary.class"
                                   fileDescription="Nightly snapshot.Requires Glassfish/JavaEE5. Run 'java -cp . javaserverfaces_binary' to install"
                                   overwrite="yes"/>


                    <javaNetUpload projectName="javaserverfaces"
                                   toFile="/nightly/javaserverfaces_source.class"
                                   fromFile="${dist.dir}/javaserverfaces_source.class"
                                   fileDescription="Nightly source snapshot. Run 'java -cp . javaserverfaces_source' to install"
                                   overwrite="yes"/>

                    <javaNetUpload projectName="javaserverfaces"
                                   toFile="/nightly/jsf-glassfish-updater.jar"
                                   fromFile="${dist.dir}/jsf-glassfish-updater-${impl.version}.jar"
                                   fileDescription="Installer for updating an existing glassfish binary with a new JSF implementation. Run 'java -jar jsf-glassfish-updater.jar PATH_TO_GLASSFISH_INSTALL_DIRECTORY' to install."
                                   overwrite="yes"/>
                </sequential>
            </then>
            <else>
                <fail message="Javanettasks version 1.0.8 is not available at the location referred by TASKS_HOME (${tasks.home}).  Ensure that the TASKS_HOME environment variable is properly set."/>
            </else>
        </if>
    </target>

    <target name="weekly" depends="build.java.net"
            description="update weekly build">
        <if>
            <available
                  file="${tasks.home}/javanettasks-1.0.8.jar"/>
            <then>
                <sequential>
                    <taskdef
                          resource="org/kohsuke/javanettasks.properties">
                        <classpath>
                            <pathelement
                                  location="${tasks.home}/javanettasks-1.0.8.jar"/>
                            <fileset dir="${tasks.home}/lib"
                                     includes="*.jar"/>
                        </classpath>
                    </taskdef>

                    <javaNetUpload projectName="javaserverfaces"
                                   toFile="/weekly/javaserverfaces_binary.class"
                                   fromFile="${dist.dir}/javaserverfaces_binary.class"
                                   fileDescription="Weekly binary snapshot. Requires Glassfish/JavaEE5. Run 'java -cp . javaserverfaces_binary' to install"
                                   overwrite="yes"/>


                    <javaNetUpload projectName="javaserverfaces"
                                   toFile="/weekly/javaserverfaces_source.class"
                                   fromFile="${dist.dir}/javaserverfaces_source.class"
                                   fileDescription="Weekly source snapshot. Run 'java -cp . javaserverfaces_source' to install"
                                   overwrite="yes"/>
                </sequential>
            </then>
            <else>
                <fail message="Javanettasks version 1.0.8 is not available at the location referred by TASKS_HOME (${tasks.home}).  Ensure that the TASKS_HOME environment variable is properly set."/>
            </else>
        </if>
    </target>    

    <target name="build.samples.zip" depends="main" description="Build the demo distribution">       

        <ant dir="${demo.dir}" 
             antfile="build.xml"
             target="main" 
             inheritAll="false"/>
        <mkdir dir="samples"/>
        <copy todir="${basedir}/samples/jsf-samples"
              file="${demo.dir}/guessNumber/build/jsf-guessNumber.war"/>
        <copy todir="${basedir}/samples/jsf-samples"
              file="${demo.dir}/carstore/build/jsf-cardemo.war"/>
        <copy todir="${basedir}/samples/jsf-samples"
              file="${demo.dir}/components/build/jsf-components.war"/>
        <copy todir="${basedir}/samples/jsf-samples"
              file="${demo.dir}/webtier-sample/build/webtier-sample.war"/>
        <copy todir="${basedir}/samples/jsf-samples"
              file="${demo.dir}/renderkits/build/jsf-renderkits.war"/>

        <copy toFile="${basedir}/samples/jsf-samples/README.html"
              file="${impl.dir}/docs/samples.html"/>

        <copy toFile="${basedir}/samples/jsf-samples/License.txt"
              file="${LICENSEFILE}"/>
        <zip destfile="${basedir}/jsf-samples.zip"
             basedir="${basedir}/samples"/>
        <delete dir="samples"/>

        <installerBuilder
              classFile="${dist.dir}/javaserverfaces_samples.class"
              licenseFile="${LICENSEFILE}"
              zipFile="${basedir}/jsf-samples.zip"/>
    </target>

    <target name="build.as.updater.jars">
      <mkdir dir="${dist.dir}" />

      <ant dir="jsf-api" target="tools.javac" inheritAll="false" />
     <jar destfile="${dist.dir}/jsf-glassfish-updater-${impl.version}.jar">
        <fileset dir="${basedir}/jsf-tools/build/classes"
                 includes="com/sun/faces/tools/GlassfishUpdater.class" />
        <fileset dir="${basedir}/jsf-api/build/lib/"
                 includes="jsf-api.jar" />
        <fileset dir="${basedir}/jsf-ri/build/lib/"
                 includes="jsf-impl.jar" />
        <fileset dir="${basedir}/legal/jsf-cddl"
                 includes="BINARY_LICENSE.txt" />
        <manifest>
          <attribute name="Main-Class" 
                     value="com.sun.faces.tools.GlassfishUpdater" />
        </manifest>
      </jar>
     <jar destfile="${dist.dir}/jsf-sjsas9pebeta-updater-${impl.version}.jar">
        <fileset dir="${basedir}/jsf-tools/build/classes"
                 includes="com/sun/faces/tools/GlassfishUpdater.class,com/sun/faces/tools/AS9Updater.class" />
        <fileset dir="${basedir}/jsf-api/build/lib/"
                 includes="jsf-api.jar" />
        <fileset dir="${basedir}/jsf-ri/build/lib/"
                 includes="jsf-impl.jar" />
        <fileset dir="${basedir}/lib/compiledJasper"
                 includes="org/apache/jasper/compiler/TldLocationsCache.class" />
        <fileset dir="${basedir}/legal/jsf-cddl"
                 includes="BINARY_LICENSE.txt" />
        <manifest>
          <attribute name="Main-Class" 
                     value="com.sun.faces.tools.AS9Updater" />
        </manifest>
      </jar>
    </target>

</project>
