<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- ========== EditableValueHolder Properties ============================= -->


<!-- template

      <property>
        <description>
        </description>
        <display-name></display-name>
        <icon></icon>
        <property-name></property-name>
        <property-class>java.lang.String</property-class>
      </property>

-->
<root>
    <property>
        <description>
          Flag indicating whether the "localValue" property
          of this component has been set.  This property is
          reset automatically when the "value" propertyis set.
        </description>
        <display-name>Local Value Set</display-name>
        <icon></icon>
        <property-name>localValueSet</property-name>
        <property-class>boolean</property-class>
        <property-extension>
            <tag-attribute>false</tag-attribute>
        </property-extension>
    </property>

    <property>
        <description>
          Flag indicating that the user is required to provide a submitted
          value for this input component.
        </description>
        <display-name>Required Flag</display-name>
        <icon></icon>
        <property-name>required</property-name>
        <property-class>boolean</property-class>
        <property-extension>
            <value-expression-enabled>true</value-expression-enabled>
        </property-extension>
    </property>

    <property>
        <description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validation message for the "required"
          facility, if the "required" facility is used.
        </description>
        <display-name>Required Message</display-name>
        <icon></icon>
        <property-name>requiredMessage</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <value-expression-enabled>true</value-expression-enabled>
        </property-extension>
    </property>

    <property>
        <description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the converter message, replacing any message
          that comes from the converter.
        </description>
        <display-name>Converter Message</display-name>
        <icon></icon>
        <property-name>converterMessage</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <value-expression-enabled>true</value-expression-enabled>
        </property-extension>
    </property>

    <property>
        <description>
          A ValueExpression enabled attribute that, if present, will be
          used as the text of the validator message, replacing any
          message that comes from the validator.
        </description>
        <display-name>Validator Message</display-name>
        <icon></icon>
        <property-name>validatorMessage</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <value-expression-enabled>true</value-expression-enabled>
        </property-extension>
    </property>

    <property>
        <description>
          The value submitted for this input component by the user, prior to
          any required conversion or validation.
        </description>
        <display-name>Submitted Value</display-name>
        <icon></icon>
        <property-name>submittedValue</property-name>
        <property-class>java.lang.Object</property-class>
        <property-extension>
            <tag-attribute>false</tag-attribute>
        </property-extension>
    </property>

    <property>
        <description>
          MethodExpression representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
        </description>
        <display-name>Validator</display-name>
        <icon></icon>
        <property-name>validator</property-name>
        <property-class>javax.el.MethodExpression</property-class>
        <property-extension>
            <method-signature>
                void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)
            </method-signature>
        </property-extension>
    </property>

    <property>
        <description>
            <![CDATA[<p>

          MethodExpression representing a value change listener method
          that will be notified when a new value has been set for this
          input component.  The expression must evaluate to a public
          method that takes a <code>ValueChangeEvent</code> parameter,
          with a return type of void, <span class="changed_added_2_0">or
          to a public method that takes no arguments with a return type
          of void.  In the latter case, the method has no way of easily
          knowing what the new value is, but this can be useful in cases
          where a notification is needed that "this value
          changed".</span>

</p>]]>
        </description>
        <display-name>Value Change Listener</display-name>
        <icon></icon>
        <property-name>valueChangeListener</property-name>
        <property-class>javax.el.MethodExpression</property-class>
        <property-extension>
            <method-signature>
                void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
<!-- PENDING modify tlddoc to handle an OR of method signatures 
as required by 
https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=447 
            <method-signature>
                void valueChange()
            </method-signature>
-->
        </property-extension>
    </property>

    <property>
        <description>
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
        </description>
        <display-name>Immediate Action</display-name>
        <icon></icon>
        <property-name>immediate</property-name>
        <property-class>boolean</property-class>
        <property-extension>
            <value-expression-enabled>true</value-expression-enabled>
        </property-extension>
    </property>

    <property>
        <description>
          Flag indicating whether or not any required conversion or validation
          on this component value has been performed successfully.
        </description>
        <display-name>Valid Flag</display-name>
        <icon></icon>
        <property-name>valid</property-name>
        <property-class>valid</property-class>
        <property-extension>
            <tag-attribute>false</tag-attribute>
        </property-extension>
    </property>
</root>
