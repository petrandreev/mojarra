<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="glassfishV3.1_no_cluster" basedir=".">

    <!-- JARs that may be packaged in WEB-INF/lib
  in order for the implementation to run
  properly if they aren't availabe in the
  container's classloader.

  This is a comma separated list of fully
  qualified JARs -->

    <property name="webapp.jars" value=""/>

    <property name="glassfish.virtual.server.port" 
              value="8888" />
    <property name="glassfish.virtual.server" value="myVirtualServer" />

    <!-- Required Targets -->
    <macrodef name="deploy.artifact">
        <attribute name="artifact"
                   description="The WAR to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <attribute name="use-virtual-servers"
                   description="If true, deploy to the virtual servers."
                   default="false"/>
        <attribute name="osgi"
                   description="If true, deploy with --type osgi."
                   default="false"/>
        <sequential>
            <echo>

---------------- Glassfish - Deploying @{appName} ---------------- 

            </echo>
            <if>
              <equals arg1="@{use-virtual-servers}"
                      casesensitive="false" trim="true"
                      arg2="true" />
                <then>
                  <sequential>
                      <var name="virtualservers-rhs" value="" />
                      <for list="${instance.numbers}" param="num" trim="true">
                        <sequential>
                          <var name="virtualservers-rhs" 
                               value="${virtualservers-rhs},${glassfish.virtual.server}@{num}" />
                        </sequential>
                      </for>     
                      <propertyregex property="virtualservers-rhs-trimmed"
                                     input="${virtualservers-rhs}"
                                     regexp="^[,](.*)"
                                     select="\1"
                                     casesensitive="false" />
                      <property name="use-virtual-servers-value" value="--virtualservers ${virtualservers-rhs-trimmed}" />
                  </sequential>
                </then>
            </if>
            <property name="use-virtual-servers-value" value="" />
            <echo message="use-virtual-servers-value: ${use-virtual-servers-value}" />
            <if>
              <equals arg1="@{osgi}"
                      casesensitive="false" trim="true"
                      arg2="true" />
                <then>
                  <sequential>
                      <property name="osgi-value" value="--type osgi" />
                  </sequential>
                </then>
            </if>
            <property name="osgi-value" value="" />
            <echo message="osgi-value: ${osgi-value}" />
            <taskdef 
                name="glassfish-admin"
                classname="org.glassfish.ant.tasks.AdminTask"
                classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
            <glassfish-admin 
                installDir="${container.home}"
                command="--user ${glassfish.admin.user} --passwordfile ${glassfish.password.file} --host ${glassfish.admin.host} --port ${glassfish.admin.port} deploy ${use-virtual-servers-value} ${osgi-value} @{artifact}"/>
        </sequential>
    </macrodef>

    <macrodef name="deploydir.artifact">
        <attribute name="explodedWarDir"
                   description="The exploded war directory to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <sequential>
            <condition property="exec.name" value="cmd.exe">
                <os family="windows"/>
            </condition>
            <condition property="exec.arg.1"
                       value="/c ${container.home}/bin/asadmin">
                <os family="windows"/>
            </condition>
            <property name="exec.name" value="${container.home}/bin/asadmin"/>
            <property name="exec.arg.1" value=""/>
            <echo>

---------------- Glassfish - Deploying @{appName} ---------------- 

            </echo>
            <exec executable="${exec.name}" failonerror="true">
                <arg line="${exec.arg.1}"/>
                <arg line="deploydir"/>
                <arg line="--user ${glassfish.admin.user}"/>
                <arg line="--passwordfile ${glassfish.password.file}"/>
                <arg line="--host ${glassfish.admin.host}"/>
                <arg line="--port ${glassfish.admin.port}"/>
                <arg line="--contextroot @{appName} @{explodedWarDir}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="non.ant.deploy.artifact">
        <attribute name="artifact"
                   description="The WAR to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <sequential>
          <condition property="exec.name" value="cmd.exe">
            <os family="windows"/>
          </condition>
          <condition property="exec.arg.1"
                     value="${container.home}/bin/asadmin.bat">
            <os family="windows"/>
          </condition>
          <echo>

---------------- Glassfish - Deploying @{appName} ---------------- 

          </echo>
          <exec spawn="true" executable="${exec.name}">
            <arg value="/c" />
            <arg line="${exec.arg.1}" />
            <arg line="deploy"/>
            <arg line="--user ${glassfish.admin.user}"/>
            <arg line="--passwordfile ${glassfish.password.file}"/>
            <arg line="--host ${glassfish.admin.host}"/>
            <arg line="--port ${glassfish.admin.port}"/>
            <arg line="--contextroot @{appName} @{artifact}"/>
          </exec>
        </sequential>
    </macrodef>

    <macrodef name="undeploy.artifact">
        <attribute name="artifact"
                   description="The WAR to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <sequential>
            <echo>

---------------- Glassfish - Undeploying @{appName} ---------------- 

            </echo>
            <trycatch>
                <try>
                    <taskdef 
                        name="glassfish-admin"
                        classname="org.glassfish.ant.tasks.AdminTask"
                        classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
                    <glassfish-admin 
                        installDir="${container.home}"
                        command="--user ${glassfish.admin.user} --passwordfile ${glassfish.password.file} --host ${glassfish.admin.host} --port ${glassfish.admin.port} undeploy @{appName}"/>
                </try>
                <finally>
                    <echo>Unable to undeploy, continuing on</echo>
                </finally>
            </trycatch>
        </sequential>
    </macrodef>

    <target name="config.container">
    </target>

    <!-- Require target to display information about the build environment -->
    <target name="props">
        <echo message="PENDING - Please add a message"/>
        <echo message="container.home->${container.home}" />
        <echo message="javaee.jar->${container.home}/lib/javaee.jar" />
    </target>

    <target name="update.impl.manifest">
        <echo message="PENDING - Please implement"/>
    </target>

    <target name="container.deploy" 
            description="Deploy the JSF Implementation artifacts to the target container.">
        <if>
            <not>
                <isset property="skip.container.bounce"/>
            </not>
            <then>
              <container.stop/>
            </then>
        </if>
        <delete failonerror="false" 
                file="${container.home}/modules/jsf-api.jar" />
        <delete failonerror="false" 
                file="${container.home}/modules/jsf-impl.jar" />

        <copy overwrite="true" file="${impl.dir}/build/lib/javax.faces.jar" toFile="${container.home}/modules/javax.faces.jar"/>

        <if>
            <not>
                <isset property="skip.container.bounce"/>
            </not>
            <then>
              <container.start/>
            </then>
        </if>

    </target>

    <target name="define.scenario.aware.port">
      <property name="scenario.aware.port" value="${container.port}" />
    </target>

    <target name="define.virtual-server.aware.port">
        <property name="scenario.aware.port" 
                  value="${glassfish.virtual.server.port}" />
        <echo message="scenario.aware.port = ${scenario.aware.port}" />
    </target>

    <target name="container.deploy.test.dependencies"
            description="Deploy any container level dependencies to the container.">
        <if>
            <not>
                <isset property="skip.container.bounce"/>
            </not>
            <then>
              <container.stop/>
            </then>
        </if>

        <copy overwrite="true" file="${groovy.jar}" todir="${container.home}/modules"/>
        <if>
            <not>
                <isset property="skip.container.bounce"/>
            </not>
            <then>
              <container.start/>
            </then>
        </if>

    </target>

    <target name="container.undeploy.test.dependencies"
            description="Undeploy any container level dependencies from the container.">
        <container.stop/>

        <delete failonerror="false" file="${container.home}/modules/${groovy.jarfile}"/>

        <container.start/>
    </target>

    <target name="create.virtual.servers">
      <property name="instance.numbers" value="1,2" />

      <create.virtual.servers />
    </target>

    <target name="delete.virtual.servers">
      <property name="instance.numbers" value="1,2" />

      <delete.virtual.servers />
    </target>

    <target name="container.init.osgi"
            description="Configure GlassFish 3.1 for OSGi WAB deployment">
        <echo>
---------  Configuring GlassFish 3.1 for OSGi WAB deployment
        </echo>
        <container.start failonerror="false" />
        <taskdef 
            name="glassfish-admin"
            classname="org.glassfish.ant.tasks.AdminTask"
            classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
        <glassfish-admin 
            installDir="${container.home}"
            command="--user ${glassfish.admin.user} --passwordfile ${glassfish.password.file} --host ${glassfish.admin.host} --port ${glassfish.admin.port} delete-jvm-options --target server-config -Dorg.glassfish.additionalOSGiBundlesToStart='org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.gogo.command'"/>
        <glassfish-admin 
            installDir="${container.home}"
            command="--user ${glassfish.admin.user} --passwordfile ${glassfish.password.file} --host ${glassfish.admin.host} --port ${glassfish.admin.port} delete-jvm-options --target server-config -Dorg.glassfish.additionalOSGiBundlesToStart='org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.shell.remote,org.apache.felix.fileinstall'"/>
        <glassfish-admin 
            installDir="${container.home}"
            command="--user ${glassfish.admin.user} --passwordfile ${glassfish.password.file} --host ${glassfish.admin.host} --port ${glassfish.admin.port} create-jvm-options --target server-config -Dorg.glassfish.additionalOSGiBundlesToStart='org.apache.felix.shell,org.apache.felix.gogo.runtime,org.apache.felix.gogo.shell,org.apache.felix.shell.remote,org.apache.felix.fileinstall'"/>
         <container.stop/>
    </target>


    <target name="container.start"
            description="Start the GlassFish container">
        <var name="create-virtual-server-value" value="false" />

        <if>
          <equals arg1="${create-virtual-server}" 
                  casesensitive="false" trim="true"
                  arg2="true" />
          <then>
            <var name="create-virtual-server-value" value="true" />
          </then>
        </if>
        <echo>
--------- Starting container create-virtual-server: ${create-virtual-server-value} 
        </echo>
        <container.start
                  create-virtual-server="${create-virtual-server-value}" />
    </target>

    <target name="database.start"
            description="Start the container's database">
        <var name="create-virtual-server-value" value="false" />

        <if>
          <equals arg1="${create-virtual-server}" 
                  casesensitive="false" trim="true"
                  arg2="true" />
          <then>
            <var name="create-virtual-server-value" value="true" />
          </then>
        </if>
        <echo>
--------- Starting database create-virtual-server: ${create-virtual-server-value} 
        </echo>
        <database.start
                  create-virtual-server="${create-virtual-server-value}" />
    </target>


    <target name="container.debug"
            description="Start the GlassFish container">
        <var name="create-virtual-server-value" value="false" />

        <if>
          <equals arg1="${create-virtual-server}" 
                  casesensitive="false" trim="true"
                  arg2="true" />
          <then>
            <var name="create-virtual-server-value" value="true" />
          </then>
        </if>
        <echo>
--------- Starting container create-virtual-server: ${create-virtual-server-value} 
        </echo>
        <container.debug
                  create-virtual-server="${create-virtual-server-value}" />
    </target>

    <target name="container.stop"
            description="Stop the GlassFish container">
        <var name="create-virtual-server-value" value="false" />
        <if>
          <equals arg1="${create-virtual-server}" 
                  casesensitive="false" trim="true"
                  arg2="true" />
          <then>
            <var name="create-virtual-server-value" value="true" />
          </then>
        </if>
        <echo>
--------- stopping container create-virtual-server: ${create-virtual-server-value} 
        </echo>

        <container.stop create-virtual-server="${create-virtual-server-value}" />

    </target>

    <target name="database.stop"
            description="Stop the container database">
        <var name="create-virtual-server-value" value="false" />
        <if>
          <equals arg1="${create-virtual-server}" 
                  casesensitive="false" trim="true"
                  arg2="true" />
          <then>
            <var name="create-virtual-server-value" value="true" />
          </then>
        </if>
        <echo>
--------- stopping database create-virtual-server: ${create-virtual-server-value} 
        </echo>

        <database.stop create-virtual-server="${create-virtual-server-value}" />

    </target>

    <target name="container.restart"
            description="Stop the GlassFish container">
        <container.stop/>
        <container.start />
    </target>

    <macrodef name="container.start"
            description="Start the GlassFish container">
        <attribute name="create-virtual-server" default="false"/>
        <attribute name="failonerror" default="true"/>
        <sequential>
            <start.domain failonerror="@{failonerror}"
                          create-virtual-server="@{create-virtual-server}"/>
        </sequential>
    </macrodef>

    <macrodef name="database.start"
            description="Start the container database">
        <attribute name="create-virtual-server" default="false"/>
        <attribute name="failonerror" default="true"/>
        <sequential>
            <start.database failonerror="@{failonerror}"
                          create-virtual-server="@{create-virtual-server}"/>
        </sequential>
    </macrodef>

    <macrodef name="container.debug"
            description="Start the GlassFish container in debug mode">
        <attribute name="create-virtual-server" default="false"/>
        <sequential>
            <debug.domain create-virtual-server="@{create-virtual-server}"/>
        </sequential>
    </macrodef>


    <macrodef name="container.stop"
            description="Stop the GlassFish container">
        <attribute name="create-virtual-server" default="false" />
        <sequential>
            <stop.domain create-virtual-server="@{create-virtual-server}"/>
        </sequential>
    </macrodef>

    <macrodef name="database.stop"
            description="Stop the container database">
        <attribute name="create-virtual-server" default="false" />
        <sequential>
            <stop.database create-virtual-server="@{create-virtual-server}"/>
        </sequential>
    </macrodef>

    <!-- 'PRIVATE' targets -->
    <macrodef name="start.domain">
        <attribute name="create-virtual-server" default="false"/>
        <attribute name="failonerror" default="true"/>
        <sequential>
            <echo>

"------------ Starting ${glassfish.domain} ------------"

            </echo>
            <taskdef 
                name="glassfish-start-server"
                classname="org.glassfish.ant.tasks.StartServerTask"
                classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
            <glassfish-start-server 
                installDir="${container.home}"
                domain="${glassfish.domain}"/>
            <waitfor>
                <http url="http://${container.host}:${container.port}"/>
            </waitfor>
            <if>
                <equals arg1="@{create-virtual-server}" 
                        casesensitive="false" trim="true"
                        arg2="true" />
                <then>
                    <sequential>
                        <create.virtual.servers />
                        <for list="${instance.numbers}" param="num" trim="true">
                            <sequential>
                                <waitfor>
                                    <http url="http://${container.host}:@{num}${glassfish.virtual.server.port}"/>
                                </waitfor>
                            </sequential>
                        </for>
                    </sequential>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="start.database">
        <attribute name="create-virtual-server" default="false"/>
        <attribute name="failonerror" default="true"/>
        <sequential>
            <echo>

"------------ Starting database ------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="@{failonerror}">
                        <arg line="start-database"/>
                    </exec>
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </then>
                <else>
                  <condition property="exec.name" value="cmd.exe">
                    <os family="windows"/>
                  </condition>
                  <condition property="exec.arg.1"
                     value="${container.home}/bin/asadmin.bat">
                     <os family="windows"/>
                  </condition>
                  <exec spawn="true" executable="${exec.name}">
                      <arg value="/c" />
                      <arg line="${exec.arg.1}" />
                      <arg line="start-database" />
                  </exec>                   
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="set.security.properties">
        <attribute name="create-virtual-server" default="false"/>
        <attribute name="failonerror" default="true"/>
        <sequential>
            <echo>

"------------ Setting security properties ------------"

            </echo>
            <mkdir dir="${basedir}/build" />
            <echo file="${basedir}/build/userpassword.txt">AS_ADMIN_USERPASSWORD=user1</echo>
            <if>
                <os family="unix"/>
                <then>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="@{failonerror}">
                        <arg line="set server.security-service.activate-default-principal-to-role-mapping=true"/>
                    </exec>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="false">
                        <arg line="--passwordfile ${basedir}/build/userpassword.txt delete-file-user user1"/>
                    </exec>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="@{failonerror}">
                        <arg line="--passwordfile ${basedir}/build/userpassword.txt create-file-user --groups user user1"/>
                    </exec>
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </then>
                <else>
                  <condition property="exec.name" value="cmd.exe">
                    <os family="windows"/>
                  </condition>
                  <condition property="exec.arg.1"
                     value="${container.home}/bin/asadmin.bat">
                     <os family="windows"/>
                  </condition>
                  <exec spawn="true" executable="${exec.name}">
                      <arg value="/c" />
                      <arg line="${exec.arg.1}" />
                      <arg line="set server.security-service.activate-default-principal-to-role-mapping=true" />
                  </exec>                   
                  <exec spawn="true" failonerror="false" executable="${exec.name}">
                      <arg value="/c" />
                      <arg line="${exec.arg.1}" />
                      <arg line="--passwordfile ${basedir}/build/userpassword.txt delete-file-user user1" />
                  </exec>                   
                  <exec spawn="true" executable="${exec.name}">
                      <arg value="/c" />
                      <arg line="${exec.arg.1}" />
                      <arg line="--passwordfile ${basedir}/build/userpassword.txt create-file-user --groups user user1" />
                  </exec>                   
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="create.virtual.servers">
        <sequential>
                    <for list="${instance.numbers}" param="num" trim="true">
                      <sequential>
                        <echo>

"------------ Creating ${glassfish.virtual.server}@{num} --listenerport @{num}${glassfish.virtual.server.port} ------------"

                        </echo>
                    <taskdef 
                        name="glassfish-admin"
                        classname="org.glassfish.ant.tasks.AdminTask"
                        classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
                    <glassfish-admin 
                        installDir="${container.home}"
                        command="--user ${glassfish.admin.user} create-virtual-server --hosts localhost ${glassfish.virtual.server}@{num}"/>
                    <glassfish-admin 
                        installDir="${container.home}"
                        command="--user ${glassfish.admin.user} create-http-listener --listenerport @{num}${glassfish.virtual.server.port} --defaultvs ${glassfish.virtual.server}@{num} --servername localhost.localdomain --acceptorthreads 1 --listeneraddress 0.0.0.0 myHttpListener@{num}"/>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="delete.virtual.servers">
        <sequential>
            <for list="${instance.numbers}" param="num" trim="true">
                <sequential>
                    <echo>
  
"------------ Deleting ${glassfish.virtual.server}@{num} ------------"

                    </echo>
                    <taskdef 
                        name="glassfish-admin"
                        classname="org.glassfish.ant.tasks.AdminTask"
                        classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
                    <glassfish-admin 
                        installDir="${container.home}"
                        command="delete-http-listener myHttpListener@{num}"/>
                    <glassfish-admin 
                        installDir="${container.home}"
                        command="delete-virtual-server ${glassfish.virtual.server}@{num}"/>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="debug.domain">
        <attribute name="create-virtual-server" default="false"/>
        <sequential>
            <echo>

"------------ Starting ${glassfish.domain} in debug mode------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="true">
                        <arg line="start-domain"/>
                        <arg line="--user ${glassfish.admin.user}"/>
                        <arg line="--debug"/>
                        <arg line="${glassfish.domain}"/>
                    </exec>
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </then>
                <else>
                    <exec executable="${container.home}/bin/asadmin.bat"
                          spawn="true">
                        <arg line="start-domain"/>
                        <arg line="--user ${glassfish.admin.user}"/>
                        <arg line="--debug"/>
                        <arg line="${glassfish.domain}"/>
                    </exec>
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </else>
            </if>
            <if>
              <equals arg1="@{create-virtual-server}" 
                      casesensitive="false" trim="true"
                      arg2="true" />
                <then>
                  <sequential>
                    <create.virtual.servers />
                    <for list="${instance.numbers}" param="num" trim="true">
                      <sequential>
                        <waitfor>
                          <http url="http://${container.host}:@{num}${glassfish.virtual.server.port}"/>
                       </waitfor>
                     </sequential>
                   </for>
                  </sequential>
                </then>
              </if>
        </sequential>
    </macrodef>

    <macrodef name="stop.domain">
        <attribute name="create-virtual-server" default="false"/>
        <sequential>
            <echo>

"------------ create-virtual-server: @{create-virtual-server} ------------"

            </echo>
            <if>
                <equals arg1="@{create-virtual-server}" 
                    casesensitive="false" trim="true"
                    arg2="true" />
                <then>
                    <sequential>
                        <delete.virtual.servers />
                    </sequential>
                </then>
            </if>
            <taskdef name="glassfish-stop-server"
                classname="org.glassfish.ant.tasks.StopServerTask"
                classpath="${dependency.base.dir}/jars/ant-tasks.jar" />
            <glassfish-stop-server 
                installDir="${container.home}"
                domain="${glassfish.domain}"/>
        </sequential>
    </macrodef>

    <macrodef name="stop.database">
        <attribute name="create-virtual-server" default="false"/>
        <attribute name="failonerror" default="false"/>
        <sequential>
            <echo>

"------------ Stopping database ------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="@{failonerror}">
                        <arg line="stop-database"/>
                    </exec>
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </then>
                <else>
                  <condition property="exec.name" value="cmd.exe">
                    <os family="windows"/>
                  </condition>
                  <condition property="exec.arg.1"
                     value="${container.home}/bin/asadmin.bat">
                     <os family="windows"/>
                  </condition>
                  <exec spawn="true" executable="${exec.name}">
                      <arg value="/c" />
                      <arg line="${exec.arg.1}" />
                      <arg line="stop-database" />
                  </exec>                   
                    <waitfor>
                        <http url="http://${container.host}:${container.port}"/>
                    </waitfor>
                </else>
            </if>
        </sequential>
    </macrodef>


    <!-- ************ Compiler Defaults *************************************** -->


    <!-- ************ Executable Targets ************************************** -->

    <target name="main">
    </target>


</project>

