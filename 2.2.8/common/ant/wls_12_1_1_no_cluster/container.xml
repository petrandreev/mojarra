<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="wls-12.1.1" basedir=".">

<!-- 

To start the server manually

The admin console is at http://adc2110030:7001/console weblogic:weblogic1

-->
    <property name="container.xml.dir" 
              value="${jsf.build.home}/common/ant/${container.name}" />

    <property name="wl.username" value="weblogic"/>
    <property name="wl.password" value="weblogic1"/>
    <property name="wl.home" value="${container.home}/wlserver_12.1" />
    <property name="wl.domain.home" value="${container.home}/user_projects/domains" />
    <property name="wl.domain.name" value="base_domain" />
    <property name="wl.admin.server.name" value="AdminServer" />
    <property name="wl.log" value="${wl.domain.home}/${wl.domain.name}/${container.name}-${build.number}-${TSTAMP}.log" />
    <property name="wl.jsf-api.jar_A" value="javax.jsf_1.0.0.0_2-1.jar" />
    <property name="wl.jsf-api.jar_B" value="javax.jsf_1.0.0.0_2-0.jar" />
    <property name="wl.jsf-impl.jar" value="glassfish.jsf_1.0.0.0_2-0-4.jar" />

    <taskdef name="wlserver" 
             classname="weblogic.ant.taskdefs.management.WLServer">
        <classpath>
            <pathelement
                  location="${wl.home}/server/lib/weblogic.jar"/>
        </classpath>
      
    </taskdef>
    <taskdef name="wldeploy" 
             classname="weblogic.ant.taskdefs.management.WLDeploy">
        <classpath>
            <pathelement
                  location="${wl.home}/server/lib/weblogic.jar"/>
        </classpath>
      
    </taskdef>

    <!-- JARs that may be packaged in WEB-INF/lib
  in order for the implementation to run
  properly if they aren't availabe in the
  container's classloader.

  This is a comma separated list of fully
  qualified JARs -->

    <property name="webapp.jars" value=""/>

    <property name="instance.numbers" value="1,2" />

    <property name="glassfish.custom.domain" value="mojarra-domain" />
    <property name="glassfish.cluster" value="mojarra-cluster" />
    <property name="glassfish.custom.admin.port" value="60048" />
    <property name="glassfish.cluster.admin.port" value="4949" />
    <property name="glassfish.portbase.tenthousandsplace" value="6" />
    <property name="glassfish.portbase" value="${glassfish.portbase.tenthousandsplace}0000" />
    <property name="container.ssl.port" value="8181" />
    <property name="container.jms.port" value="7676" />
    <property name="container.iiop.port" value="3700" />
    <property name="container.iiop.ssl.port" value="3820" />
    <property name="container.iiop.ssl.mutualauth.port" value="3920" />
    <property name="container.jmx.port" value="8686" />
    <property name="container.gms.port" value="9490" />
    <property name="container.debug.port" value="9009" />


    <!-- Required Targets -->
    <macrodef name="deploy.artifact">
        <attribute name="artifact"
                   description="The WAR to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <attribute name="use-virtual-servers"
                   description="If true, deploy to the virtual servers."
                   default="false"/>
        <attribute name="waitforpath" default=""
                   description="the path to test to determine if the deployment was successful" />
        <sequential>
            <echo>

---------------- Deploying @{appName} ---------------- 

            </echo>
            <wldeploy action="deploy"
                appversion="${impl.version.number}"
                name="@{appName}"
                password="${wl.password}"
                user="${wl.username}"
                source="@{artifact}"
                verbose="true" 
                adminurl="t3://${container.host}:${container.port}" />
            <waitfor>
              <http url="http://${container.host}:${container.port}/@{appName}/@{waitforpath}"/>
            </waitfor>
        </sequential>
    </macrodef>

    <macrodef name="deploydir.artifact">
        <attribute name="explodedWarDir"
                   description="The exploded war directory to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <sequential>
          <fail message="this macro is unimplemented for this container" />
        </sequential>
    </macrodef>


    <macrodef name="undeploy.artifact">
        <attribute name="artifact"
                   description="The WAR to deploy"/>
        <attribute name="appName"
                   description="The name of the application"/>
        <sequential>
            <echo>

---------------- Undeploying @{appName} ---------------- 

            </echo>
            <wldeploy action="undeploy"
                name="@{appName}"
                password="${wl.password}"
                user="${wl.username}"
                verbose="true" debug="true" failonerror="false" 
                adminurl="t3://${container.host}:${container.port}"/>

        </sequential>
    </macrodef>

    <!-- Require target to display information about the build environment -->
    <target name="props">
        <echo message="PENDING - Please add a message"/>
        <echo message="container.home->${container.home}" />
        <echo message="javaee.jar->${container.home}/lib/javaee.jar" />
    </target>

    <target name="define.wls.properties">
      <property name="wls.jsf.di.groupId" value="com/bea/faces" />
      <property name="wls.jsf.di.artifactId" value="wls.jsf.di" />
      <property name="wls.jsf.di.version" value="2.0.4" />
      <property name="wls.jsf.di.path" value="${wls.jsf.di.groupId}/${wls.jsf.di.artifactId}/${wls.jsf.di.version}" />
      <property name="wls.jsf.di.jar" value="${wls.jsf.di.path}/${wls.jsf.di.artifactId}-${wls.jsf.di.version}.jar" />
      <property name="wls.jsf.di.url" value="http://hg.us.oracle.com/jsf/website/raw-file/43f22fe82eca/downloads/wls.jsf.di-2.0.4.jar"/>

      <propertyregex override="true"
                   property="groupPath" input="${groupId}"
                   regexp="\." replace="/" global="true" />
    </target>

    <target name="container.deploy" depends="define.wls.properties"
            description="Deploy the JSF Implementation artifacts to the target container.">

      <ant antfile="build-pre-maven-rename.xml" dir="${api.dir}" 
           target="main">
          <property name="skip.javadoc.jar"  value="true" />
      </ant>

      <ant antfile="build-pre-maven-rename.xml" dir="${impl.dir}" 
           target="main">
          <property name="skip.javadoc.jar"  value="true" />
      </ant>

      <delete dir="${container.xml.dir}/target" failonerror="false" />
     
      <!-- repackage the api jar -->
      <mkdir dir="${container.xml.dir}/target" />
      <mkdir dir="${container.xml.dir}/target/jsf-api" />
      <unzip src="${api.dir}/build.pre-maven-rename/lib/jsf-api.jar"
             dest="${container.xml.dir}/target/jsf-api" />
      <delete dir="${container.xml.dir}/target/jsf-api/META-INF" />
      <zip destfile="${container.home}/modules/javax.jsf_1.0.0.0_2-0.jar" 
           basedir="${container.xml.dir}/target/jsf-api" 
           update="true" />

      <!-- repackage the impl jar -->
      <mkdir dir="${container.xml.dir}/target" />
      <mkdir dir="${container.xml.dir}/target/jsf-impl" />
      <unzip src="${impl.dir}/build.pre-maven-rename/lib/jsf-impl.jar"
             dest="${container.xml.dir}/target/jsf-impl" />
      <delete dir="${container.xml.dir}/target/jsf-impl/META-INF" />
      <zip destfile="${container.home}/modules/glassfish.jsf_1.0.0.0_2-0-4.jar" 
           basedir="${container.xml.dir}/target/jsf-impl" 
           update="true" />


    </target>

    <target name="container.deploy.test.dependencies" 
            description="Deploy the extra test dependencies to the target container.">
    </target>


    <target name="container.start"
            description="Start the WebLogic container">
        <var name="create-domain-value" value="true" />
        <var name="create-cluster-value" value="true" />
        <if>
          <equals arg1="${create-domain}" 
                  casesensitive="false" trim="true"
                  arg2="false" />
          <then>
            <var name="create-domain-value" value="false" />
          </then>
        </if>
        <if>
          <equals arg1="${create-cluster}" 
                  casesensitive="false" trim="true"
                  arg2="false" />
          <then>
            <var name="create-cluster-value" value="false" />
          </then>
        </if>
        <echo>
--------- Starting container
        </echo>
        <container.start create-domain="${create-domain-value}"
                         create-cluster="${create-cluster-value}"/>
    </target>

    <target name="container.debug"
            description="Start the WebLogic container in debug mode">
        <var name="create-domain-value" value="true" />
        <var name="create-cluster-value" value="true" />
        <if>
          <equals arg1="${create-domain}" 
                  casesensitive="false" trim="true"
                  arg2="false" />
          <then>
            <var name="create-domain-value" value="false" />
          </then>
        </if>
        <if>
          <equals arg1="${create-cluster}" 
                  casesensitive="false" trim="true"
                  arg2="false" />
          <then>
            <var name="create-cluster-value" value="false" />
          </then>
        </if>
        <echo>
--------- Starting container in debug mode, create-domain: ${create-domain-value} create-cluster: ${create-cluster-value}
        </echo>
        <container.debug create-domain="${create-domain-value}"
                         create-cluster="${create-cluster-value}"/>
    </target>

    <target name="container.stop"
            description="Stop the WebLogic container">
        <var name="create-domain-value" value="true" />
        <var name="create-cluster-value" value="true" />
        <if>
          <equals arg1="${create-domain}" 
                  casesensitive="false" trim="true"
                  arg2="false" />
          <then>
            <var name="create-domain-value" value="false" />
          </then>
        </if>
        <if>
          <equals arg1="${create-cluster}" 
                  casesensitive="false" trim="true"
                  arg2="false" />
          <then>
            <var name="create-cluster-value" value="false" />
          </then>
        </if>
        <echo>
--------- Stopping container, create-domain: ${create-domain-value} create-cluster: ${create-cluster-value}
        </echo>
        <container.stop create-domain="${create-domain-value}"
                        create-cluster="${create-cluster-value}"/>
    </target>

    <target name="container.restart"
            description="Stop the WebLogic container">
        <container.stop/>
        <container.start/>
    </target>

    <target name="define.scenario.aware.port">
      <property name="scenario.aware.port" value="${container.port}" />
      <echo message="scenario.aware.port = ${scenario.aware.port}" />

      <var name="force.no.cluster" value="true" />
      <echo message="force.no.cluster = ${force.no.cluster}" />
    </target>

    <target name="define.virtual-server.aware.port">
      <property name="scenario.aware.port" value="${container.port}" />
      <echo message="scenario.aware.port = ${scenario.aware.port}" />

      <var name="force.no.cluster" value="true" />
      <echo message="force.no.cluster = ${force.no.cluster}" />
    </target>


    <macrodef name="container.start"
            description="Start the WebLogic container">
        <attribute name="create-domain" default="true"/>
        <attribute name="create-cluster" default="true"/>
        <attribute name="dir" default="${container.home}/user_projects/domains/base_domain/bin" />
        <sequential>
          <echo>Starting ${container.name}</echo>
          <!-- windows or unix java exec invocation -->
          <condition property="exec.name" value="cmd.exe /c">
              <os family="windows"/>
          </condition>
          <condition property="exec.name" value="nohup">
              <os family="unix"/>
          </condition>
          <condition property="exec.name" value="nohup">
              <os family="unix"/>
          </condition>
          <condition property="exec.arg.1"
                     value="@{dir}/startWebLogic.bat">
              <os family="windows"/>
          </condition>
          <property name="exec.arg.1"  value="@{dir}/startWebLogic.sh" />
          <echo message="redirecting log output to ${wl.log}" />
          <exec spawn="true" executable="${exec.name}">
              <arg line="${exec.arg.1}"/>
              <env key="WLS_REDIRECT_LOG"
                   value="${wl.log}" />
          </exec>
        </sequential>
    </macrodef>

    <macrodef name="container.debug"
            description="Start the WebLogic container in debug mode">
        <attribute name="create-domain" default="true"/>
        <attribute name="create-cluster" default="true"/>
        <attribute name="dir" default="${container.home}/user_projects/domains/base_domain/bin" />
      <sequential>
        <echo>
Unable to start ${container.name} in debug mode from ant.  
You must manually edit setDomainEnv.sh and include the line

debugFlag="true"

right around line 344, before the line 

if [ "${debugFlag}" = "true" ] ; then

and manually start the container with ./startWebLogic.sh.

        </echo>
        <fail />
      </sequential>
    </macrodef>


    <macrodef name="container.stop"
            description="Stop the WebLogic container">
        <attribute name="create-domain" default="true"/>
        <attribute name="create-cluster" default="true"/>
        <attribute name="dir" default="${container.home}/user_projects/domains/base_domain/bin" />
        <sequential>
          <echo>Stopping ${container.name}</echo>
          <if>
            <os family="windows"/>
              <then>
                <property name="stopWebLogic" value="@{dir}/stopWebLogic.bat"/>
              </then>
              <else>
               <property name="stopWebLogic" value="@{dir}/stopWebLogic.sh"/>
              </else>
            </if>
            <exec os="SunOS" dir="@{dir}"
                  executable="${stopWebLogic}">
            </exec>
            <exec os="Linux" dir="@{dir}"
                  executable="${stopWebLogic}">
            </exec>
            <exec osfamily="windows" dir="@{dir}" 
                  executable="${stopWebLogic}">
            </exec>
            <exec os="Mac OS X" dir="@{dir}" 
                  executable="${stopWebLogic}">
            </exec>
        </sequential>    
    </macrodef>

    <!-- 'PRIVATE' targets -->
    <macrodef name="start.domain">
        <attribute name="create-domain" default="true"/>
        <attribute name="create-cluster" default="true"/>

        <sequential>
            <echo>

"------------ Starting ${glassfish.custom.domain} force.no.cluster ${force.no.cluster} ------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <if>
                        <equals arg1="@{create-domain}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin"
				failonerror="true">
			      <arg line="create-domain"/>
			      <arg line="--user ${glassfish.admin.user}"/>
			      <arg line="--passwordfile ${glassfish.password.file}"/>
			      <arg line="--portbase ${glassfish.portbase}"/>
			      <arg line="${glassfish.custom.domain}"/>
			  </exec>
                        </then>
                    </if>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="true">
                        <arg line="start-domain"/>
                        <arg line="--user ${glassfish.admin.user}"/>
                        <arg line="${glassfish.custom.domain}"/>
                    </exec>
                    <if>
                      <not>
                        <equals arg1="${force.no.cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                      </not>
                      <then>
                        <start.cluster create-cluster="@{create-cluster}"/>
                      </then>
                      <else>
			<waitfor>
			    <http url="http://${container.host}:${glassfish.portbase.tenthousandsplace}0080"/>
			</waitfor>
                      </else>
                    </if>
                </then>
                <else>
                    <if>
                        <equals arg1="@{create-domain}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin.bat"
				failonerror="true">
			      <arg line="create-domain"/>
			      <arg line="--user ${glassfish.admin.user}"/>
			      <arg line="--passwordfile ${glassfish.password.file}"/>
			      <arg line="--portbase ${glassfish.portbase}"/>
			      <arg line="${glassfish.custom.domain}"/>
			  </exec>
                        </then>
                    </if>
                    <exec executable="${container.home}/bin/asadmin.bat"
                          spawn="true">
                        <arg line="start-domain"/>
                        <arg line="--user ${glassfish.admin.user}"/>
                        <arg line="${glassfish.custom.domain}"/>
                    </exec>
                    <if>
                      <not>
                        <equals arg1="${force.no.cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                      </not>
                      <then>
                        <start.cluster create-cluster="@{create-cluster}"/>
                      </then>
                      <else>
			<waitfor>
			    <http url="http://${container.host}:${glassfish.portbase.tenthousandsplace}0080"/>
			</waitfor>
                      </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="start.cluster">
        <attribute name="create-cluster" default="true"/>
        <sequential>
            <echo>

"------------ Starting ${glassfish.cluster} ------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <if>
                        <equals arg1="@{create-cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin"
				failonerror="true">
			      <arg line="--port ${glassfish.custom.admin.port}"/>
			      <arg line="create-cluster"/>
			      <arg line="--systemproperties ASADMIN_LISTENER_PORT=${glassfish.cluster.admin.port}"/>
			      <arg line="${glassfish.cluster}"/>
			  </exec>

			  <for list="${instance.numbers}" param="num" trim="true">
			    <sequential>
			      <exec executable="${container.home}/bin/asadmin"
				    failonerror="true">
				  <arg line="--port ${glassfish.custom.admin.port}"/>
				  <arg line="create-local-instance"/>
				  <arg line="--cluster ${glassfish.cluster}"/>
				  <arg line="--systemproperties ASADMIN_LISTENER_PORT=@{num}${glassfish.admin.port}:HTTP_LISTENER_PORT=@{num}${container.port}:HTTP_SSL_LISTENER_PORT=@{num}${container.ssl.port}:JMS_PROVIDER_PORT=@{num}${container.jms.port}:IIOP_LISTENER_PORT=@{num}${container.iiop.port}:IIOP_SSL_LISTENER_PORT=@{num}${container.iiop.ssl.port}:IIOP_SSL_MUTUALAUTH_PORT=@{num}${container.iiop.ssl.mutualauth.port}:JMX_SYSTEM_CONNECTOR_PORT=@{num}${container.jmx.port}:GMS_BIND_INTERFACE_ADDRESS-${glassfish.cluster}=${container.host}:GMS_LISTENER_PORT-${glassfish.cluster}=@{num}${container.gms.port}"/>
				  <arg line="${glassfish.cluster}@{num}"/>
			      </exec>
			    </sequential>
			  </for>
                      </then>
                    </if>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="true">
                        <arg line="--port ${glassfish.custom.admin.port}"/>
                        <arg line="start-cluster"/>
                        <arg line="${glassfish.cluster}"/>
                    </exec>
                    <for list="${instance.numbers}" param="num" trim="true">
                      <sequential>
			<waitfor>
			    <http url="http://${container.host}:@{num}${container.port}"/>
			</waitfor>
                      </sequential>
                    </for>
                </then>
                <else>
                    <if>
                        <equals arg1="@{create-cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			<exec executable="${container.home}/bin/asadmin.bat"
			      failonerror="true">
			    <arg line="--port ${glassfish.custom.admin.port}"/>
			    <arg line="create-cluster"/>
			    <arg line="--systemproperties ASADMIN_LISTENER_PORT=${glassfish.cluster.admin.port}"/>
			    <arg line="${glassfish.cluster}"/>
			</exec>

			<for list="${instance.numbers}" param="num" trim="true">
			  <sequential>
			    <exec executable="${container.home}/bin/asadmin.bat"
				  failonerror="true">
				<arg line="--port ${glassfish.custom.admin.port}"/>
				<arg line="create-local-instance"/>
				<arg line="--cluster ${glassfish.cluster}"/>
				<arg line="--systemproperties ASADMIN_LISTENER_PORT=@{num}${glassfish.admin.port}:HTTP_LISTENER_PORT=@{num}${container.port}:HTTP_SSL_LISTENER_PORT=@{num}${container.ssl.port}:JMS_PROVIDER_PORT=@{num}${container.jms.port}:IIOP_LISTENER_PORT=@{num}${container.iiop.port}:IIOP_SSL_LISTENER_PORT=@{num}${container.iiop.ssl.port}:IIOP_SSL_MUTUALAUTH_PORT=@{num}${container.iiop.ssl.mutualauth.port}:JMX_SYSTEM_CONNECTOR_PORT=@{num}${container.jmx.port}:GMS_BIND_INTERFACE_ADDRESS-${glassfish.cluster}=${container.host}:GMS_LISTENER_PORT-${glassfish.cluster}=@{num}${container.gms.port}"/>
				<arg line="${glassfish.cluster}@{num}"/>
			    </exec>
			  </sequential>
			</for>
                      </then>
                    </if>
                    <exec executable="${container.home}/bin/asadmin.bat"
                          failonerror="true">
                        <arg line="--port ${glassfish.custom.admin.port}"/>
                        <arg line="start-cluster"/>
                        <arg line="${glassfish.cluster}"/>
                    </exec>
                    <for list="${instance.numbers}" param="num" trim="true">
                      <sequential>
			<waitfor>
			    <http url="http://${container.host}:@{num}${container.port}"/>
			</waitfor>
                      </sequential>
                    </for>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="debug.cluster">
        <attribute name="create-cluster" default="true"/>
        <sequential>
            <echo>

"------------ Starting ${glassfish.cluster} in debug mode ------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <if>
                        <equals arg1="@{create-cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
                            <echo>

"------------ Creating ${glassfish.cluster} ------------"

                            </echo>
			    <exec executable="${container.home}/bin/asadmin"
				  failonerror="true">
				<arg line="--port ${glassfish.custom.admin.port}"/>
				<arg line="create-cluster"/>
				<arg line="--systemproperties ASADMIN_LISTENER_PORT=${glassfish.cluster.admin.port}"/>
				<arg line="${glassfish.cluster}"/>
			    </exec>

			    <for list="${instance.numbers}" param="num" trim="true">
			      <sequential>
                                <echo>

"------------ Creating local instance ${glassfish.cluster}@{num} ------------"

                                </echo>
				<exec executable="${container.home}/bin/asadmin"
				      failonerror="true">
				    <arg line="--port ${glassfish.custom.admin.port}"/>
				    <arg line="create-local-instance"/>
				    <arg line="--cluster ${glassfish.cluster}"/>
				    <arg line="--systemproperties JAVA_DEBUGGER_PORT=@{num}${container.debug.port}:ASADMIN_LISTENER_PORT=@{num}${glassfish.admin.port}:HTTP_LISTENER_PORT=@{num}${container.port}:HTTP_SSL_LISTENER_PORT=@{num}${container.ssl.port}:JMS_PROVIDER_PORT=@{num}${container.jms.port}:IIOP_LISTENER_PORT=@{num}${container.iiop.port}:IIOP_SSL_LISTENER_PORT=@{num}${container.iiop.ssl.port}:IIOP_SSL_MUTUALAUTH_PORT=@{num}${container.iiop.ssl.mutualauth.port}:JMX_SYSTEM_CONNECTOR_PORT=@{num}${container.jmx.port}:GMS_BIND_INTERFACE_ADDRESS-${glassfish.cluster}=${container.host}:GMS_LISTENER_PORT-${glassfish.cluster}=@{num}${container.gms.port}"/>
				    <arg line="${glassfish.cluster}@{num}"/>
				</exec>
			      </sequential>
			    </for>
                        </then>
                    </if>
                    <for list="${instance.numbers}" param="num" trim="true">
                      <sequential>
                       <echo>

"------------ Starting local instance ${glassfish.cluster}@{num} with debug enabled ------------"

                       </echo>
                       <exec executable="${container.home}/bin/asadmin"
       			           failonerror="true">
				   <arg line="start-instance"/>
				   <arg line="--user ${glassfish.admin.user}"/>
				   <arg line="--passwordfile ${glassfish.password.file}"/>
			           <arg line="--port ${glassfish.custom.admin.port}"/>
                                   <arg line="--debug=true"/>
			           <arg line="${glassfish.cluster}@{num}"/>
                        </exec>
			<waitfor>
			    <http url="http://${container.host}:@{num}${container.port}"/>
			</waitfor>
                      </sequential>
                    </for>
                </then>
                <else>
                    <if>
                        <equals arg1="@{create-cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			    <exec executable="${container.home}/bin/asadmin.bat"
				  failonerror="true">
				<arg line="--port ${glassfish.custom.admin.port}"/>
				<arg line="create-cluster"/>
				<arg line="--systemproperties ASADMIN_LISTENER_PORT=${glassfish.cluster.admin.port}"/>
				<arg line="${glassfish.cluster}"/>
			    </exec>

			    <for list="${instance.numbers}" param="num" trim="true">
			      <sequential>
				<exec executable="${container.home}/bin/asadmin.bat"
				      failonerror="true">
				    <arg line="--port ${glassfish.custom.admin.port}"/>
				    <arg line="create-local-instance"/>
				    <arg line="--cluster ${glassfish.cluster}"/>
				    <arg line="--systemproperties ASADMIN_LISTENER_PORT=@{num}${glassfish.admin.port}:HTTP_LISTENER_PORT=@{num}${container.port}:HTTP_SSL_LISTENER_PORT=@{num}${container.ssl.port}:JMS_PROVIDER_PORT=@{num}${container.jms.port}:IIOP_LISTENER_PORT=@{num}${container.iiop.port}:IIOP_SSL_LISTENER_PORT=@{num}${container.iiop.ssl.port}:IIOP_SSL_MUTUALAUTH_PORT=@{num}${container.iiop.ssl.mutualauth.port}:JMX_SYSTEM_CONNECTOR_PORT=@{num}${container.jmx.port}:GMS_BIND_INTERFACE_ADDRESS-${glassfish.cluster}=${container.host}:GMS_LISTENER_PORT-${glassfish.cluster}=@{num}${container.gms.port}"/>
				    <arg line="${glassfish.cluster}@{num}"/>
				</exec>
                                <exec executable="${container.home}/bin/asadmin.bat"
       			           failonerror="true">
	  			     <arg line="start-instance"/>
				     <arg line="--user ${glassfish.admin.user}"/>
				     <arg line="--passwordfile ${glassfish.password.file}"/>
			             <arg line="--port ${glassfish.custom.admin.port}"/>
                                     <arg line="--debug=true"/>
			             <arg line="${glassfish.cluster}@{num}"/>
                                </exec>
			      </sequential>
			    </for>
                        </then>
                    </if>
                    <for list="${instance.numbers}" param="num" trim="true">
                      <sequential>
			<waitfor>
			    <http url="http://${container.host}:@{num}${container.port}"/>
			</waitfor>
                      </sequential>
                    </for>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="stop.cluster">
        <attribute name="create-cluster" default="true"/>
        <sequential>
            <echo>

"------------ Stopping ${glassfish.cluster} ------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <exec executable="${container.home}/bin/asadmin" 
                          failonerror="false">
                        <arg line="--port ${glassfish.custom.admin.port}"/>
                        <arg line="stop-cluster"/>
                        <arg line="${glassfish.cluster}"/>
                    </exec>
                    <if>
                        <equals arg1="@{create-cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			    <for list="${instance.numbers}" param="num" trim="true">
			      <sequential>
				<exec executable="${container.home}/bin/asadmin"
				      failonerror="false">
				    <arg line="--port ${glassfish.custom.admin.port}"/>
				    <arg line="delete-local-instance"/>
				    <arg line="${glassfish.cluster}@{num}"/>
				</exec>
			      </sequential>
			    </for>
			    <exec executable="${container.home}/bin/asadmin"
				  failonerror="false">
				<arg line="--port ${glassfish.custom.admin.port}"/>
				<arg line="delete-cluster"/>
				<arg line="${glassfish.cluster}"/>
			    </exec>
                        </then>
                    </if>
                </then>
                <else>
                    <exec executable="${container.home}/bin/asadmin.bat"
                          failonerror="false">
                        <arg line="--port ${glassfish.custom.admin.port}"/>
                        <arg line="stop-cluster"/>
                        <arg line="${glassfish.cluster}"/>
                    </exec>
                    <if>
                        <equals arg1="@{create-cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			   <for list="${instance.numbers}" param="num" trim="true">
			     <sequential>
			       <exec executable="${container.home}/bin/asadmin.bat"
				     failonerror="false">
				   <arg line="--port ${glassfish.custom.admin.port}"/>
				   <arg line="delete-local-instance"/>
				   <arg line="${glassfish.cluster}@{num}"/>
			       </exec>
			     </sequential>
			   </for>
			   <exec executable="${container.home}/bin/asadmin.bat"
				 failonerror="false">
			       <arg line="--port ${glassfish.custom.admin.port}"/>
			       <arg line="delete-cluster"/>
			       <arg line="${glassfish.cluster}"/>
			   </exec>
                       </then>
                    </if>
		</else>
            </if>
        </sequential>
    </macrodef>


    <macrodef name="debug.domain">
        <attribute name="create-domain" default="true"/>
        <attribute name="create-cluster" default="true"/>
        <sequential>
            <echo>

"------------ Starting ${glassfish.custom.domain} in debug mode------------"

            </echo>
            <if>
                <os family="unix"/>
                <then>
                    <if>
                        <equals arg1="@{create-domain}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin"
				failonerror="true">
			      <arg line="create-domain"/>
			      <arg line="--user ${glassfish.admin.user}"/>
			      <arg line="--passwordfile ${glassfish.password.file}"/>
			      <arg line="--portbase ${glassfish.portbase}"/>
			      <arg line="${glassfish.custom.domain}"/>
			  </exec>
                        </then>
                    </if>
                    <exec executable="${container.home}/bin/asadmin"
                          failonerror="true">
                        <arg line="start-domain"/>
                        <arg line="--debug true"/>
                        <arg line="--user ${glassfish.admin.user}"/>
                        <arg line="${glassfish.custom.domain}"/>
                    </exec>
                    <if>
                      <not>
                        <equals arg1="${force.no.cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                      </not>
                      <then>
                        <debug.cluster create-cluster="@{create-cluster}"/>
                      </then>
                      <else>
			<waitfor>
			    <http url="http://${container.host}:${glassfish.portbase.tenthousandsplace}0080"/>
			</waitfor>
                      </else>
                    </if>
                </then>
                <else>
                    <if>
                        <equals arg1="@{create-domain}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin.bat"
				failonerror="true">
			      <arg line="create-domain"/>
			      <arg line="--user ${glassfish.admin.user}"/>
			      <arg line="--passwordfile ${glassfish.password.file}"/>
			      <arg line="--portbase ${glassfish.portbase}"/>
			      <arg line="${glassfish.custom.domain}"/>
			  </exec>
                        </then>
                    </if>
                    <exec executable="${container.home}/bin/asadmin.bat"
                          spawn="true">
                        <arg line="start-domain"/>
                        <arg line="--user ${glassfish.admin.user}"/>
                        <arg line="${glassfish.custom.domain}"/>
                    </exec>
                    <if>
                      <not>
                        <equals arg1="${force.no.cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                      </not>
                      <then>
                        <debug.cluster create-cluster="@{create-cluster}"/>
                      </then>
                      <else>
			<waitfor>
			    <http url="http://${container.host}:${glassfish.portbase.tenthousandsplace}0080"/>
			</waitfor>
                      </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="stop.domain">
        <attribute name="create-domain" default="true"/>
        <attribute name="create-cluster" default="true"/>
        <sequential>
            <if>
                <os family="unix"/>
                <then>
                    <if>
                      <not>
                        <equals arg1="${force.no.cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                      </not>
                      <then>
                        <stop.cluster create-cluster="@{create-cluster}"/>
                      </then>
                    </if>
                    <echo>

"------------ Stopping ${glassfish.custom.domain} ------------"

                    </echo>
                    <exec executable="${container.home}/bin/asadmin">
                        <arg line="stop-domain"/>
                        <arg line="${glassfish.custom.domain}"/>
                    </exec>
                    <if>
                        <equals arg1="@{create-domain}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin">
			      <arg line="delete-domain"/>
			      <arg line="${glassfish.custom.domain}"/>
			  </exec>
                        </then>
                    </if>
                </then>
                <else>
                    <if>
                      <not>
                        <equals arg1="${force.no.cluster}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                      </not>
                      <then>
                        <stop.cluster create-cluster="@{create-cluster}"/>
                      </then>
                    </if>
                    <echo>

"------------ Stopping ${glassfish.custom.domain} ------------"

                    </echo>
                    <exec executable="${container.home}/bin/asadmin.bat"
                          spawn="true">
                        <arg line="stop-domain"/>
                        <arg line="${glassfish.custom.domain}"/>
                    </exec>
                    <if>
                        <equals arg1="@{create-domain}" 
                                casesensitive="false" trim="true"
                                arg2="true" />
                        <then>
			  <exec executable="${container.home}/bin/asadmin.bat"
				spawn="true">
			      <arg line="delete-domain"/>
			      <arg line="${glassfish.custom.domain}"/>
			  </exec>
                        </then>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>


    <!-- ************ Compiler Defaults *************************************** -->


    <!-- ************ Executable Targets ************************************** -->

    <target name="main">
    </target>

    <target name="edburns">

    <propertyregex override="true"
                   property="groupPath" input="${groupId}"
                   regexp="\." replace="/" global="true" />
<echo>${groupId} ${groupPath}</echo>
    </target>

</project>

