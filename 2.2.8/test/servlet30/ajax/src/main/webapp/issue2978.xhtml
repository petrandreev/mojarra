<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
****** NOTE: There is NO HtmlUnit test for this page (issue) because HtmlUnit cannot
      handle programmatic creation of IFrame onload callback (done in JSF)
      for IE. IFrame is still used because the form is multipart/form-data.
      This tests standard ajax in conjuction with that form enc type.
******
-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets">
<f:view contentType="text/html"/>
<h:head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <title>Ajax</title>
</h:head>
<h:body>
   <!-- Displays Form Elements Through Lifecycle Of Ajax Request -->

   <script type="text/javascript">
      var statusUpdate = function statusUpdate(data) {
          var statusArea = document.getElementById("statusArea");
          var text = statusArea.value;
          if (data.type === "event") {
              if (data.status === "begin") {
                  statusArea.value = "";
                  text = statusArea.value;
              }
              text = text +" Event: "+data.status+" ";
              statusArea.value = text;
              if (data.status === "begin" || data.status === "complete" ||
                  data.status === "success") {
                  displayFormElements();
              }
          }
      }
      var displayFormElements = function displayFormElements() {
           var statusArea = document.getElementById("statusArea");
           var text = statusArea.value;
           var form = document.forms[0];
           var elements = form.childNodes;
           var i = 0;
           while(true) {
               if (i == elements.length) {
                   break;
               }
               if (typeof elements[i].name === "undefined") {
                   i++;
                   continue;
               }
               text = text + elements[i].name+" ";
               statusArea.value = text;
               i++;
           }
      }
      var beforeAjax = function beforeAjax() {
          var statusArea = document.getElementById("statusArea");
          statusArea.value = "";
          displayFormElements();
      }
      var afterAjax = function beforeAjax() {
          var statusArea = document.getElementById("statusArea");
          statusArea.value = "";
          displayFormElements();
      }

   </script>
    <h:form id="form1" enctype="multipart/form-data"> 
        <h:outputScript name="jsf.js" library="javax.faces" target="head"/>
        <h:outputScript name="echo1.js" target="head"/>
        <b>This page displays form elements before, during an after an Ajax request.</b><br/>
        <b>The Status box displays the form elements after each button push.</b>
        <ul>
        <li>Press the <i>Before Ajax</i> button.</li>
        <li>Enter a value in the input field and press the <i>Ajax</i>button to cause an Ajax Request.<br/>
            You will see form elements through the lifecycle of an Ajax request.</li>
        <li>Press the <i>After Ajax</i> button.</li>
        </ul>
         
        Output: <h:outputText id="out1" value="#{ajaxecho.str}"/>
        <br/>
        Input: <h:inputText id="in1" value="#{ajaxecho.str}"/>
        <!-- Increment the counter on the server, and the client -->
        <br/>
        <br/>
        <h:commandButton id="button1" value="Before Ajax" onclick="beforeAjax(); return false;"/>
        <br/>
        <br/>
        <h:commandButton id="button2" value="Ajax">
           <f:ajax render="@form" execute="@this form1:in1" onevent="statusUpdate"/>
        </h:commandButton>
        <br/>
        <br/>
        <h:commandButton id="button3" value="After Ajax" onclick="afterAjax(); return false;"/>
        <br/>
        <h:messages/>
    </h:form>

   <p>
   <h3> Status:</h3>
   <textarea id="statusArea" cols="40" rows="10" readonly="readonly" />
   </p>

</h:body>
</html>
