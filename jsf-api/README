			     JSR #000127
		  Java Server Faces 0.03

This README covers the jsf-api and jsf-ri workspaces.

The key goal for the Java Server Faces project is to build a UI
framework which can easily be embraced by tools in order to draw a
larger development base to Java server application development.

http://java.sun.com/aboutJava/communityprocess/jsr/jsr_127.html
http://wspack.sfbay.sun.com/jsf/

This CVS module contains the sources for Java Server Faces 0.03 API.

0.03 Release notes:

Changes impacting Faces authors:

- Removal of UseFaces tag.  Please remove any usage of the UseFaces tag
  in your JSP Pages.

- Introduction of Page Superclass.  Replacing UseFaces is the faces Page
  Superclass.  Please put before your taglib declaration in each JSP
  Page that uses Faces tags.

    <%@ page extends="com.sun.faces.Page" %>

- Introduction of NavigationMap tag.  Define a NavigationMap tag before
  your Form tag that shows where to go from this JSP page.  Like this:

        <faces:NavigationMap id="navMap" scope="session" >
            <faces:outcome commandName="login" outcome="success" 
                    targetAction="forward"
                    targetPath = "welcome.jsp" />

            <faces:outcome commandName="login" outcome="failure" 
                    targetAction="forward"
                    targetPath = "error.jsp" />
        </faces:NavigationMap>

  Then, reference this NavigationMap by id in the Form tag:

     <faces:Form id="basicForm" model="LoginBean" navigationMapId="navMap" >

Internal Changes, not impacting Faces authors:

- Introduction of LifecycleStage mechanism.  This is a major RI change.
  Prior to this change, Faces relied on the JSP Custom Tag handlers to
  drive UIComponent creation and rendering.  This release causes each
  Request to the faces server to go thru the following LifecycleStage
  segments:

  wireUp: The JSP Page is parsed by the included hacked jasper engine
  and you end up with a complete tree of UIComponents, rooted in a
  UIPage instance.

  init: Components can do any per request initialization (currently none)

  restoreState: Any state persisting on a postback is applied to the
  tree from wireUp.  Currently we just replace the root of the tree from
  wireUp with a root we stored in the HttpSession under the requestURI
  key on the previous request.  If there is no entry in the HttpSession
  under that key, this stage currently does nothing.

  applyNewValues: Currently does nothing.  Will be where the value
  change paramaters are pulled out of the request query string and
  applied to their appropriate UIComponent, generating
  ValueChangeEvents.

  processEvents: queue events, dispatch events, handle navigation

  preRender: currently does nothing

  saveState: Currently store the root of this component tree in the
  HttpSession under the key requestURI.  This entry in the HttpSession
  only lasts until the request is processed.

  render: Call back to the HttpJspPage implementation's _jspService() to
  render the tree via the tag handlers.

  dispose: dispose the tree.

- Removal of FacesFilter, replace with Page superclass.

- UIComponent instances are no longer stored in ObjectManager.  Rather,
  there is a new interface, TreeNavigator, that wraps the UIPage root of
  the component tree and provides methods to find a component by id, and
  for traversing the tree.

Milestone 1 Release notes:

At the completion of Milestone 1, we have:

1. An abstract RenderKit framework

2. A concrete implementation of a RenderKit for HTML,
   with Renderers for WForm, WOutput, WCommand and
   WSelectBoolean

3. A mechanism for advertising and plugging in this
   concrete implementation to the abstract framework.

4. WComponent sub-classes for the above
   Renderers.

What we learned during the construction of M1:

During the construction of this milestone, we encountered some problems
with the way the JSF-API handled bootstrapping.  These problems were
resolved by following the pattern used in JAXP for connecting the a JSR
interface to its implementation in a pluggable way.

We learned how to create a custom tag lib, install it in a web-app.  We
got a good feel for the problem space.

We came upon a "chicken and egg" problem regarding the construction and
initialization of the RenderContext: It's not possible to fully
construct and initialize a RenderContext using the factory method
without exposing some JSP specific data.  Our solution to this problem
is to force the user of the RenderContext to create an instance with a
factory method, then initialize it.  See
<jsf-ri/src/com/sun/faces/taglib/html_basic/UseFacesTag.java.doStartTag()>.
This solution may need revisiting.

Testing MileStone 1 using Tomcat 3.2 resulted in some exceptions. So be sure
to upgrade to version 4.0 and above.
