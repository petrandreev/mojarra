/* * $Id: RequiredValidator.java,v 1.9 2003/01/21 20:37:15 eburns Exp $ *//* * Copyright 2002-2003 Sun Microsystems, Inc. All rights reserved. * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. */package javax.faces.validator;import javax.faces.component.AttributeDescriptor;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.context.Message;/** * <p><strong>RequiredValidator</strong> is a {@link Validator} that checks * for the existence of a value for the associated component.  For the purposes * of this Validator, "existence" means a non-<code>null</code> value returned * by the <code>getValue()</code> method.</p> * * <p><strong>FIXME</strong> - In .03, a zero-length String would also fail * this Validator -- which behavior do we want?</p> */public class RequiredValidator extends ValidatorBase {    // ----------------------------------------------------- Manifest Constants    /**     * <p>The message identifier of the {@link Message} to be created if     * this validation fails.</p>     */    public static final String FAILED_MESSAGE_ID =        "javax.faces.validator.RequiredValidator.FAILED";    // --------------------------------------------------------- Public Methods    public void validate(FacesContext context, UIComponent component) {        if ((context == null) || (component == null)) {            throw new NullPointerException();        }        boolean isValid = true;        Object value = component.getValue();        if (value == null) {            isValid = false;        }	else if (value instanceof String) {	    isValid = ((String)value).length() > 0;	}	if (!isValid) {            context.addMessage(component,                               getMessage(context, FAILED_MESSAGE_ID));            component.setValid(false);	}    }}