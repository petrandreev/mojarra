<?xml version='1.0' encoding='UTF-8'?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License). You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the License at
 https://javaserverfaces.dev.java.net/CDDL.html or
 legal/CDDLv1.0.txt. 
 See the License for the specific language governing
 permission and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at legal/CDDLv1.0.txt.    
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 [Name of File] [ver.__] [Date]
 
 Copyright 2005 Sun Microsystems Inc. All Rights Reserved
-->


<!--
  =======================================================================
    JSF-API build file
  =======================================================================
-->
<project name="JSF-API" default="main" basedir=".">

    <property file="${user.home}/build.properties"/>
    <property file="../build.properties"/>

    <import file="${jsf.build.home}/common/ant/common.xml"/>

    <!-- Structural -->
    <property name="doc.dir" value="${basedir}/doc"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="tools.dir" value="${basedir}/tools"/>
    <property name="test.dir" value="${basedir}/test"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="build.temp.dir" value="${build.dir}/temp"/>
    <property name="build.test.dir" value="${build.dir}/test"/>
    <property name="build.generate.dir" value="${build.dir}/generate"/>
    <property name="build.javadocs.dir" value="${build.dir}/javadocs"/>
    <property name="build.renderkitdoc.dirs"
              value="${build.dir}/renderkitdocs"/>
    <property name="build.mifdocs.dir" value="${build.dir}/mifdocs"/>
    <property name="javadoc.private" value="false"/>
    <property name="javadoc.protected" value="true"/>

    <property name="assertion.classes" value="-ea:javax.faces..."/>
    <property name="name" value="jsf-api"/>
    <property name="Name" value="JavaServer Faces API"/>

    <path id="test.classpath">
        <pathelement location="${build.classes.dir}"/>
        <pathelement location="${build.test.dir}"/>
        <pathelement location="${jsf.test.jar}"/>
        <pathelement location="${tools.dir}/build/classes"/>
        <path refid="sun.commons.classpath"/>
        <path refid="compile.classpath"/>
        <path refid="junit.classpath"/>
    </path>

    <property name="test.factory"
              value="org.apache.commons.logging.impl.LogFactoryImpl"/>
    <property name="test.failonerror" value="true"/>
    <property name="test.level" value="error"/>
    <property name="test.log"
              value="org.apache.commons.logging.impl.SimpleLog"/>
    <property name="test.runner" value="junit.textui.TestRunner"/>


    <!--
         ===================================================================
           Prepare the build
         ===================================================================
    -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.lib.dir}"/>
        <mkdir dir="${build.javadocs.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
    </target>

    <target name="attributes"
            description="Recreate attributes include files from property include files"
            depends="prepare">

        <!-- Copy just the properties files we wish to convert -->
        <copy todir="${doc.dir}"
              overwrite="true">
            <mapper type="glob"
                    from="*-props.xml"
                    to="*-attrs.xml"/>
            <fileset dir="${doc.dir}">
                <include name="*-props.xml"/>
                <exclude name="actionsource-props.xml"/>
                <exclude name="actionsource2-props.xml"/>
                <exclude name="editable-props.xml"/>
                <exclude name="valueholder-props.xml"/>
                <exclude name="ui*-props.xml"/>
            </fileset>
        </copy>

        <!-- Replace "property" with "attribute" in relevant cases -->
        <replace dir="${doc.dir}"
                 summary="true">
            <include name="*-attrs.xml"/>
            <replacefilter token="&lt;property"
                           value="&lt;attribute"/>
            <replacefilter token="&lt;/property"
                           value="&lt;/attribute"/>
            <replacefilter token="Properties"
                           value="Attributes"/>
        </replace>

    </target>

    <!--
         ===================================================================
           Build the API code
         ===================================================================
    -->

    <target name="compile">
        <jsf.javac destdir="${build.classes.dir}"
                   srcdir="${src.dir}:${build.generate.dir}">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </jsf.javac>
    </target>

    <target name="build"
            depends="prepare,generate,copy.template.sources,compile">
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <copy todir="${build.lib.dir}">
            <fileset dir="${doc.dir}">
                <include name="*.dtd"/>
            </fileset>
        </copy>
    </target>

    <target name="check.generation.necessity">
        <uptodate property="skip.generation"
                  targetfile="${build.generate.dir}/last-generation">
            <srcfiles dir="${basedir}/doc">
                <include name="standard-html-renderkit.xml"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="generate"
            depends="check.generation.necessity"
            unless="skip.generation">

        <delete dir="${build.generate.dir}"/>      
        <antcall target="tools.javac"/>
        <taskdef name="generateComponents"
                 classname="com.sun.faces.ant.ComponentGenTask">
            <classpath>
                <path refid="sun.commons.classpath"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <generateComponents
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="sun.commons.classpath"/>
                <path refid="compile.classpath"/>
                <pathelement location="${jsf-api.jar}"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <assertions>
                <enable/>
            </assertions>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
        </generateComponents>

        <copy todir="${build.generate.dir}/javax/faces/component/html"
              file="${src.dir}/javax/faces/component/html/package.html"/>

        <touch file="${build.generate.dir}/last-generation"/>

    </target>

    <target name="facesdoc" 
            description="Create the Standard HTML Renderkit Documentation">
        <antcall target="tools.javac"/>
        <taskdef name="generateRenderkitDocs"
                 classname="com.sun.faces.ant.RenderkitDocGenTask">
            <classpath>
                <path refid="sun.commons.classpath"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>        
        <generateRenderkitDocs
              generatorConfig="${tools.dir}/conf/HtmlBasicTaglib21.properties"
              facesConfig="${standard.renderkit.xml}"
              fork="true">
            <classpath>
                <path refid="sun.commons.classpath"/>
                <path refid="compile.classpath"/>
                <pathelement location="${jsf-api.jar}"/>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
            <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
            <sysproperty key="tools.src.dir" value="${tools.dir}/src"/>
            <assertions>
                <enable/>
            </assertions>
        </generateRenderkitDocs>      

    </target>

    <target name="tools.javac">
	<path id="ant.classpath">
	    <pathelement location="${myenv.ANT_HOME}/lib/ant.jar"/>
	</path>

        <mkdir dir="${tools.dir}/build/classes"/>
        <jsf.javac srcdir="${tools.dir}/src"
                   destdir="${tools.dir}/build/classes">
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="sun.commons.classpath"/>
                <path refid="ant.classpath"/>
            </classpath>
        </jsf.javac>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${tools.dir}/src"
                     includes="**/*.properties"/>
        </copy>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${impl.dir}/src"
                     includes="**/LogStrings.properties"/>
        </copy>
        <copy todir="${tools.dir}/build/classes/com/sun/faces"
              flatten="true">
            <fileset dir="${api.dir}/doc"
                     includes="*.dtd,*.xsd"/>
        </copy>
        <copy todir="${tools.dir}/build/classes">
            <fileset dir="${tools.dir}/src"
                     includes="**/*.html,**/*.top,**/*.bottom,**/*.css"/>            
        </copy>
    </target>


    <target name="copy.template.sources"
            description="Copy template sources from ${tools.dir}/template-source">

        <mkdir dir="${build.generate.dir}/javax/faces/component"/>
        <filter token="protection" value=""/>

        <filter token="package" value="javax.faces.component"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/javax/faces/component"
              filtering="true"/>

        <copy todir="${build.generate.dir}/javax/faces/component"
              filtering="true">
            <fileset dir="${basedir}/template-src">
                <include name="*Adapter.java"/>
            </fileset>
        </copy>

        <filter token="package" value="javax.faces.convert"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/javax/faces/convert"
              filtering="true"/>

        <filter token="package" value="javax.faces.validator"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/javax/faces/validator"
              filtering="true"/>

        <filter token="package" value="javax.faces.webapp"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/javax/faces/webapp"
              filtering="true"/>

        <replace
              file="${build.generate.dir}/javax/faces/component/MethodBindingMethodExpressionAdapter.java"
              token="@serialVersionUID@"
              value="7334926223014401689L"/>

        <replace
              file="${build.generate.dir}/javax/faces/component/MethodExpressionMethodBindingAdapter.java"
              token="@serialVersionUID@"
              value="-1822420567946048452L"/>

        <replace
              file="${build.generate.dir}/javax/faces/component/ValueExpressionValueBindingAdapter.java"
              token="@serialVersionUID@"
              value="2388977392466671243L"/>

        <replace
              file="${build.generate.dir}/javax/faces/component/ValueBindingValueExpressionAdapter.java"
              token="@serialVersionUID@"
              value="-8015491904782686906L"/>

    </target>

    <target name="prepare.test">
        <mkdir dir="${api.test.results.dir}"/>
    </target>

    <!--
         ===================================================================
           Build the test code
         ===================================================================
    -->

    <target name="build.test.dir" depends="build,prepare.test">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.test.dir}"/>

        <jsf.javac srcdir="${test.dir}"
                   destdir="${build.test.dir}">
            <classpath>
                <path refid="test.classpath"/>
                <path refid="sun.commons.classpath"/>
            </classpath>
        </jsf.javac>

        <copy todir="${build.test.dir}">
            <fileset dir="${test.dir}" includes="**/*.properties"/>
        </copy>

        <delete file="${basedir}/test/javax/faces/mock/MockPageContext.java"/>

        <copy todir="${build.test.dir}">
            <fileset dir="${test.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

    </target>


    <!--
         ===================================================================
           Test targets
         ===================================================================
    -->


    <target name="test"
            description="Run all JUnit test cases"
            depends="build.test.dir,
                copy.template.sources,
                test.FactoryFinder,
                test.FactoryFinder2,
                test.PhaseId,
                test.component,
                test.validator,
                test.mock,
                test.model,
                test.webapp">
    </target>

    <target name="test.FactoryFinder" depends="build.test.dir">
        <echo message="Running FactoryFinder tests ..."/>
        <mkdir dir="${build.classes.dir}/META-INF/services"/>
        <echo
              file="${build.classes.dir}/META-INF/services/javax.faces.context.FacesContextFactory">javax.faces.mock.MockFacesContextFactoryExtender</echo>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/FactoryFinderTestCase.class"/>
            </tests>
        </jsf.junit>
        <delete dir="${build.classes.dir}/META-INF"/>
    </target>

    <target name="test.FactoryFinder2" depends="build.test.dir">
        <echo message="Running FactoryFinder tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/FactoryFinderTestCase2.class"/>
            </tests>
        </jsf.junit>
    </target>   

    <target name="test.PhaseId" depends="build.test.dir">
        <echo message="Running PhaseId tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/event/PhaseIdTest.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.component" depends="build.test.dir">
        <echo message="Running javax.faces.component tests ..."/>
        <delete file="${api.test.results.dir}/api-test.log"/>
        <delete file="${api.test.results.dir}/test-logging.properties"/>
        <echo file="${api.test.results.dir}/test-logging.properties">
handlers=java.util.logging.FileHandler
java.util.logging.FileHandler.append=true
java.util.logging.FileHandler.encoding=UTF-8
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.FileHandler.pattern=${api.test.results.dir}/api-test.log
javax.faces.level=ALL
        </echo>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}"
                   logging.config.file="${api.test.results.dir}/test-logging.properties">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/component/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.validator" depends="build.test.dir">
        <echo message="Running javax.faces.validator tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/validator/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.mock" depends="build.test.dir">
        <echo message="Running javax.faces.mock tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/mock/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.model" depends="build.test.dir">
        <echo message="Running javax.faces.model tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/model/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.webapp" depends="build.test.dir">
        <echo message="Running javax.faces.webapp tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <custom-sysproperties>
                <sysproperty key="base.dir" value="${basedir}/build"/>
            </custom-sysproperties>
            <tests>
            <fileset dir="${build.test.dir}"
                         includes="javax/faces/webapp/*TestCase.class"
                         excludes="javax/faces/webapp/UIComponentTagTestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <!--
         ===================================================================
           Create the standard-html-renderkit.xml document
         ===================================================================
    -->

    <target name="create.standard.xml" depends="attributes">
        <copy
              file="${basedir}/../jsf-ri/src/com/sun/faces/standard-html-renderkit-impl.xml"
              todir="${basedir}/doc"/>
        <exec executable="xmllint" dir="${basedir}/doc" failonerror="true">
            <arg
                  line="--xinclude --format --output standard-html-renderkit.xml standard-html-renderkit-base.xml"/>
        </exec>
        <replace file="${basedir}/doc/standard-html-renderkit.xml">
            <replacetoken>
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>]]></replacetoken>
            <replacevalue><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!-- DO NOT EDIT     DO NOT EDIT    DO NOT EDIT    DO NOT EDIT    DO NOT EDIT -->]]>
            </replacevalue>
        </replace>
        <delete file="${basedir}/doc/standard-html-renderkit-impl.xml"/>

        <mkdir dir="${tools.dir}/build/classes"/>
        <javac srcdir="${tools.dir}/src"
               destdir="${tools.dir}/build/classes">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>

        <!-- validate the generated standard-html-renderkit.xml -->
        <taskdef name="validate" classname="com.sun.faces.ant.ValidateTask">
            <classpath>
                <pathelement location="${tools.dir}/build/classes"/>
            </classpath>
        </taskdef>
        <validate schemaDir="${basedir}/doc"/>
    </target>

    <!--
         ===================================================================
           Create the jars
         ===================================================================
    -->
    <target name="jars" depends="build">

        <jsf.manifested.jar jarfile="${build.lib.dir}/${name}.jar"
                            basedir="${build.classes.dir}"
                            extension-name="javax.faces"
                            includes="**/*.class,**/LogStrings.properties"/>

    </target>


    <!--
         ===================================================================
           Clean up build and distribution directories
         ===================================================================
    -->
    <target name="clean" description="Clean build directory">
        <delete dir="${build.dir}"/>
        <delete dir="${api.test.results.dir}"/>
        <delete>
            <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
        <!-- delete this file since it's copied from another file based on JSP level -->
        <delete file="${basedir}/test/javax/faces/mock/MockPageContext.java"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${tools.dir}/build"/>
    </target>


    <!--
         ===================================================================
           Clean everything
         ===================================================================
    -->
    <target name="allclean" depends="clean">
    </target>


    <!--
         ===================================================================
           Create the API documentation
         ===================================================================
    -->

    <target name="javadoc_check">
        <uptodate property="javadoc.notrequired"
                  targetfile="${build.javadocs.dir}/packages.html">
            <srcfiles dir="${src.dir}" includes="**/*.java"/>
            <srcfiles dir="${build.generate.dir}" includes="**/*.java"/>
        </uptodate>
    </target>

    <target name="javadocs"
            depends="prepare,javadoc_check,generate,generate.javadocs,facesdoc"
            unless="javadoc.notrequired"
            description="Create the JavaDoc API documentation">

        <copy todir="${build.javadocs.dir}/javax/faces/component"
              file="${src.dir}/javax/faces/component/UIComponentHierarchy.jpg"/>
        <copy todir="${build.javadocs.dir}/javax/faces/event"
              file="${src.dir}/javax/faces/event/EventHierarchy.jpg"/>
    </target>


    <target name="generate.javadocs">
        <javadoc packagenames="javax.*"
                 destdir="${build.javadocs.dir}"
                 Overview="${src.dir}/overview.html"
                 private="${javadoc.private}"
                 protected="${javadoc.protected}"
                 windowtitle="${Name} (${spec.version})"
                 source="1.5"
                 doctitle="${Name} (${spec.version})"
                 bottom="Copyright &#169; 2002-2006 Sun Microsystems, Inc. All Rights Reserved.">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${build.generate.dir}">
                <include name="**/*.java"/>
            </fileset>
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>


    <!--
         ===================================================================
           Main target
         ===================================================================
    -->
    <target name="main" depends="update,jars"
            description="Compile API classes and build JAR file"/>

    <!--
         ===================================================================
           Distributions target
         ===================================================================
    -->
    <target name="dist" depends="main,javadocs"
            description="Build distribution files">

        <!-- Create the distributions directory -->
        <mkdir dir="${dist.dir}"/>

        <!-- Create the binary distribution -->
        <zip destfile="${dist.dir}/${name}-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="lib/**"
                        prefix="${name}-${impl.version}"/>
        </zip>

        <!-- Create the javadocs distribution -->
        <zip destfile="${dist.dir}/${name}-javadocs-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="javadocs/**"
                        prefix="${name}-${impl.version}"/>
            <zipfileset dir="${build.dir}/generate"
                        includes="facesdoc/**"
                        prefix="${name}-${impl.version}"/>

        </zip>


        <!-- Create the source distribution -->
        <zip destfile="${dist.dir}/${name}-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml COPYRIGHT LICENSE.html"
                        prefix="${name}"/>
            <zipfileset dir="${src.dir}"
                        excludes="**/CVS/**"
                        prefix="${name}/src"/>
            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="${name}/test"/>
            <zipfileset dir="${doc.dir}"
                        includes="*.dtd,*.xsd,standard-html-renderkit.xml"
                        prefix="${name}/doc"/>
            <zipfileset dir="${tools.dir}"
                        excludes="**/CVS/**, **/build/**"
                        prefix="jsf-tools"/>
        </zip>

    </target>

<target name="push-to-maven-prepare">
  <taskdef resource="maven-repository-importer.properties">
    <classpath>
      <pathelement path="${maven.repository.importer.jar}" />
    </classpath>
  </taskdef>
  <delete dir="${build.dir}/maven-repo" /><!-- clean it -->
  <maven-repository-importer destdir="${build.dir}/maven-repo" version="${snapshot.version}">
    <artifact jar="${build.lib.dir}/jsf-api.jar"  pom="jsf-api.pom" />
  </maven-repository-importer>
</target>

<target name="push-to-maven" depends="push-to-maven-prepare">
  <!-- import to CVS-->
  <tstamp />
  <echo>importing to CVS...</echo>
  <cvs dest="${build.dir}/maven-repo">
    <commandline>
      <argument value="-d:pserver:${user.name}@cvs.dev.java.net:/cvs" />
      <argument line="-z9 import -ko -W *.jar -kb -m" />
      <argument value="deploying new jars to the java.net maven repository" />

      <argument value="javaserverfaces-sources/repo" />
      <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}" />
    </commandline>
  </cvs>
</target>


</project>
