<?xml version="1.0"?>

<!--
 Copyright 2002 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->


<!-- 
  =======================================================================
    JSF-API build file                                                      
  ======================================================================= 
-->
<project name="JSF-API" default="main" basedir=".">

  <property file="build.properties"/>                <!-- Component local   -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->

  <property name="Name"             value="jsf-api"/>
  <property name="name"             value="jsf-api"/>
  <property name="version"          value="0.04"/>

  <property name="debug"            value="true" />
  <property name="deprecation"      value="false" />
  <property name="optimize"         value="false" />

  <property name="lib.home"         value="${basedir}/lib"/>
  <property name="src.dir"          value="${basedir}/src"/>
  <property name="test.dir"         value="${basedir}/test"/>

  <property name="junit.jar"        value="${lib.home}/junit.jar"/>
  <property name="servlet.jar"      value="${lib.home}/servlet.jar"/>

  <property name="build.dir"        value="build"/>
  <property name="build.classes"    value="${build.dir}/classes"/>
  <property name="build.lib"        value="${build.dir}/lib"/>
  <property name="build.test"       value="${build.dir}/test"/>
  <property name="build.javadocs"   value="${build.dir}/javadocs"/>

  <path id="compile.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${servlet.jar}"/>
  </path>

  <property name="test.failonerror" value="true"/>
  <property name="test.runner"      value="junit.textui.TestRunner"/>

  <path id="test.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${servlet.jar}"/>
  </path>


  <!-- 
       ===================================================================
         Prepare the build              
       =================================================================== 
  -->
  <target name="prepare">
    <tstamp />
  </target>


  <!-- 
       ===================================================================
         Build the API code
       =================================================================== 
  -->
  <target name="build" depends="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.lib}"/>
    
    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}" >
      <classpath refid="compile.classpath" />
    </javac>
    
    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>

  </target>


  <!-- 
       ===================================================================
         Build the test code
       =================================================================== 
  -->
  <target name="build.test" depends="build">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.test}"/>
    
    <javac srcdir="${test.dir}"
           destdir="${build.test}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}" >
      <classpath refid="test.classpath" />
    </javac>
    
    <copy todir="${build.test}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>

  </target>


  <!-- 
       =================================================================== 
         Test targets
       =================================================================== 
  -->

  <!-- FIXME - Need test cases for
       UISelectBoolean, UISelectMany, UISelectOne
  -->


  <target name="test"
   description="Run all JUnit test cases"
       depends="build.test,
                test.UIComponent,
                test.UICommand,
                test.UIForm,
                test.UIGraphic,
                test.UIOutput,
                test.UIPanel,
                test.UISelectBoolean,
                test.UISelectMany,
                test.UISelectOne,
                test.UITextEntry">
  </target>

  <target name="test.UIComponent" depends="build.test">
    <echo message="Running UIComponent tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UIComponentTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UICommand" depends="build.test">
    <echo message="Running UICommand tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UICommandTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIForm" depends="build.test">
    <echo message="Running UIForm tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UIFormTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIGraphic" depends="build.test">
    <echo message="Running UIGraphic tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UIGraphicTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIOutput" depends="build.test">
    <echo message="Running UIOutput tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UIOutputTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIPanel" depends="build.test">
    <echo message="Running UIPanel tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UIPanelTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectBoolean" depends="build.test">
    <echo message="Running UISelectBoolean tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UISelectBooleanTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectMany" depends="build.test">
    <echo message="Running UISelectMany tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UISelectManyTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectOne" depends="build.test">
    <echo message="Running UISelectOne tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UISelectOneTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UITextEntry" depends="build.test">
    <echo message="Running UITextEntry tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="javax.faces.component.UITextEntryTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  
  <!-- 
       =================================================================== 
         Create the jars
       =================================================================== 
  -->
  <target name="jars" depends="build">

    <jar jarfile="${build.lib}/${name}.jar" 
         basedir="${build.classes}" > 
    </jar>

  </target>


  <!--
       ===================================================================
         Clean up build and distribution directories
       ===================================================================
  -->
  <target name="clean" description="Clean build directory">
    <delete dir="${build.dir}" />
    <delete> 
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target> 


  <!--
       ===================================================================
         Clean everything
       ===================================================================
  -->
  <target name="allclean" depends="clean">
  </target> 


  <!-- 
       ===================================================================
         Create the API documentation                             
       =================================================================== 
  -->
  
  <target name="javadoc_check">
    <uptodate property="javadoc.notrequired" targetfile="${build.javadocs}/packages.html" >
        <srcfiles dir= "${src.dir}" includes="**/*.java"/>
    </uptodate>
  </target>

  <target name="javadocs" depends="prepare, javadoc_check" 
          unless="javadoc.notrequired"
          description="Create the JavaDoc API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="javax.*"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true" private="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; 2002 Sun Microsystems, Inc. All Rights Reserved.">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>
  

  <!-- 
       =================================================================== 
         Main target
       =================================================================== 
  -->
  <target name="main" depends="jars"
   description="Compile API classes and build JAR file"/>


</project>
