<?xml version="1.0"?>

<!--
 Copyright 2002 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->


<!--
  =======================================================================
    JSF-API build file
  =======================================================================
-->
<project name="JSF-API" default="main" basedir=".">

  <property file="build.properties"/>                <!-- Component local   -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->

  <property name="Name"             value="JavaServer Faces API"/>
  <property name="name"             value="jsf-api"/>
  <property name="version"          value="20030203"/>

  <property name="debug"            value="true" />
  <property name="deprecation"      value="false" />
  <property name="optimize"         value="false" />

  <property name="lib.home"         value="${basedir}/lib"/>
  <property name="src.dir"          value="${basedir}/src"/>
  <property name="test.dir"         value="${basedir}/test"/>
  <property name="dist.dir"         value="${basedir}/dist"/>

  <property name="junit.jar"        value="${lib.home}/junit.jar"/>
  <property name="servlet.jar"      value="${lib.home}/servlet.jar"/>

  <property name="build.dir"        value="build"/>
  <property name="build.classes"    value="${build.dir}/classes"/>
  <property name="build.lib"        value="${build.dir}/lib"/>
  <property name="build.test"       value="${build.dir}/test"/>
  <property name="build.javadocs"   value="${build.dir}/javadocs"/>

  <!-- Default value for debugging arguments is no.  Override in
       build.properties -->
  <property name="debug.jvm.args" value=""/>

  <path id="compile.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${servlet.jar}"/>
  </path>

  <property name="test.failonerror" value="true"/>
  <property name="test.runner"      value="junit.textui.TestRunner"/>

  <path id="test.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${jsf-ri.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${xerces.jar}"/>
  </path>


  <!--
       ===================================================================
         Prepare the build
       ===================================================================
  -->
  <target name="prepare">
    <tstamp />
  </target>


  <!--
       ===================================================================
         Build the API code
       ===================================================================
  -->
  <target name="build" depends="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.lib}"/>

    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}" >
      <classpath refid="compile.classpath" />
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>

  </target>


  <!--
       ===================================================================
         Build the test code
       ===================================================================
  -->
  <target name="build.test" depends="build">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.test}"/>

    <javac srcdir="${test.dir}"
           destdir="${build.test}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}" >
      <classpath refid="test.classpath" />
    </javac>

    <copy todir="${build.test}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>

  </target>


  <!--
       ===================================================================
         Test targets
       ===================================================================
  -->

  <!-- FIXME - Need test cases for
       UISelectBoolean, UISelectMany, UISelectOne
  -->


  <target name="test"
   description="Run all JUnit test cases"
       depends="build.test,
                test.UIComponent,
                test.UIComponentBase,
                test.UICommand,
                test.UIForm,
                test.UIGraphic,
                test.UIInput,
                test.UIOutput,
                test.UIPanel,
                test.UIParameter,
                test.UISelectBoolean,
                test.UISelectMany,
                test.UISelectOne,
                test.UINamingContainer">
  </target>

  <target name="test.UIComponent" depends="build.test">
    <echo message="Running UIComponent tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIComponentTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIComponentBase" depends="build.test">
    <echo message="Running UIComponentBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIComponentBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UICommand" depends="build.test">
    <echo message="Running UICommand tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UICommandTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIForm" depends="build.test">
    <echo message="Running UIForm tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIFormTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIGraphic" depends="build.test">
    <echo message="Running UIGraphic tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIGraphicTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIInput" depends="build.test">
    <echo message="Running UIInput tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIInputTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIOutput" depends="build.test">
    <echo message="Running UIOutput tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIOutputTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIPanel" depends="build.test">
    <echo message="Running UIPanel tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIPanelTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIParameter" depends="build.test">
    <echo message="Running UIParameter tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIParameterTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectBoolean" depends="build.test">
    <echo message="Running UISelectBoolean tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UISelectBooleanTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectMany" depends="build.test">
    <echo message="Running UISelectMany tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UISelectManyTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectOne" depends="build.test">
    <echo message="Running UISelectOne tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UISelectOneTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UINamingContainer" depends="build.test">
    <echo message="Running UINamingContainer tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UINamingContainerTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>


  <!--
       ===================================================================
         Create the jars
       ===================================================================
  -->
  <target name="jars" depends="build">

    <jar jarfile="${build.lib}/${name}.jar"
         basedir="${build.classes}" >
    </jar>

  </target>


  <!--
       ===================================================================
         Clean up build and distribution directories
       ===================================================================
  -->
  <target name="clean" description="Clean build directory">
    <delete dir="${build.dir}" />
    <delete>
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
    <delete dir="${dist.dir}"/>
  </target>


  <!--
       ===================================================================
         Clean everything
       ===================================================================
  -->
  <target name="allclean" depends="clean">
  </target>


  <!--
       ===================================================================
         Create the API documentation
       ===================================================================
  -->

  <target name="javadoc_check">
    <uptodate property="javadoc.notrequired" targetfile="${build.javadocs}/packages.html" >
        <srcfiles dir= "${src.dir}" includes="**/*.java"/>
    </uptodate>
  </target>

  <target name="javadocs" depends="prepare, javadoc_check"
          unless="javadoc.notrequired"
          description="Create the JavaDoc API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="javax.*"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true" private="false" protected="true"
             windowtitle="${Name} (Version ${version})"
             doctitle="${Name} (Version ${version})"
             bottom="Copyright &#169; 2002 Sun Microsystems, Inc. All Rights Reserved.">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>


  <!--
       ===================================================================
         Main target
       ===================================================================
  -->
  <target name="main" depends="jars"
   description="Compile API classes and build JAR file"/>


  <!--
       ===================================================================
         Distributions target
       ===================================================================
  -->
  <target name="dist" depends="main,javadocs"
   description="Build distribution files">

    <!-- Create the distributions directory -->
    <mkdir        dir="${dist.dir}"/>

    <!-- Create the binary distribution -->
    <zip     destfile="${dist.dir}/jsf-api-${version}.zip">
      <zipfileset dir="${build.dir}"
             includes="lib/** javadocs/**"
               prefix="jsf-api-${version}"/>
    </zip>

    <!-- Create the source distribution -->
    <zip     destfile="${dist.dir}/jsf-api-src-${version}.zip">
      <zipfileset dir="${basedir}"
             includes="build.xml COPYRIGHT LICENSE.html"
               prefix="jsf-api-src-${version}"/>
      <zipfileset dir="${src.dir}"
             excludes="**/CVS/**"
               prefix="jsf-api-src-${version}/src"/>
    </zip>

  </target>


  <!--
       ===================================================================
         Issues list
       ===================================================================
  -->
  <target name="issues"
   description="Generate outstanding issues list">
    <style basedir="doc"
           destdir="${build.dir}"
         extension=".html"
             style="doc/OutstandingIssuesDetail.xsl"
          includes="OutstandingIssues.xml"/>
    <move     file="${build.dir}/OutstandingIssues.html"
            tofile="${build.dir}/OutstandingIssuesDetail.html"/>
    <style basedir="doc"
           destdir="${build.dir}"
         extension=".html"
             style="doc/OutstandingIssuesSummary.xsl"
          includes="OutstandingIssues.xml"/>
    <move     file="${build.dir}/OutstandingIssues.html"
            tofile="${build.dir}/OutstandingIssuesSummary.html"/>
    <style basedir="doc"
           destdir="${build.dir}"
         extension=".html"
             style="doc/OutstandingIssuesEffort.xsl"
          includes="OutstandingIssues.xml"/>
    <move     file="${build.dir}/OutstandingIssues.html"
            tofile="${build.dir}/OutstandingIssuesEffort.html"/>

  </target>


</project>
