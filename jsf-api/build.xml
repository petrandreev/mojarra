<?xml version="1.0"?>

<!--
 Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
-->


<!--
  =======================================================================
    JSF-API build file
  =======================================================================
-->
<project name="JSF-API" default="main" basedir=".">

  <property file="build.properties"/>                <!-- Component local   -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->

  <property name="Name"             value="JavaServer Faces API"/>
  <property name="name"             value="jsf-api"/>
  <property name="version"          value="20030903"/>

  <property name="debug"            value="true" />
  <property name="deprecation"      value="false" />
  <property name="optimize"         value="false" />

  <property name="doc.dir"          value="${basedir}/doc"/>
  <property name="src.dir"          value="${basedir}/src"/>
  <property name="test.dir"         value="${basedir}/test"/>
  <property name="dist.dir"         value="${basedir}/dist"/>

  <!-- The locations of necessary jar files -->
  <property name="junit.jar" 
            value="${tomcat.home}/../junit3.8.1/junit.jar"/>
  <property name="servlet.jar" value="${tomcat.home}/common/lib/servlet-api.jar"/>
  <property name="jsp.jar" value="${tomcat.home}/common/lib/jsp-api.jar"/>
  <property name="commons-logging.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-logging.jar"/>
  <property name="commons-digester.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-digester.jar"/>
  <property name="commons-collections.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-collections.jar"/>
  <property name="commons-beanutils.jar" 
            value="${tomcat.home}/jwsdp-shared/lib/commons-beanutils.jar"/>
  <property name="xerces.jar" value="${tomcat.home}/jaxp/lib/endorsed/xercesImpl.jar"/>
  <property name="sax.jar" value="${tomcat.home}/jaxp/lib/endorsed/sax.jar"/>
  <property name="sax.jar" value="${tomcat.home}/jaxp/lib/jaxp-api.jar"/>

  <property name="build.dir"        value="build"/>
  <property name="build.classes"    value="${build.dir}/classes"/>
  <property name="build.lib"        value="${build.dir}/lib"/>
  <property name="build.test"       value="${build.dir}/test"/>
  <property name="build.javadocs"   value="${build.dir}/javadocs"/>
  <property name="build.mifdocs"    value="${build.dir}/mifdocs"/>
  <property name="javadoc.private"  value="false"/>
  <property name="javadoc.protected"  value="true"/>


  <!-- Default value for debugging arguments is no.  Override in
       build.properties -->
  <property name="debug.jvm.args" value=""/>

  <path id="compile.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp.jar}"/>
  </path>

  <path id="test.classpath">
    <pathelement location="${build.classes}"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${sax.jar}"/>
    <pathelement location="${jaxp-api.jar}"/>
  </path>

  <property name="test.factory"
           value="org.apache.commons.logging.impl.LogFactoryImpl"/>
  <property name="test.failonerror" value="true"/>
  <property name="test.level"       value="error"/>
  <property name="test.log"
           value="org.apache.commons.logging.impl.SimpleLog"/>
  <property name="test.runner"      value="junit.textui.TestRunner"/>


  <!--
       ===================================================================
         Prepare the build
       ===================================================================
  -->
  <target name="prepare">
    <tstamp />
  </target>


  <!--
       ===================================================================
         Build the API code
       ===================================================================
  -->
  <target name="build" depends="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.lib}"/>

    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}" >
      <classpath refid="compile.classpath" />
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>

    <copy todir="${build.lib}">
      <fileset dir="${doc.dir}">
        <include name="*.dtd"/>
      </fileset>
    </copy>

  </target>

  <!--
       ===================================================================
         Handle incompatibilities between JSP 2.0 and previous
       ===================================================================
  -->


  <target name="prepare.test" 
          depends="discover.jsp.level,prepare.test.jsp2,prepare.test.jsp12"/>

  <target name="discover.jsp.level">
    <echo message="jsp.jar is ${jsp.jar}"/>
    <available classpath="${jsp.jar}" 
               classname="javax.servlet.jsp.el.VariableResolver"
               property="is.jsp2"/>
    <echo message="${is.jsp2}"/>
  </target>

  <target name="prepare.test.jsp2" if="is.jsp2">
    <copy file="${basedir}/test/javax/faces/mock/MockPageContext.jsp2"
          tofile="${basedir}/test/javax/faces/mock/MockPageContext.java"/>
  </target>

  <target name="prepare.test.jsp12" unless="is.jsp2">
    <copy file="${basedir}/test/javax/faces/mock/MockPageContext.jsp12"
          tofile="${basedir}/test/javax/faces/mock/MockPageContext.java"/>
  </target>

  <!--
       ===================================================================
         Build the test code
       ===================================================================
  -->

  <target name="build.test" depends="build,prepare.test">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.test}"/>

    <javac srcdir="${test.dir}"
           destdir="${build.test}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}" >
      <classpath refid="test.classpath" />
    </javac>

    <delete file="${basedir}/test/javax/faces/mock/MockPageContext.java"/>

    <copy todir="${build.test}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>

  </target>


  <!--
       ===================================================================
         Test targets
       ===================================================================
  -->


  <target name="test"
   description="Run all JUnit test cases"
       depends="build.test,
                test.FactoryFinder,
                test.FactoryFinder2,
                test.UIComponent,
                test.UIComponentBase,
                test.UIComponentBaseState,
                test.UIColumn,
                test.UICommandBase,
                test.UIData,
                test.UIFormBase,
                test.UIGraphicBase,
                test.UIInputBase,
                test.UINamingContainerBase,
                test.UIOutputBase,
                test.UIViewRoot,
                test.UIPanelBase,
                test.UIParameterBase,
                test.UISelectBooleanBase,
                test.UISelectItemBase,
                test.UISelectItemsBase,
                test.UISelectManyBase,
                test.UISelectOneBase,
                test.ConfigFile,
                test.PhaseId,
                test.UIComponentTag">
  </target>

  <target name="test.FactoryFinder" depends="build.test">
    <echo message="Running FactoryFinder tests ..."/>
    <mkdir dir="${build.classes}/META-INF/services"/>
    <echo file="${build.classes}/META-INF/services/javax.faces.context.FacesContextFactory">javax.faces.mock.MockFacesContextFactoryExtender</echo>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.FactoryFinderTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
    <delete dir="${build.classes}/META-INF"/>
  </target>

  <target name="test.FactoryFinder2" depends="build.test">
    <echo message="Running FactoryFinder tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.FactoryFinderTestCase2"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIColumn" depends="build.test">
    <echo message="Running UIColumn tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIColumnTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIComponent" depends="build.test">
    <echo message="Running UIComponent tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIComponentTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIComponentBase" depends="build.test">
    <echo message="Running UIComponentBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIComponentBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIComponentBaseState" depends="build.test">
    <echo message="Running UIComponentBaseState tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIComponentBaseStateTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UICommandBase" depends="build.test">
    <echo message="Running UICommandBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UICommandBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIData" depends="build.test">
    <echo message="Running UIData tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.UIDataTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIFormBase" depends="build.test">
    <echo message="Running UIFormBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIFormBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIGraphicBase" depends="build.test">
    <echo message="Running UIGraphicBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIGraphicBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIInputBase" depends="build.test">
    <echo message="Running UIInputBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIInputBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UINamingContainerBase" depends="build.test">
    <echo message="Running UINamingContainerBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UINamingContainerBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIOutputBase" depends="build.test">
    <echo message="Running UIOutputBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIOutputBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIViewRoot" depends="build.test">
    <echo message="Running UIViewRoot tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIViewRootBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIPanelBase" depends="build.test">
    <echo message="Running UIPanelBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIPanelBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIParameterBase" depends="build.test">
    <echo message="Running UIParameterBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UIParameterBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectBooleanBase" depends="build.test">
    <echo message="Running UISelectBooleanBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UISelectBooleanBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectItemBase" depends="build.test">
    <echo message="Running UISelectItemBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UISelectItemBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectItemsBase" depends="build.test">
    <echo message="Running UISelectItemsBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UISelectItemsBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectManyBase" depends="build.test">
    <echo message="Running UISelectManyBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UISelectManyBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UISelectOneBase" depends="build.test">
    <echo message="Running UISelectOneBase tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.component.base.UISelectOneBaseTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>


  <target name="test.ConfigFile" depends="build.test">
    <echo message="Running Configuration File tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <sysproperty key="base.dir" value="${basedir}"/>
      <sysproperty key="org.apache.commons.logging.LogFactory"
                 value="${test.factory}"/>
      <sysproperty key="org.apache.commons.logging.Log"
                 value="${test.log}"/>
      <sysproperty key="org.apache.commons.logging.simplelog.defaultlog"
                 value="${test.level}"/>
      <arg value="javax.faces.webapp.ConfigFileTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.UIComponentTag" depends="build.test">
    <echo message="Running UIComponentTag tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.webapp.UIComponentTagTestCase"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

  <target name="test.PhaseId" depends="build.test">
    <echo message="Running PhaseId tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <jvmarg line="${debug.jvm.args}"/>
      <arg value="javax.faces.event.PhaseIdTest"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>



  <!--
       ===================================================================
         Create the jars
       ===================================================================
  -->
  <target name="jars" depends="build">

    <jar jarfile="${build.lib}/${name}.jar"
         basedir="${build.classes}" >
	 <manifest>
	  <attribute name="Specification-Title" value="JavaServer Faces"/>
	  <attribute name="Specification-Version" value="1.0"/>
	  <attribute name="Implementation-Title" value="'${name}': ${Name} Reference Implementation"/>
	  <attribute name="Implementation-Version" value="${version}"/>
	  <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc."/>
  	  <attribute name="Implementation-Vendor-Id" value="com.sun"/>
	  <attribute name="Extension-Name" value="javax.faces"/>
	</manifest>
    </jar>

  </target>


  <!--
       ===================================================================
         Clean up build and distribution directories
       ===================================================================
  -->
  <target name="clean" description="Clean build directory">
    <delete dir="${build.dir}" />
    <delete>
      <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
    <!-- delete this file since it's copied from another file based on JSP level -->
    <delete file="${basedir}/test/javax/faces/mock/MockPageContext.java"/>
    <delete dir="${dist.dir}"/>
  </target>


  <!--
       ===================================================================
         Clean everything
       ===================================================================
  -->
  <target name="allclean" depends="clean">
  </target>


  <!--
       ===================================================================
         Create the API documentation
       ===================================================================
  -->

  <target name="javadoc_check">
    <uptodate property="javadoc.notrequired" targetfile="${build.javadocs}/packages.html" >
        <srcfiles dir= "${src.dir}" includes="**/*.java"/>
    </uptodate>
  </target>

  <target name="javadocs" depends="prepare, javadoc_check"
          unless="javadoc.notrequired"
          description="Create the JavaDoc API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="javax.*"
             sourcepath="${src.dir}"
             destdir="${build.javadocs}"
             private="${javadoc.private}"
             protected="${javadoc.protected}"
             windowtitle="${Name} (${version})"
             doctitle="${Name} (${version})"
             bottom="Copyright &#169; 2002-2003 Sun Microsystems, Inc. All Rights Reserved.">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>


  <target name="mifdocs" depends="prepare"
   description="Create the JavaDoc API documentation in MIF format">

    <mkdir dir="${build.mifdocs}"/>
    <javadoc packagenames="javax.*"
             sourcepath="${src.dir}"
             destdir="${build.mifdocs}"
             private="false"
             protected="true">
      <classpath refid="compile.classpath"/>
      <doclet     name="com.sun.tools.doclets.mif.MIFDoclet"
                  path="${mifdoclet.jar}">
        <param    name="-batchfilepaths"
                 value="relative"/>
      </doclet>
    </javadoc>


  </target>


  <!--
       ===================================================================
         Main target
       ===================================================================
  -->
  <target name="main" depends="jars"
   description="Compile API classes and build JAR file"/>


  <!--
       ===================================================================
         Distributions target
       ===================================================================
  -->
  <target name="dist" depends="main,javadocs"
   description="Build distribution files">

    <!-- Create the distributions directory -->
    <mkdir        dir="${dist.dir}"/>

    <!-- Create the binary distribution -->
    <zip     destfile="${dist.dir}/jsf-api-${version}.zip">
      <zipfileset dir="${build.dir}"
             includes="lib/** javadocs/**"
               prefix="jsf-api-${version}"/>
    </zip>

    <!-- Create the javadocs distribution -->
    <zip     destfile="${dist.dir}/jsf-api-javadocs-${version}.zip">
      <zipfileset dir="${build.dir}"
             includes="javadocs/**"
               prefix="jsf-api-${version}"/>
    </zip>


    <!-- Create the source distribution -->
    <zip     destfile="${dist.dir}/jsf-api-src-${version}.zip">
      <zipfileset dir="${basedir}"
             includes="build.xml COPYRIGHT LICENSE.html"
               prefix="jsf-api-src-${version}"/>
      <zipfileset dir="${src.dir}"
             excludes="**/CVS/**"
               prefix="jsf-api-src-${version}/src"/>
      <zipfileset dir="${doc.dir}"
             includes="*.dtd"
               prefix="jsf-api-src-${version}/doc"/>
    </zip>

  </target>


  <!--
       ===================================================================
         Issues list
       ===================================================================
  -->
  <target name="issues"
   description="Generate outstanding issues list">
    <style basedir="doc"
           destdir="${build.dir}"
         extension=".html"
             style="doc/OutstandingIssuesDetail.xsl"
          includes="OutstandingIssues.xml"/>
    <move     file="${build.dir}/OutstandingIssues.html"
            tofile="${build.dir}/OutstandingIssuesDetail.html"/>
    <style basedir="doc"
           destdir="${build.dir}"
         extension=".html"
             style="doc/OutstandingIssuesSummary.xsl"
          includes="OutstandingIssues.xml"/>
    <move     file="${build.dir}/OutstandingIssues.html"
            tofile="${build.dir}/OutstandingIssuesSummary.html"/>
    <style basedir="doc"
           destdir="${build.dir}"
         extension=".html"
             style="doc/OutstandingIssuesEffort.xsl"
          includes="OutstandingIssues.xml"/>
    <move     file="${build.dir}/OutstandingIssues.html"
            tofile="${build.dir}/OutstandingIssuesEffort.html"/>

  </target>


</project>
