<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!-- ========== ActionSource Properties ==================================== -->


<!-- template

      <property>
        <description>
        </description>
        <display-name></display-name>
        <icon></icon>
        <property-name></property-name>
        <property-class>java.lang.String</property-class>
      </property>

-->
<root>
    <property>
        <description>
          MethodExpression representing the application action to invoke
          when this component is activated by the user.  The expression
          must evaluate to a public method that takes no parameters, and
          returns an Object (the toString() of which is called to derive
          the logical outcome) which is passed to the NavigationHandler
          for this application.
        </description>
        <display-name>Application Action</display-name>
        <icon></icon>
        <property-name>action</property-name>
        <property-class>javax.el.MethodExpression</property-class>
        <property-extension>
            <method-signature>
                java.lang.Object action()
            </method-signature>
        </property-extension>
    </property>

    <property>
        <description>
            <![CDATA[<p>

          MethodExpression representing an action listener method that
          will be notified when this component is activated by the user.
          The expression must evaluate to a public method that takes an
          ActionEvent parameter, with a return type of void, <span
          class="changed_added_2_0">or to a public method that takes no
          arguments with a return type of void.  In the latter case, the
          method has no way of easily knowing where the event came from,
          but this can be useful in cases where a notification is needed
          that "some action happened".</span>

</p>]]>
        </description>
        <display-name>Action Listener</display-name>
        <icon></icon>
        <property-name>actionListener</property-name>
        <property-class>javax.el.MethodExpression</property-class>
        <property-extension>
            <method-signature>
                void actionListener(javax.faces.event.ActionEvent)
            </method-signature>
<!-- PENDING modify tlddoc to handle an OR of method signatures 
as required by 
https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=447 
            <method-signature>
                void actionListener()
            </method-signature>
-->
        </property-extension>
    </property>

    <property>
        <description>
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
        </description>
        <display-name>Immediate Action</display-name>
        <icon></icon>
        <property-name>immediate</property-name>
        <property-class>boolean</property-class>
        <property-extension>
            <value-expression-enabled>true</value-expression-enabled>
        </property-extension>
    </property>
</root>
