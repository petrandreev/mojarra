<?xml version='1.0' encoding='UTF-8'?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- ========== Core Properties ============================================ -->


<!-- template

      <property>
        <description>
        </description>
        <display-name></display-name>
        <icon></icon>
        <property-name></property-name>
        <property-class>java.lang.String</property-class>
      </property>

-->
<root>
    <property>
        <description>
          CSS style(s) to be applied when this component is rendered.
        </description>
        <display-name>CSS Styles</display-name>
        <icon></icon>
        <property-name>style</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <pass-through>true</pass-through>
        </property-extension>
    </property>

    <property>
        <description>
          Space-separated list of CSS style class(es) to be applied when
          this element is rendered.  This value must be passed through
          as the "class" attribute on generated markup.
        </description>
        <display-name>CSS Style Classes</display-name>
        <icon></icon>
        <property-name>styleClass</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <pass-through>false</pass-through>
        </property-extension>
    </property>

    <property>
        <description>
          Advisory title information about markup elements generated
          for this component.
        </description>
        <display-name>Advisory Title</display-name>
        <icon></icon>
        <property-name>title</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <pass-through>true</pass-through>
        </property-extension>
    </property>

    <property>
        <description><![CDATA[<div class="changed_added_2_2"><p>

          If the view being rendered is not HTML5, the value of this
          attribute must be ignored.  Otherwise, determine the correct
          markup element to host the data- attribute(s).  This markup
          element will always be the outer-most markup element
          corresponding precisely to this component instance.  If
          necessary, a <code>&lt;div&gt;</code> or a
          <code>&lt;span&gt;</code> must be rendered to host the data-
          attribute(s), depending on whether or not the component is,
          itself, block or inline in nature.</p>

          <p>Interpret the value of the attribute as a JSON string.</p>

          <p>If none of the right hand side values in the JSON string is
          itself a JSON object, for each name : value pair in the JSON
          object output
          <code>data-[<em>name</em>]="[<em>value</em>]"</code>, where
          <em>name</em> is the name from the name : value pair, and
          <em>value</em> is the value from the name : value pair.</p>

          <p>If any of the right hand side values in the JSON string is
          a JSON object render the attributes according to the following
          algorithm.  Let <em>nameStack</em> be a stack data structure.
          Let <em>jsonObj</em> be a JSON object comprised of
          <em>jsonName</em> and <em>jsonValue</em>.  Parse the value of
          the attribute as JSON into <em>jsonObj</em>.  Push
          <em>jsonName</em> onto <em>nameStack</em>.  If
          <em>jsonValue</em> is a JSON object, recursively apply the
          algorithm.  Otherwise, render a <code>data-</code> attribute
          with the name <code>data-<em>stackExplode</em></code>, where
          <em>stackExplode</em> is a printout of the entire stack,
          starting with the literal string "data-" and followed by each
          element in the stack, separated by "-".  The value of such a
          <code>data-</code> attribute is <em>jsonValue</em>, enclosed
          in quotes.  When all the values for the current
          <em>jsonName</em> have been handled, pop <em>jsonName</em>
          from the <em>nameStack</em>.</p>

          <p>Consider this example.</p>

          <p><code>&lt;h:outputText data="{ a : { b : { c : { d : e, f : g }, h, { i : { j : { k : l } } } } } }" value="foo"/&gt;</code></p>

          <p>This would be rendered as <code><pre>
&lt;span data-a-b-c-d="e" data-a-b-c-f="g" data-a-b-c-h="i" data-a-b-c-j-k-l-m="n" &gt;foo&lt;/span&gt;
</pre></code></p>

          </div>]]></description>
        <display-name>HTML5 Custom Data Attributes</display-name>
        <icon></icon>
        <property-name>data</property-name>
        <property-class>java.lang.String</property-class>
        <property-extension>
            <pass-through>true</pass-through>
        </property-extension>
    </property>


</root>
