<?xml version='1.0' encoding='UTF-8'?>

<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License). You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the License at
 https://javaserverfaces.dev.java.net/CDDL.html or
 legal/CDDLv1.0.txt. 
 See the License for the specific language governing
 permission and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at legal/CDDLv1.0.txt.    
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 [Name of File] [ver.__] [Date]
 
 Copyright 2005 Sun Microsystems Inc. All Rights Reserved
-->

<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd"
    version="1.2">

  <!-- Custom Components -->

  <component>
    <component-type>DemoArea</component-type>
    <component-class>components.components.AreaComponent</component-class>
    <property>
      <description>
        Alternate text if we synthesize an ImageArea bean.
      </description>
      <property-name>alt</property-name>
      <property-class>java.lang.String</property-class>
    </property>
    <property>
      <description>
        Hotspot coordinates if we synthesize an ImageArea bean.
      </description>
      <property-name>coords</property-name>
      <property-class>java.lang.String</property-class>
    </property>
    <property>
      <description>
        Shape (default, rect, circle, poly) if we synthesize an ImageArea bean.
      </description>
      <property-name>shape</property-name>
      <property-class>java.lang.String</property-class>
    </property>
    
    <component-extension>
      <component-family>Area</component-family>
      <renderer-type>DemoArea</renderer-type>
    </component-extension>
    
  </component>

  <component>
    <component-type>Graph</component-type>
    <component-class>components.components.GraphComponent</component-class>
    
    <component-extension>
      <component-family>Graph</component-family>
      <renderer-type>MenuBar</renderer-type>
    </component-extension>
  </component>

  <component>
    <component-type>DemoMap</component-type>
    <component-class>components.components.MapComponent</component-class>
    <property>
      <description>
        Alternate text for the currently selected child AreaComponent.
      </description>
      <property-name>current</property-name>
      <property-class>java.lang.String</property-class>
    </property>
    
    <component-extension>
      <component-family>Map</component-family>
      <renderer-type>DemoMap</renderer-type>
    </component-extension>
    
  </component>

  <component>
    <component-type>Pane</component-type>
    <component-class>components.components.PaneComponent</component-class>
    
    <component-extension>
      <component-family>Pane</component-family>
      <renderer-type>Tab</renderer-type>
    </component-extension>
  </component>
  
  <component>
    <component-type>Scroller</component-type>
    <component-class>components.components.ScrollerComponent</component-class>
    <facet>

      <description>This facet will render as the header of the table.
      It should be a panelGroup with the same number of columns as the
      data</description>
      <display-name>header</display-name>
      <facet-name>header</facet-name>
    </facet>
    <facet>

      <description>This facet will render as the content of the "next"
      widget in the scroller.  header of the table.  It should be a
      panelGroup with an outputText that says "Next" in text, and also a
      right arrow icon.</description> 
      <display-name>next</display-name>
      <facet-name>next</facet-name>
    </facet>
    <facet>

      <description>This facet will render as the content of the "next"
      widget in the scroller.  It should be a panelGroup with an
      outputText that says "Next" in text, and also a right arrow
      icon.</description> 
      <display-name>next</display-name>
      <facet-name>next</facet-name>
    </facet>
    <facet>

      <description>This facet will render as the content of the "previous"
      widget in the scroller.  It should be a panelGroup with an
      outputText that says "Previous" in text, and also a left arrow
      icon.</description> 
      <display-name>next</display-name>
      <facet-name>next</facet-name>
    </facet>
    <facet>

      <description>This facet will render as the content of the
      "current" widget in the scroller.  It shoud be an icon that
      renders near the "current" page in the result set.</description>

      <display-name>next</display-name>
      <facet-name>next</facet-name>
    </facet>
    
    <component-extension>
      <component-family>Scroller</component-family>
    </component-extension>
  </component>

  <component>
    <component-type>Chart</component-type>
    <component-class>components.components.ChartComponent</component-class>
    
    <component-extension>
      <component-family>Chart</component-family>
    </component-extension>
  </component>
  
  <component>
    <component-type>ChartItem</component-type>
    <component-class>components.components.ChartItemComponent</component-class>
    
    <component-extension>
      <component-family>ChartItem</component-family>
    </component-extension>
  </component>
    <!-- Custom Renderers -->

  <render-kit>

    <renderer>
      <description>
        Renderer for a components.components.AreaComponent component.
      </description>
      <component-family>Area</component-family>
      <renderer-type>DemoArea</renderer-type>
      <renderer-class>components.renderkit.AreaRenderer</renderer-class>
      
      <attribute>
        <description>
          Context-relative path to an image to be displayed when the
          mouse is not hovering over this hotspot.
        </description>
        <attribute-name>onmouseout</attribute-name>
        <attribute-class>java.lang.String</attribute-class>
      </attribute>
      <attribute>
        <description>
          Context-relative path to an image to be displayed when the
          mouse is hovering over this hotspot.
        </description>
        <attribute-name>onmouseover</attribute-name>
        <attribute-class>java.lang.String</attribute-class>
      </attribute>
      <attribute>
        <description>
          CSS style class to use when rendering this component.
        </description>
        <attribute-name>styleClass</attribute-name>
        <attribute-class>java.lang.String</attribute-class>
      </attribute>
    </renderer>

    <renderer>
      <description>
        Renderer for a components.components.MapComponent component.
      </description>
      <component-family>Map</component-family>
      <renderer-type>DemoMap</renderer-type>
      <renderer-class>components.renderkit.MapRenderer</renderer-class>
      
      <attribute>
        <description>
          CSS style class to use when rendering this component.
        </description>
        <attribute-name>styleClass</attribute-name>
        <attribute-class>java.lang.String</attribute-class>
      </attribute>
    </renderer>

    <renderer>
      <component-family>Graph</component-family>
      <renderer-type>MenuBar</renderer-type>
      <renderer-class>components.renderkit.MenuBarRenderer</renderer-class>
    </renderer>

    <renderer>
      <component-family>Graph</component-family>
      <renderer-type>MenuTree</renderer-type>
      <renderer-class>components.renderkit.MenuTreeRenderer</renderer-class>
    </renderer>

    <renderer>
      <description>
        Renderer for a UIData component that can serve as the basis for
        different markup creation for the components that are children
        of the child UIColumn components.
      </description>
      <component-family>javax.faces.Data</component-family>
      <renderer-type>Repeater</renderer-type>
      <renderer-class>components.renderkit.RepeaterRenderer</renderer-class>
    </renderer>

    <renderer>
      <component-family>javax.faces.Output</component-family>
      <renderer-type>Stylesheet</renderer-type>
      <renderer-class>components.renderkit.StylesheetRenderer</renderer-class>
    </renderer>

    <renderer>
      <component-family>Pane</component-family>
      <renderer-type>TabLabel</renderer-type>
      <renderer-class>components.renderkit.TabLabelRenderer</renderer-class>
    </renderer>

    <renderer>
      <component-family>Pane</component-family>
      <renderer-type>Tab</renderer-type>
      <renderer-class>components.renderkit.TabRenderer</renderer-class>
    </renderer>

    <renderer>
      <component-family>Pane</component-family>
      <renderer-type>Tabbed</renderer-type>
      <renderer-class>components.renderkit.TabbedRenderer</renderer-class>
    </renderer>
  </render-kit>


</faces-config>
