<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License). You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the License at
 https://javaserverfaces.dev.java.net/CDDL.html or
 legal/CDDLv1.0.txt. 
 See the License for the specific language governing
 permission and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at legal/CDDLv1.0.txt.    
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 [Name of File] [ver.__] [Date]
 
 Copyright 2005 Sun Microsystems Inc. All Rights Reserved
-->

<project name="components" default="build.war" basedir=".">
  <target name="init" depends="verifyPreconditions">
      <tstamp/>
  </target>

  <property file="build.properties"/>               <!-- this demo local   -->
  <property file="../build.properties"/>            <!-- demos local       -->
  <property file="${user.home}/build.properties"/>  <!-- User local        -->

  <!-- Configure the context path for this application -->
  <property name="context.path" value="/jsf-components"/>
  <property name="webapp" value="jsf-components" />
  <property name="build"   value="${basedir}/build" />

  <property name="demo-components.jar" 
            value="${build}/${webapp}/WEB-INF/lib/demo-components.jar"/>

  <path id="classpath">
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${jstl.jar}"/>
    <pathelement location="${standard.jar}"/>
    <pathelement location="${build}/WEB-INF/classes"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp.jar}"/> 
  </path>


  <target name="clean" >
    <delete dir="${build}" />
    <delete dir="${context.path}" />
  </target>

  <target name="verifyPreconditions">

    <antcall target="checkRequiredFile">
       <param name="file" value="${servlet.jar}"/>
       <param name="fail.message" value="A jar file containing the Servlet 2.3 and JSP1.2 classes is required to compile components.  Please define the property servlet.jar in your build.properties file and ensure that the file exists."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jsp.jar}"/>
       <param name="fail.message" value="A jar file containing the 2.0 classes is required to compile components.  Please define the property jsp.jar in your build.properties file and ensure that the file exists."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-beanutils.jar}"/>
       <param name="fail.message" value="${commons-beanutils.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-digester.jar}"/>
       <param name="fail.message" value="${commons-digester.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-logging.jar}"/>
       <param name="fail.message" value="${commons-logging.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-collections.jar}"/>
       <param name="fail.message" value="${commons-collections.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jsf-api.jar}"/>
       <param name="fail.message" value="${jsf-api.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jsf-impl.jar}"/>
       <param name="fail.message" value="${jsf-impl.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${standard.jar}"/>
       <param name="fail.message" value="${standard.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jstl.jar}"/>
       <param name="fail.message" value="${jstl.jar} must exist."/>
    </antcall>

  </target>

  <target name="prepare" depends="init"
   	description="Create build directories.">
    <mkdir dir="${build}" />
    <mkdir dir="${build}/${webapp}" />
    <mkdir dir="${build}/classes" />
    <mkdir dir="${build}/classes/${webapp}" />
    <mkdir dir="${build}/classes/components" />
    <mkdir dir="${build}/classes/components/META-INF" />
    <mkdir dir="${build}/${webapp}/src/components" />
    <mkdir dir="${build}/${webapp}/WEB-INF/lib" />
    <mkdir dir="${build}/${webapp}/WEB-INF/classes" />
  </target>

  <!-- Executable Targets -->

  <target name="build" unless="skip.build" depends="deploy.copyJars" 
     description="Compile Java files for components, not webapp." >

    <javac debug="on" srcdir="src/java" destdir="${build}/classes/components">
	
        <include name="components/**" />
        <classpath refid="classpath"/>
    </javac>
    
    <copy todir="${build}/classes/components/META-INF" 
            file="src/java/components/taglib/components.tld"/>

    <javac debug="on" srcdir="src/java" destdir="${build}/${webapp}/WEB-INF/classes">
         <include name="demo/**" />
         <classpath refid="classpath"/>
    </javac>

    <!-- strip out the components -->
    <delete dir="${build}/${webapp}/WEB-INF/classes/components" />

    <copy todir="${build}/${webapp}/WEB-INF">
      <fileset dir="web/WEB-INF"    >
        <include name="web.xml" />
      </fileset>
    </copy>

    <!-- copy over the properties -->
    <copy todir="${build}/${webapp}/WEB-INF/classes/">
      <fileset dir="src/java"    >
        <include name="**/*.properties" />
      </fileset>
    </copy>


    <!-- copy over the application configuration resource -->
    <mkdir  dir="${build}/classes/components/META-INF"/>
    <copy todir="${build}/classes/components/META-INF"
           file="src/conf/faces-config.xml"/>

    <!-- copy the java source to the webapp for viewing by the user -->
    <copy todir="${build}/${webapp}/src/java/components">
      <fileset dir="src/java/components"/>
    </copy>
    <copy todir="${build}/${webapp}/src/java/demo">
      <fileset dir="src/java/demo"/>    
    </copy>
    <copy todir="${build}/${webapp}/WEB-INF" file="web/WEB-INF/tlds/demo.tld"/>

    <copy todir="${build}/${webapp}">
      <fileset dir="web">
        <include name="**/*.html" />
        <include name="**/*.gif" />
        <include name="**/*.jpg" />
        <include name="**/*.jsp" />
        <include name="**/*.css" />
        <include name="**/*.xml" />
      </fileset> 
    </copy>
  </target>

  <target name="deploy.copyJars" depends="prepare" if="build.standalone">
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${commons-beanutils.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${commons-collections.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${commons-logging.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${commons-digester.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${jsf-api.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${jsf-impl.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${jstl.jar}" />
    <copy todir="${build}/${webapp}/WEB-INF/lib" file="${standard.jar}" />
  </target>

  <target name="checkRequiredFile">
    <available file="${file}" property="requirement.satisfied"/>
    <antcall target="checkRequired.fail"/>
  </target>

  <target name="checkRequired.fail" unless="requirement.satisfied">
    <fail message="${fail.message}"/>
  </target>

  <target name="build.war" depends="build">
    <!-- create demo-components jar file -->
    <jar jarfile="${demo-components.jar}"
        basedir="${build}/classes/components"/>
    <copy todir=".." file="${demo-components.jar}" />

    <!-- create a war file for distribution -->
    <jar jarfile="${webapp}.war" basedir="${build}/${webapp}"/>
    <copy todir=".." file="${webapp}.war" />
    <delete file="${webapp}.war" />

  </target>

</project>

