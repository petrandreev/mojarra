<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License). You may not use this file except in
 compliance with the License.
 
 You can obtain a copy of the License at
 https://javaserverfaces.dev.java.net/CDDL.html or
 legal/CDDLv1.0.txt. 
 See the License for the specific language governing
 permission and limitations under the License.
 
 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at legal/CDDLv1.0.txt.    
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 your own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"
 
 [Name of File] [ver.__] [Date]
 
 Copyright 2005 Sun Microsystems Inc. All Rights Reserved
-->

<project name="carstore" default="build.war" basedir=".">
  <target name="init" depends="verifyPreconditions">
      <tstamp/>
  </target>

  <property file="build.properties"/>               <!-- this demo local   -->
  <property file="../build.properties"/>            <!-- demos local       -->
  <property file="${user.home}/build.properties"/>  <!-- User local        -->

  <!-- Configure the context path for this application -->
  <property name="context.path" value="/jsf-cardemo"/>
  <property name="example" value="jsf-cardemo" />
  <property name="build"   value="${basedir}/build" />
  <property name="build.javadocs"   value="${build}/${example}/javadocs" />

  <property name="demo-components.jar" 
            value="../demo-components.jar"/>

  <path id="classpath">
    <pathelement location="${commons-beanutils.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${commons-digester.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${jsf-api.jar}"/>
    <pathelement location="${jsf-impl.jar}"/>
    <pathelement location="${demo-components.jar}"/>
    <pathelement location="${jstl.jar}"/>
    <pathelement location="${build}/WEB-INF/classes"/>
    <pathelement location="${servlet.jar}"/>
    <pathelement location="${jsp.jar}" />
  </path>


  <target name="clean" >
    <delete dir="${build}" />
    <delete dir="${context.path}" />
    <delete file="${example}.war" />
  </target>

  <target name="verifyPreconditions">

    <antcall target="checkRequiredFile">
       <param name="file" value="${servlet.jar}"/>
       <param name="fail.message" value="A jar file containing the Servlet 2.3 and JSP1.2 classes is required to compile carstore.  Please define the property servlet.jar in your build.properties file and ensure that the file exists."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-beanutils.jar}"/>
       <param name="fail.message" value="${commons-beanutils.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-digester.jar}"/>
       <param name="fail.message" value="${commons-digester.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-logging.jar}"/>
       <param name="fail.message" value="${commons-logging.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${commons-collections.jar}"/>
       <param name="fail.message" value="${commons-collections.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jsf-api.jar}"/>
       <param name="fail.message" value="${jsf-api.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jsf-impl.jar}"/>
       <param name="fail.message" value="${jsf-impl.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${standard.jar}"/>
       <param name="fail.message" value="${standard.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${jstl.jar}"/>
       <param name="fail.message" value="${jstl.jar} must exist."/>
    </antcall>

    <antcall target="checkRequiredFile">
       <param name="file" value="${demo-components.jar}"/>
       <param name="fail.message" value="${demo-components.jar} must exist."/>
    </antcall>

  </target>

  <target name="checkRequiredFile">
    <available file="${file}" property="requirement.satisfied"/>
    <antcall target="checkRequired.fail"/>
  </target>

  <target name="checkRequired.fail" unless="requirement.satisfied">
    <fail message="${fail.message}"/>
  </target>

  <target name="prepare" depends="init"
   	description="Create build directories.">
    <mkdir dir="${build}/${example}" />
    <mkdir dir="${build}/${example}/WEB-INF" />
    <mkdir dir="${build}/${example}/WEB-INF/classes" />
    <mkdir dir="${build}/${example}/WEB-INF/lib" />
  </target>

  <target name="copyJars" depends="prepare,deploy.copyJars">
    <copy todir="${build}/${example}/WEB-INF/lib" file="${demo-components.jar}"/>
  </target>

  <target name="deploy.copyJars" if="build.standalone">
    <copy todir="${build}/${example}/WEB-INF/lib" file="${commons-beanutils.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${commons-collections.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${commons-logging.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${commons-digester.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${jsf-api.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${jsf-impl.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${jstl.jar}" />
    <copy todir="${build}/${example}/WEB-INF/lib" file="${standard.jar}" />
  </target>

  <target name="javadoc_check">
    <uptodate property="javadoc.notrequired" targetfile="${build.javadocs}/packages.html" >
        <srcfiles dir= "src/java" includes="**/*.java,**/*.html"/>
    </uptodate>
  </target>
  
  <target name="javadocs" depends="prepare, javadoc_check"
          unless="javadoc.notrequired"
          description="Create the JavaDocs">

    <!-- replace the @context.path@ tokens with the proper value -->
    <mkdir dir="build/javadoc-src"/>
    <filter token="context.path" value="${context.path}"/>
    <copy todir="build/javadoc-src" filtering="true">
      <fileset dir="src/java" includes="**/*.java,**/*.html" />
    </copy>

    <javadoc destdir="${build.javadocs}"
             windowtitle="${example}"
             doctitle="${example}"
             bottom="Copyright &#169; 2004 Sun Microsystems, Inc. All Rights Reserved.">
       <fileset dir="build/javadoc-src">
         <include name="**/*.java"/>
       </fileset>
      <classpath refid="classpath"/>
    </javadoc>
  </target>
  
  <!-- Executable Targets -->

  <target name="build" depends="copyJars,javadocs" 
     description="Compile Java files and copy static files." >
    <javac debug="on" 
           srcdir="src/java" destdir="${build}/${example}/WEB-INF/classes">
    	<include name="**/*.java" />
     <classpath refid="classpath"/>
    </javac>
    <copy todir="${build}/${example}/WEB-INF">
      <fileset dir="web/WEB-INF"    >
        <include name="*.xml" />
      </fileset>
    </copy>
    <copy todir="${build}/${example}/WEB-INF">
      <fileset dir="web/WEB-INF/tlds"    >
        <include name="*.tld" />
      </fileset>
    </copy>

     <copy todir="${build}/${example}/">
      <fileset dir="web">
        <include name="**/*.html" />
        <include name="**/*.gif" />
        <include name="**/*.jpg" />
        <include name="**/*.jsp" />
        <include name="**/*.css" />
        <include name="**/*.xml" />
      </fileset>
    </copy>
    <copy todir="${build}/${example}/WEB-INF/classes/carstore" >
      <fileset dir="src/java/carstore" >
         <include name="**/*.properties"/>
      </fileset>
      <fileset dir="src/java/carstore" >
         <include name="**/*.xml"/>
      </fileset>

    </copy>
  </target>	 

  <target name="build.war" depends="build">
    <!-- create a war file for distribution -->
    <jar jarfile="${example}.war" basedir="${build}/${example}"/> 
    <copy todir=".." file="${example}.war" />
    <delete file="${example}.war" />
  </target>

</project>

