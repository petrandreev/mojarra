<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<project name="JSF Demo unit tests" default="build" basedir=".">

    <!-- Test Properties -->
    <property file="${user.home}/build.properties"/>
    <property file="../build.properties"/>
    <import file="${jsf.build.home}/common/ant/common.xml"/>

    <property name="build" value="${basedir}/test/build"/>
    <property name="guessNumber.context.path" value="/jsf-guessNumber"/>
    <property name="components.context.path" value="/jsf-components"/>
    <property name="cardemo.context.path" value="/jsf-cardemo"/>
    <property name="mojarra_ext.context.path" value="/mojarra_ext"/>
    <property name="mapping-extension.context.path"
              value="/jsf-mappingDemo-extension"/>
    <property name="mapping-prefix.context.path"
              value="/jsf-mappingDemo-prefix"/>
    <!-- Default value for debugging arguments is no.  Override in
         build.properties -->


    <!-- Demo WAR files -->
    <property name="components.war"
              value="${basedir}/components/build/jsf-components.war"/>
    <property name="guessNumber.war"
              value="${basedir}/guessNumber/build/jsf-guessNumber.war"/>
    <property name="cardemo.war"
              value="${basedir}/carstore/build/jsf-cardemo.war"/>
    <property name="mojarra_ext.war"
              value="${basedir}/mojarra_ext/build/mojarra_ext.war"/>
    <property name="mapping-extension.war"
              value="${basedir}/test/mappingDemo/build/jsf-mappingDemo-extension.war"/>
    <property name="mapping-prefix.war"
              value="${basedir}/test/mappingDemo/build/jsf-mappingDemo-prefix.war"/>
    <property name="test.results.dir" value="${basedir}/testresults"/>

    <property name="appserver.domain" value="domain1"/>

    <path id="classpath">
        <pathelement location="${jsf-api.jar}"/>
        <pathelement location="${build}/classes"/>
        <path refid="htmlunit.compile.classpath"/>
        <path refid="compile.classpath"/>
    </path>

    <path id="run.classpath">
        <path refid="htmlunit.runtime.classpath"/>
        <pathelement location="${build}/classes"/>
        <!-- Include this to have access to the ResourceBundles for carstore -->
        <pathelement location="${basedir}/carstore/src"/>
    </path>

    <target name="init" depends="check.changes">
        <tstamp/>
    </target>

    <target name="check.changes">
        <uptodate property="skip.build"
                  targetfile="${build}/last-build">
            <srcfiles dir="${basedir}">
                <include name="test/**/*.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="prepare" depends="init"
            description="Create build directories.">
        <mkdir dir="${build}/classes"/>
    </target>

    <macrodef name="run-tests">
        <attribute name="context-path"/>
        <attribute name="demo-name"/>
        <attribute name="demo-war"/>
        <attribute name="tests"/> 
        <sequential>
            <undeploy.artifact artifact="@{demo-war}"
                               appName="@{demo-name}"/>
            <deploy.artifact artifact="@{demo-war}"
                               appName="@{demo-name}"/>
            <jsf.junit context-path="@{context-path}"
                       classpath-refid="run.classpath"
                       test-results-dir="${test.results.dir}">
                <tests>
                    <fileset dir="test/tests">
                        <include name="**/@{tests}/**Test*.java"/>
                    </fileset>
                </tests>
            </jsf.junit>
            <undeploy.artifact artifact="@{demo-war}"
                               appName="@{demo-name}"/>
        </sequential>
    </macrodef>


    <target name="build" unless="skip.build"
            description="Compile Java files." depends="prepare">
        <touch file="${build}/last-build"/>
        <jsf.javac srcdir="test"
                   destdir="${build}/classes">
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </jsf.javac>
    </target>


    <!-- ============== UNIT TESTS =============== -->
    <!-- Global test target to run all unit tests -->


    <target name="test" depends="build"
            description="Runs all of available demo unit tests">
        <delete dir="${test.results.dir}"/>
        <mkdir dir="${test.results.dir}"/>

        <!--  RELEASE_PENDING temp remove, pending port
        <run-tests demo-war="${components.war}" 
                   demo-name="jsf-components"
                   tests="components"
                   context-path="${components.context.path}"/>
         -->

         <run-tests demo-war="${guessNumber.war}" 
                   demo-name="jsf-guessNumber"
                   tests="guessNumber"
                   context-path="${guessNumber.context.path}"/>
        
        <!-- Need to reevaluate how to do this since
             the single test is against both WARs
         <run-tests demo-war="${mapping-prefix.war}" 
                   demo-name="mapping-prefix"
                   context-path="${mapping-prefix.context.path}"/>
        
         <run-tests demo-war="${mapping-extension.war}" 
                   demo-name="mapping-extension"
                   context-path="${mapping-extension.context.path}"/>
        -->

        <!-- RELEASE_PENDING temp remove of cardemo  - currently fails with 404 error
        <copy todir="${build}/classes">
            <fileset dir="${basedir}/carstore/src/java">
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <run-tests demo-war="${cardemo.war}"
                   demo-name="jsf-cardemo"
                   tests="cardemo"
                   context-path="${cardemo.context.path}"/>

        -->


        <!--  Currently fails with 500 error (NPE)
        <run-tests demo-war="${mojarra_ext.war}"
                   demo-name="mojarra_ext"
                   tests="mojarra_ext"
                   context-path="${mojarra_ext.context.path}"/>

        -->

    </target>

</project>
